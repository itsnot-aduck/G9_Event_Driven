
G9_Event_Driven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08008a58  08008a58  00018a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff8  08008ff8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009000  08009000  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009004  08009004  00019004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001d8  080091e0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  080091e0  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012899  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a48  00000000  00000000  00032ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8a  00000000  00000000  00036658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018273  00000000  00000000  000373e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015422  00000000  00000000  0004f655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092477  00000000  00000000  00064a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bc0  00000000  00000000  000f6ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000fcab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a3c 	.word	0x08008a3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008a3c 	.word	0x08008a3c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f003 f8c3 	bl	8004148 <HAL_TIM_Base_Start>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000fde:	bf00      	nop
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3f9      	bcc.n	8000fe0 <DELAY_TIM_Us+0x16>
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b088      	sub	sp, #32
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht->Pin;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	889b      	ldrh	r3, [r3, #4]
 8001016:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fd90 	bl	8002b50 <HAL_GPIO_Init>
}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht->Pin;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	889b      	ldrh	r3, [r3, #4]
 8001054:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fd71 	bl	8002b50 <HAL_GPIO_Init>
}
 800106e:	bf00      	nop
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	889b      	ldrh	r3, [r3, #4]
 800108a:	78fa      	ldrb	r2, [r7, #3]
 800108c:	4619      	mov	r1, r3
 800108e:	f001 fefb 	bl	8002e88 <HAL_GPIO_WritePin>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	889b      	ldrh	r3, [r3, #4]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f001 fed3 	bl	8002e58 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
    return value;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff71 	bl	8000fb4 <DELAY_TIM_Init>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff6b 	bl	8000fca <DELAY_TIM_Us>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff95 	bl	8001038 <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 800110e:	2100      	movs	r1, #0
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffb0 	bl	8001076 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 8001116:	f244 6150 	movw	r1, #18000	; 0x4650
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffdd 	bl	80010da <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff6a 	bl	8000ffa <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 8001126:	2132      	movs	r1, #50	; 0x32
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffd6 	bl	80010da <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb3 	bl	800109a <DHT11_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d112      	bne.n	8001160 <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 800113a:	2150      	movs	r1, #80	; 0x50
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffcc 	bl	80010da <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa9 	bl	800109a <DHT11_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 8001152:	bf00      	nop
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffa0 	bl	800109a <DHT11_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d0f9      	beq.n	8001154 <DHT11_Start+0x58>
        }
    }

    return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff3f 	bl	8000ffa <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
 8001180:	e035      	b.n	80011ee <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 8001182:	bf00      	nop
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff88 	bl	800109a <DHT11_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f9      	beq.n	8001184 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 8001190:	2128      	movs	r1, #40	; 0x28
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa1 	bl	80010da <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff7e 	bl	800109a <DHT11_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10c      	bne.n	80011be <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2201      	movs	r2, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e00d      	b.n	80011da <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	f1c3 0307 	rsb	r3, r3, #7
 80011c4:	2201      	movs	r2, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	4013      	ands	r3, r2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 80011da:	bf00      	nop
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff5c 	bl	800109a <DHT11_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d0f9      	beq.n	80011dc <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	3301      	adds	r3, #1
 80011ec:	73bb      	strb	r3, [r7, #14]
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d9c6      	bls.n	8001182 <DHT11_ReadByte+0x18>
    }

    return value;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <DHT11_Init+0x3c>)
 8001226:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <DHT11_Init+0x3c>)
 800122c:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff46 	bl	80010c0 <DHT11_DelayInit>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	bf800000 	.word	0xbf800000

08001240 <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	ed2d 8b02 	vpush	{d8}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff53 	bl	80010fc <DHT11_Start>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d15b      	bne.n	8001318 <DHT11_GetData+0xd8>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff82 	bl	800116a <DHT11_ReadByte>
 8001266:	4603      	mov	r3, r0
 8001268:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff7d 	bl	800116a <DHT11_ReadByte>
 8001270:	4603      	mov	r3, r0
 8001272:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff78 	bl	800116a <DHT11_ReadByte>
 800127a:	4603      	mov	r3, r0
 800127c:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff73 	bl	800116a <DHT11_ReadByte>
 8001284:	4603      	mov	r3, r0
 8001286:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff6e 	bl	800116a <DHT11_ReadByte>
 800128e:	4603      	mov	r3, r0
 8001290:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 8001292:	7aba      	ldrb	r2, [r7, #10]
 8001294:	7bb9      	ldrb	r1, [r7, #14]
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	4419      	add	r1, r3
 800129a:	7b3b      	ldrb	r3, [r7, #12]
 800129c:	4419      	add	r1, r3
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	440b      	add	r3, r1
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d136      	bne.n	8001314 <DHT11_GetData+0xd4>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80012b0:	7b7b      	ldrb	r3, [r7, #13]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f94e 	bl	8000554 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <DHT11_GetData+0xe8>)
 80012be:	f7ff fadd 	bl	800087c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fca5 	bl	8000c18 <__aeabi_d2f>
 80012ce:	ee07 0a90 	vmov	s15, r0
 80012d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a04 	vstr	s15, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f933 	bl	8000554 <__aeabi_i2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <DHT11_GetData+0xe8>)
 80012f4:	f7ff fac2 	bl	800087c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc8a 	bl	8000c18 <__aeabi_d2f>
 8001304:	ee07 0a90 	vmov	s15, r0
 8001308:	ee78 7a27 	vadd.f32	s15, s16, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001312:	e001      	b.n	8001318 <DHT11_GetData+0xd8>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 8001314:	2302      	movs	r3, #2
 8001316:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	ecbd 8b02 	vpop	{d8}
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40240000 	.word	0x40240000

0800132c <SRF05_DELAY_Us>:
#define TRIG_LOW()		HAL_GPIO_WritePin(SRF05->TRIGGER_GPIOx, SRF05->TRIGGER_GPIO_Pin, GPIO_PIN_RESET)
#define READ_ECHO() 	HAL_GPIO_ReadPin(SRF05->ECHO_GPIOx, SRF05->ECHO_GPIO_Pin)
extern TIM_HandleTypeDef htim4;

static void SRF05_DELAY_Us(uint16_t Time)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
	DELAY_TIM_Us(&htim4, Time); // thay the ham nay neu su dung ham delay khac
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4619      	mov	r1, r3
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <SRF05_DELAY_Us+0x1c>)
 800133c:	f7ff fe45 	bl	8000fca <DELAY_TIM_Us>

}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002d8 	.word	0x200002d8

0800134c <SRF05_Init>:

//************************* HIGH Level Layer **********************************************************/
// function:  init SRF05
// input: SRF05 target, TRIG pin, Echo Pin
// output: 0 false, 1 true
uint8_t SRF05_Init(SRF05_Device_Name* SRF05, GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin, GPIO_TypeDef* TRIGGER_GPIOx, uint16_t TRIGGER_GPIO_Pin) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	80fb      	strh	r3, [r7, #6]

	SRF05->ECHO_GPIOx = ECHO_GPIOx;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	601a      	str	r2, [r3, #0]
	SRF05->ECHO_GPIO_Pin = ECHO_GPIO_Pin;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	809a      	strh	r2, [r3, #4]
	SRF05->TRIGGER_GPIOx = TRIGGER_GPIOx;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	609a      	str	r2, [r3, #8]
	SRF05->TRIGGER_GPIO_Pin = TRIGGER_GPIO_Pin;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8b3a      	ldrh	r2, [r7, #24]
 8001372:	819a      	strh	r2, [r3, #12]
	TRIG_LOW();
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	899b      	ldrh	r3, [r3, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f001 fd82 	bl	8002e88 <HAL_GPIO_WritePin>
	if (SRF05_Read(SRF05) >= 0) {
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f80f 	bl	80013a8 <SRF05_Read>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	db01      	blt.n	800139c <SRF05_Init+0x50>
		return 1;
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <SRF05_Init+0x52>
	}
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <SRF05_Read>:

float SRF05_Read(SRF05_Device_Name* SRF05) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	uint32_t time, timeout;

	TRIG_LOW();
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6898      	ldr	r0, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	899b      	ldrh	r3, [r3, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	f001 fd64 	bl	8002e88 <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(2);
 80013c0:	2002      	movs	r0, #2
 80013c2:	f7ff ffb3 	bl	800132c <SRF05_DELAY_Us>
	TRIG_HIGH();
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6898      	ldr	r0, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f001 fd59 	bl	8002e88 <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(10);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f7ff ffa8 	bl	800132c <SRF05_DELAY_Us>
	TRIG_LOW();
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6898      	ldr	r0, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	899b      	ldrh	r3, [r3, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f001 fd4e 	bl	8002e88 <HAL_GPIO_WritePin>
	timeout = SRF05_TIMEOUT;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <SRF05_Read+0xc0>)
 80013ee:	60bb      	str	r3, [r7, #8]
	while (!READ_ECHO())
 80013f0:	e006      	b.n	8001400 <SRF05_Read+0x58>
	{
		if (timeout-- == 0x00)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <SRF05_Read+0x58>
		{
			return -1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <SRF05_Read+0xc4>)
 80013fe:	e02c      	b.n	800145a <SRF05_Read+0xb2>
	while (!READ_ECHO())
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	889b      	ldrh	r3, [r3, #4]
 8001408:	4619      	mov	r1, r3
 800140a:	4610      	mov	r0, r2
 800140c:	f001 fd24 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ed      	beq.n	80013f2 <SRF05_Read+0x4a>
		}
	}
	time = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
	while (READ_ECHO())
 800141a:	e005      	b.n	8001428 <SRF05_Read+0x80>
	{
		time++;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
		SRF05_DELAY_Us(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff ff82 	bl	800132c <SRF05_DELAY_Us>
	while (READ_ECHO())
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	889b      	ldrh	r3, [r3, #4]
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f001 fd10 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ee      	bne.n	800141c <SRF05_Read+0x74>
	}
	SRF05->Distance =  (float)time * SRF05_NUMBER;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001448:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001470 <SRF05_Read+0xc8>
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edc3 7a04 	vstr	s15, [r3, #16]

	return SRF05->Distance;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
}
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	000f4240 	.word	0x000f4240
 800146c:	bf800000 	.word	0xbf800000
 8001470:	3c8cc17a 	.word	0x3c8cc17a

08001474 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
 8001480:	4613      	mov	r3, r2
 8001482:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f023 030f 	bic.w	r3, r3, #15
 800148a:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7adb      	ldrb	r3, [r3, #11]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 80014aa:	78bb      	ldrb	r3, [r7, #2]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d108      	bne.n	80014c2 <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	73bb      	strb	r3, [r7, #14]
 80014c0:	e00a      	b.n	80014d8 <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f001 f96c 	bl	80027c0 <HAL_Delay>
	Data_I2C[1] = Data_H;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 f962 	bl	80027c0 <HAL_Delay>
	Data_I2C[3] = Data_L;
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	b299      	uxth	r1, r3
 800150a:	f107 0208 	add.w	r2, r7, #8
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2304      	movs	r3, #4
 8001516:	f001 fe15 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	4611      	mov	r1, r2
 800152e:	461a      	mov	r2, r3
 8001530:	460b      	mov	r3, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	79fa      	ldrb	r2, [r7, #7]
 8001542:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	79ba      	ldrb	r2, [r7, #6]
 8001548:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	7e3a      	ldrb	r2, [r7, #24]
 800154e:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2228      	movs	r2, #40	; 0x28
 8001554:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2206      	movs	r2, #6
 800155a:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	220c      	movs	r2, #12
 8001560:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2214      	movs	r2, #20
 8001566:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2208      	movs	r2, #8
 800156c:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 800156e:	2032      	movs	r0, #50	; 0x32
 8001570:	f001 f926 	bl	80027c0 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001574:	2200      	movs	r2, #0
 8001576:	2133      	movs	r1, #51	; 0x33
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff ff7b 	bl	8001474 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 800157e:	2200      	movs	r2, #0
 8001580:	2133      	movs	r1, #51	; 0x33
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff ff76 	bl	8001474 <LCD_Write>
	LCD_DelayMs(5);
 8001588:	2005      	movs	r0, #5
 800158a:	f001 f919 	bl	80027c0 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 800158e:	2200      	movs	r2, #0
 8001590:	2132      	movs	r1, #50	; 0x32
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff ff6e 	bl	8001474 <LCD_Write>
	LCD_DelayMs(5);
 8001598:	2005      	movs	r0, #5
 800159a:	f001 f911 	bl	80027c0 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff ff66 	bl	8001474 <LCD_Write>
	LCD_DelayMs(5);
 80015a8:	2005      	movs	r0, #5
 80015aa:	f001 f909 	bl	80027c0 <HAL_Delay>

	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	79db      	ldrb	r3, [r3, #7]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f7ff ff5c 	bl	8001474 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	7a1b      	ldrb	r3, [r3, #8]
 80015c0:	2200      	movs	r2, #0
 80015c2:	4619      	mov	r1, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff ff55 	bl	8001474 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	7a5b      	ldrb	r3, [r3, #9]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff4e 	bl	8001474 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	7a9b      	ldrb	r3, [r3, #10]
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff ff47 	bl	8001474 <LCD_Write>

	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff ff42 	bl	8001474 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2102      	movs	r1, #2
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff ff3d 	bl	8001474 <LCD_Write>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	2201      	movs	r2, #1
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff2d 	bl	8001474 <LCD_Write>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	while(*string)
 800162c:	e007      	b.n	800163e <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	603a      	str	r2, [r7, #0]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe2 	bl	8001602 <LCD_WriteChar>
	while(*string)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f3      	bne.n	800162e <LCD_WriteString+0xc>
	}
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff09 	bl	8001474 <LCD_Write>
	LCD_DelayMs(5);
 8001662:	2005      	movs	r0, #5
 8001664:	f001 f8ac 	bl	80027c0 <HAL_Delay>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
 800167c:	4613      	mov	r3, r2
 800167e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	795b      	ldrb	r3, [r3, #5]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	429a      	cmp	r2, r3
 800168c:	d303      	bcc.n	8001696 <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	3b01      	subs	r3, #1
 8001694:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	799b      	ldrb	r3, [r3, #6]
 800169a:	78ba      	ldrb	r2, [r7, #2]
 800169c:	429a      	cmp	r2, r3
 800169e:	d303      	bcc.n	80016a8 <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	799b      	ldrb	r3, [r3, #6]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d819      	bhi.n	80016e2 <LCD_SetCursor+0x72>
 80016ae:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <LCD_SetCursor+0x44>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016c5 	.word	0x080016c5
 80016b8:	080016cb 	.word	0x080016cb
 80016bc:	080016d3 	.word	0x080016d3
 80016c0:	080016db 	.word	0x080016db
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	73fb      	strb	r3, [r7, #15]
			break;
 80016c8:	e00b      	b.n	80016e2 <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	3340      	adds	r3, #64	; 0x40
 80016ce:	73fb      	strb	r3, [r7, #15]
			break;
 80016d0:	e007      	b.n	80016e2 <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	3314      	adds	r3, #20
 80016d6:	73fb      	strb	r3, [r7, #15]
			break;
 80016d8:	e003      	b.n	80016e2 <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	3354      	adds	r3, #84	; 0x54
 80016de:	73fb      	strb	r3, [r7, #15]
			break;
 80016e0:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fec0 	bl	8001474 <LCD_Write>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001704:	1d39      	adds	r1, r7, #4
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	2201      	movs	r2, #1
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <__io_putchar+0x20>)
 800170e:	f003 f9af 	bl	8004a70 <HAL_UART_Transmit>

	return ch;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000320 	.word	0x20000320

08001720 <HAL_UART_RxCpltCallback>:

/* UART Interrupt Task handler */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_UART_RxCpltCallback+0x6c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d11d      	bne.n	8001770 <HAL_UART_RxCpltCallback+0x50>
	{
		if (rxData[rxDataIndex] == '\n')
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_UART_RxCpltCallback+0x70>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_UART_RxCpltCallback+0x74>)
 800173c:	5c9b      	ldrb	r3, [r3, r2]
 800173e:	2b0a      	cmp	r3, #10
 8001740:	d110      	bne.n	8001764 <HAL_UART_RxCpltCallback+0x44>
		{
			rxData[rxDataIndex] = '\0';
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_UART_RxCpltCallback+0x70>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_UART_RxCpltCallback+0x74>)
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]
			isInterrupt = 1;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_UART_RxCpltCallback+0x78>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
			rxDataIndex = 0;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_UART_RxCpltCallback+0x70>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
			Queue_PushRear(&TaskQueue, Task_Uart_Handler);
 800175a:	4910      	ldr	r1, [pc, #64]	; (800179c <HAL_UART_RxCpltCallback+0x7c>)
 800175c:	4810      	ldr	r0, [pc, #64]	; (80017a0 <HAL_UART_RxCpltCallback+0x80>)
 800175e:	f000 ff21 	bl	80025a4 <Queue_PushRear>
 8001762:	e005      	b.n	8001770 <HAL_UART_RxCpltCallback+0x50>
		}
		else
		{
			rxDataIndex ++;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_UART_RxCpltCallback+0x70>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_UART_RxCpltCallback+0x70>)
 800176e:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataIndex], 1);
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_UART_RxCpltCallback+0x70>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_UART_RxCpltCallback+0x74>)
 8001778:	4413      	add	r3, r2
 800177a:	2201      	movs	r2, #1
 800177c:	4619      	mov	r1, r3
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <HAL_UART_RxCpltCallback+0x6c>)
 8001780:	f003 fa01 	bl	8004b86 <HAL_UART_Receive_IT>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000320 	.word	0x20000320
 8001790:	200003c8 	.word	0x200003c8
 8001794:	200003b4 	.word	0x200003b4
 8001798:	200003c9 	.word	0x200003c9
 800179c:	08001a19 	.word	0x08001a19
 80017a0:	200003cc 	.word	0x200003cc

080017a4 <HAL_TIM_PeriodElapsedCallback>:

/* Timer callback for task events */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	/* Task event for dht measuring */
	if(htim == &htim2){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d107      	bne.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x20>
		Queue_PushRear(&TaskQueue, Task_Dht_handler);
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017b8:	f000 fef4 	bl	80025a4 <Queue_PushRear>
		Queue_PushRear(&TaskQueue, Task_Display_handler);
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017c0:	f000 fef0 	bl	80025a4 <Queue_PushRear>
	}
	/* Task event for distance measuring */
	if(htim == &htim3){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d107      	bne.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x38>
		Queue_PushRear(&TaskQueue, Task_Dist_handler);
 80017cc:	490a      	ldr	r1, [pc, #40]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017d0:	f000 fee8 	bl	80025a4 <Queue_PushRear>
		Queue_PushRear(&TaskQueue, Task_Display_handler);
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017d8:	f000 fee4 	bl	80025a4 <Queue_PushRear>
	}
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000248 	.word	0x20000248
 80017e8:	080017fd 	.word	0x080017fd
 80017ec:	200003cc 	.word	0x200003cc
 80017f0:	08001855 	.word	0x08001855
 80017f4:	20000290 	.word	0x20000290
 80017f8:	08001835 	.word	0x08001835

080017fc <Task_Dht_handler>:

/* Queue Task Handler */
void Task_Dht_handler(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
//	printf("TASK_DHT_MEASUREMENT IN: %ld\r\n", uwTick);
	dhtStatus = DHT11_GetData(&dht);
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <Task_Dht_handler+0x28>)
 8001802:	f7ff fd1d 	bl	8001240 <DHT11_GetData>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <Task_Dht_handler+0x2c>)
 800180c:	701a      	strb	r2, [r3, #0]
	dhtHumid = dht.Humi;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <Task_Dht_handler+0x28>)
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	4a06      	ldr	r2, [pc, #24]	; (800182c <Task_Dht_handler+0x30>)
 8001814:	6013      	str	r3, [r2, #0]
	dhtTemp = dht.Temp;
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <Task_Dht_handler+0x28>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <Task_Dht_handler+0x34>)
 800181c:	6013      	str	r3, [r2, #0]
//	printf("TASK_DHT_MEASUREMENT OUT: %ld\r\n", uwTick);
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000368 	.word	0x20000368
 8001828:	2000039c 	.word	0x2000039c
 800182c:	20000564 	.word	0x20000564
 8001830:	20000560 	.word	0x20000560

08001834 <Task_Dist_handler>:

void Task_Dist_handler(){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
//	printf("TASK_DIST_MEASUREMENT IN: %ld\r\n", uwTick);
	SRF05_Read(&hrf05);
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <Task_Dist_handler+0x18>)
 800183a:	f7ff fdb5 	bl	80013a8 <SRF05_Read>
	distance = hrf05.Distance;
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <Task_Dist_handler+0x18>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	4a03      	ldr	r2, [pc, #12]	; (8001850 <Task_Dist_handler+0x1c>)
 8001844:	6013      	str	r3, [r2, #0]
//	printf("TASK_DIST_MEASUREMENT OUT: %ld\r\n", uwTick);
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000388 	.word	0x20000388
 8001850:	20000568 	.word	0x20000568

08001854 <Task_Display_handler>:

void Task_Display_handler(){
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af02      	add	r7, sp, #8
//	printf("TASK_DISPLAY_MEASUREMENT IN: %ld\r\n", uwTick);
	LCD_Clear(&lcd);
 800185a:	4862      	ldr	r0, [pc, #392]	; (80019e4 <Task_Display_handler+0x190>)
 800185c:	f7ff fef8 	bl	8001650 <LCD_Clear>
	switch (DisplayMode){
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <Task_Display_handler+0x194>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b03      	cmp	r3, #3
 8001866:	f200 80ba 	bhi.w	80019de <Task_Display_handler+0x18a>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <Task_Display_handler+0x1c>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	080018fd 	.word	0x080018fd
 8001878:	080018bf 	.word	0x080018bf
 800187c:	0800193b 	.word	0x0800193b
	case DISPLAY_DISTANCE:
		sprintf(temp, "D: %.2f", distance);
 8001880:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <Task_Display_handler+0x198>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe77 	bl	8000578 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4958      	ldr	r1, [pc, #352]	; (80019f0 <Task_Display_handler+0x19c>)
 8001890:	4858      	ldr	r0, [pc, #352]	; (80019f4 <Task_Display_handler+0x1a0>)
 8001892:	f004 ff19 	bl	80066c8 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	4852      	ldr	r0, [pc, #328]	; (80019e4 <Task_Display_handler+0x190>)
 800189c:	f7ff fee8 	bl	8001670 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 80018a0:	4954      	ldr	r1, [pc, #336]	; (80019f4 <Task_Display_handler+0x1a0>)
 80018a2:	4850      	ldr	r0, [pc, #320]	; (80019e4 <Task_Display_handler+0x190>)
 80018a4:	f7ff febd 	bl	8001622 <LCD_WriteString>
		printf("Distance: %.2f\r\n", distance);
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <Task_Display_handler+0x198>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe63 	bl	8000578 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4850      	ldr	r0, [pc, #320]	; (80019f8 <Task_Display_handler+0x1a4>)
 80018b8:	f004 fe98 	bl	80065ec <iprintf>
		break;
 80018bc:	e08f      	b.n	80019de <Task_Display_handler+0x18a>
	case DISPLAY_HUMI:
		sprintf(temp, "H: %.2f", dhtHumid);
 80018be:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <Task_Display_handler+0x1a8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe58 	bl	8000578 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	494c      	ldr	r1, [pc, #304]	; (8001a00 <Task_Display_handler+0x1ac>)
 80018ce:	4849      	ldr	r0, [pc, #292]	; (80019f4 <Task_Display_handler+0x1a0>)
 80018d0:	f004 fefa 	bl	80066c8 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	4842      	ldr	r0, [pc, #264]	; (80019e4 <Task_Display_handler+0x190>)
 80018da:	f7ff fec9 	bl	8001670 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 80018de:	4945      	ldr	r1, [pc, #276]	; (80019f4 <Task_Display_handler+0x1a0>)
 80018e0:	4840      	ldr	r0, [pc, #256]	; (80019e4 <Task_Display_handler+0x190>)
 80018e2:	f7ff fe9e 	bl	8001622 <LCD_WriteString>
		printf("Humidity: %.2f\r\n", dhtHumid);
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <Task_Display_handler+0x1a8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe44 	bl	8000578 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4843      	ldr	r0, [pc, #268]	; (8001a04 <Task_Display_handler+0x1b0>)
 80018f6:	f004 fe79 	bl	80065ec <iprintf>
		break;
 80018fa:	e070      	b.n	80019de <Task_Display_handler+0x18a>
	case DISPLAY_TEMP:
		sprintf(temp, "T: %.2f", dhtTemp);
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <Task_Display_handler+0x1b4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe39 	bl	8000578 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4940      	ldr	r1, [pc, #256]	; (8001a0c <Task_Display_handler+0x1b8>)
 800190c:	4839      	ldr	r0, [pc, #228]	; (80019f4 <Task_Display_handler+0x1a0>)
 800190e:	f004 fedb 	bl	80066c8 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	4833      	ldr	r0, [pc, #204]	; (80019e4 <Task_Display_handler+0x190>)
 8001918:	f7ff feaa 	bl	8001670 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <Task_Display_handler+0x1a0>)
 800191e:	4831      	ldr	r0, [pc, #196]	; (80019e4 <Task_Display_handler+0x190>)
 8001920:	f7ff fe7f 	bl	8001622 <LCD_WriteString>
		printf("Temperature: %.2f\r\n", dhtTemp);
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <Task_Display_handler+0x1b4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe25 	bl	8000578 <__aeabi_f2d>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4837      	ldr	r0, [pc, #220]	; (8001a10 <Task_Display_handler+0x1bc>)
 8001934:	f004 fe5a 	bl	80065ec <iprintf>
		break;
 8001938:	e051      	b.n	80019de <Task_Display_handler+0x18a>
	case DISPLAY_ALL:
		sprintf(temp, "T: %.2f D: %.2f", dhtTemp, distance);
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <Task_Display_handler+0x1b4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe1a 	bl	8000578 <__aeabi_f2d>
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <Task_Display_handler+0x198>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe13 	bl	8000578 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9cd 2300 	strd	r2, r3, [sp]
 800195a:	4622      	mov	r2, r4
 800195c:	462b      	mov	r3, r5
 800195e:	492d      	ldr	r1, [pc, #180]	; (8001a14 <Task_Display_handler+0x1c0>)
 8001960:	4824      	ldr	r0, [pc, #144]	; (80019f4 <Task_Display_handler+0x1a0>)
 8001962:	f004 feb1 	bl	80066c8 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	481e      	ldr	r0, [pc, #120]	; (80019e4 <Task_Display_handler+0x190>)
 800196c:	f7ff fe80 	bl	8001670 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001970:	4920      	ldr	r1, [pc, #128]	; (80019f4 <Task_Display_handler+0x1a0>)
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <Task_Display_handler+0x190>)
 8001974:	f7ff fe55 	bl	8001622 <LCD_WriteString>
		sprintf(temp, "H: %.2f", dhtHumid);
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <Task_Display_handler+0x1a8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdfb 	bl	8000578 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	491e      	ldr	r1, [pc, #120]	; (8001a00 <Task_Display_handler+0x1ac>)
 8001988:	481a      	ldr	r0, [pc, #104]	; (80019f4 <Task_Display_handler+0x1a0>)
 800198a:	f004 fe9d 	bl	80066c8 <siprintf>
		LCD_SetCursor(&lcd, 0, 1);
 800198e:	2201      	movs	r2, #1
 8001990:	2100      	movs	r1, #0
 8001992:	4814      	ldr	r0, [pc, #80]	; (80019e4 <Task_Display_handler+0x190>)
 8001994:	f7ff fe6c 	bl	8001670 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001998:	4916      	ldr	r1, [pc, #88]	; (80019f4 <Task_Display_handler+0x1a0>)
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <Task_Display_handler+0x190>)
 800199c:	f7ff fe41 	bl	8001622 <LCD_WriteString>
		printf("Distance: %.2f\r\n", distance);
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <Task_Display_handler+0x198>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fde7 	bl	8000578 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <Task_Display_handler+0x1a4>)
 80019b0:	f004 fe1c 	bl	80065ec <iprintf>
		printf("Humidity: %.2f\r\n", dhtHumid);
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <Task_Display_handler+0x1a8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fddd 	bl	8000578 <__aeabi_f2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <Task_Display_handler+0x1b0>)
 80019c4:	f004 fe12 	bl	80065ec <iprintf>
		printf("Temperature: %.2f\r\n", dhtTemp);
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <Task_Display_handler+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdd3 	bl	8000578 <__aeabi_f2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <Task_Display_handler+0x1bc>)
 80019d8:	f004 fe08 	bl	80065ec <iprintf>
		break;
 80019dc:	bf00      	nop
	}
//	printf("TASK_DISPLAY_MEASUREMENT OUT: %ld\r\n", uwTick);
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}
 80019e4:	2000037c 	.word	0x2000037c
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000568 	.word	0x20000568
 80019f0:	08008a58 	.word	0x08008a58
 80019f4:	200003a0 	.word	0x200003a0
 80019f8:	08008a60 	.word	0x08008a60
 80019fc:	20000564 	.word	0x20000564
 8001a00:	08008a74 	.word	0x08008a74
 8001a04:	08008a7c 	.word	0x08008a7c
 8001a08:	20000560 	.word	0x20000560
 8001a0c:	08008a90 	.word	0x08008a90
 8001a10:	08008a98 	.word	0x08008a98
 8001a14:	08008aac 	.word	0x08008aac

08001a18 <Task_Uart_Handler>:

void Task_Uart_Handler(){
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
	 * timetemp
	 * timehumi
	 * timedist
	 */

	char *command = strtok((char*)rxData, " ");
 8001a1e:	4951      	ldr	r1, [pc, #324]	; (8001b64 <Task_Uart_Handler+0x14c>)
 8001a20:	4851      	ldr	r0, [pc, #324]	; (8001b68 <Task_Uart_Handler+0x150>)
 8001a22:	f004 ff51 	bl	80068c8 <strtok>
 8001a26:	60f8      	str	r0, [r7, #12]
	char *time = strtok(NULL, " ");
 8001a28:	494e      	ldr	r1, [pc, #312]	; (8001b64 <Task_Uart_Handler+0x14c>)
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f004 ff4c 	bl	80068c8 <strtok>
 8001a30:	60b8      	str	r0, [r7, #8]
	if (NULL == time){
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d13b      	bne.n	8001ab0 <Task_Uart_Handler+0x98>
		if (strcmp((const char*)rxData, "displaytemp") == 0)
 8001a38:	494c      	ldr	r1, [pc, #304]	; (8001b6c <Task_Uart_Handler+0x154>)
 8001a3a:	484b      	ldr	r0, [pc, #300]	; (8001b68 <Task_Uart_Handler+0x150>)
 8001a3c:	f7fe fbd0 	bl	80001e0 <strcmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <Task_Uart_Handler+0x3c>
		{
			DisplayMode = DISPLAY_TEMP;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <Task_Uart_Handler+0x158>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
			printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 8001a4c:	4849      	ldr	r0, [pc, #292]	; (8001b74 <Task_Uart_Handler+0x15c>)
 8001a4e:	f004 fe33 	bl	80066b8 <puts>
		{
			printf("Error Command Syntax\r\n\n");
		}
	}
//	printf("UART Handler OUT: %ld\r\n", uwTick);
}
 8001a52:	e083      	b.n	8001b5c <Task_Uart_Handler+0x144>
		else if (strcmp((const char*)rxData, "displayhumi") == 0)
 8001a54:	4948      	ldr	r1, [pc, #288]	; (8001b78 <Task_Uart_Handler+0x160>)
 8001a56:	4844      	ldr	r0, [pc, #272]	; (8001b68 <Task_Uart_Handler+0x150>)
 8001a58:	f7fe fbc2 	bl	80001e0 <strcmp>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <Task_Uart_Handler+0x58>
			DisplayMode = DISPLAY_HUMI;
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <Task_Uart_Handler+0x158>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
			printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 8001a68:	4844      	ldr	r0, [pc, #272]	; (8001b7c <Task_Uart_Handler+0x164>)
 8001a6a:	f004 fe25 	bl	80066b8 <puts>
}
 8001a6e:	e075      	b.n	8001b5c <Task_Uart_Handler+0x144>
		else if (strcmp((const char*)rxData, "displaydist") == 0)
 8001a70:	4943      	ldr	r1, [pc, #268]	; (8001b80 <Task_Uart_Handler+0x168>)
 8001a72:	483d      	ldr	r0, [pc, #244]	; (8001b68 <Task_Uart_Handler+0x150>)
 8001a74:	f7fe fbb4 	bl	80001e0 <strcmp>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <Task_Uart_Handler+0x74>
			DisplayMode = DISPLAY_DISTANCE;
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <Task_Uart_Handler+0x158>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
			printf("Change Display Mode to DISPLAY_DIST\r\n\n");
 8001a84:	483f      	ldr	r0, [pc, #252]	; (8001b84 <Task_Uart_Handler+0x16c>)
 8001a86:	f004 fe17 	bl	80066b8 <puts>
}
 8001a8a:	e067      	b.n	8001b5c <Task_Uart_Handler+0x144>
		else if (strcmp((const char*)rxData, "displayboth") == 0)
 8001a8c:	493e      	ldr	r1, [pc, #248]	; (8001b88 <Task_Uart_Handler+0x170>)
 8001a8e:	4836      	ldr	r0, [pc, #216]	; (8001b68 <Task_Uart_Handler+0x150>)
 8001a90:	f7fe fba6 	bl	80001e0 <strcmp>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <Task_Uart_Handler+0x90>
			DisplayMode = DISPLAY_ALL;
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <Task_Uart_Handler+0x158>)
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	701a      	strb	r2, [r3, #0]
			printf("Change Display Mode to DISPLAY_ALL\r\n\n");
 8001aa0:	483a      	ldr	r0, [pc, #232]	; (8001b8c <Task_Uart_Handler+0x174>)
 8001aa2:	f004 fe09 	bl	80066b8 <puts>
}
 8001aa6:	e059      	b.n	8001b5c <Task_Uart_Handler+0x144>
			printf("Error Command Syntax\r\n\n");
 8001aa8:	4839      	ldr	r0, [pc, #228]	; (8001b90 <Task_Uart_Handler+0x178>)
 8001aaa:	f004 fe05 	bl	80066b8 <puts>
}
 8001aae:	e055      	b.n	8001b5c <Task_Uart_Handler+0x144>
		uint32_t pTime = atoi(time);
 8001ab0:	68b8      	ldr	r0, [r7, #8]
 8001ab2:	f003 ffe3 	bl	8005a7c <atoi>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	607b      	str	r3, [r7, #4]
		if (strcmp((const char*)command, "timedht1") == 0)
 8001aba:	4936      	ldr	r1, [pc, #216]	; (8001b94 <Task_Uart_Handler+0x17c>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7fe fb8f 	bl	80001e0 <strcmp>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11f      	bne.n	8001b08 <Task_Uart_Handler+0xf0>
			htim2.Instance->ARR = pTime/TICK_LENGTH_MS - 1 ;
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fd33 	bl	8000534 <__aeabi_ui2d>
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <Task_Uart_Handler+0x180>)
 8001ad4:	f7fe fed2 	bl	800087c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <Task_Uart_Handler+0x184>)
 8001ae6:	f7fe fbe7 	bl	80002b8 <__aeabi_dsub>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	492c      	ldr	r1, [pc, #176]	; (8001ba0 <Task_Uart_Handler+0x188>)
 8001af0:	680c      	ldr	r4, [r1, #0]
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f86f 	bl	8000bd8 <__aeabi_d2uiz>
 8001afa:	4603      	mov	r3, r0
 8001afc:	62e3      	str	r3, [r4, #44]	; 0x2c
			printf("Change period of temp time to %ld\r\n", pTime);
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <Task_Uart_Handler+0x18c>)
 8001b02:	f004 fd73 	bl	80065ec <iprintf>
}
 8001b06:	e029      	b.n	8001b5c <Task_Uart_Handler+0x144>
		else if (strcmp((const char*)command, "timedist") == 0)
 8001b08:	4927      	ldr	r1, [pc, #156]	; (8001ba8 <Task_Uart_Handler+0x190>)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7fe fb68 	bl	80001e0 <strcmp>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11f      	bne.n	8001b56 <Task_Uart_Handler+0x13e>
			htim3.Instance->ARR = pTime/TICK_LENGTH_MS - 1;
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fd0c 	bl	8000534 <__aeabi_ui2d>
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <Task_Uart_Handler+0x180>)
 8001b22:	f7fe feab 	bl	800087c <__aeabi_ddiv>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <Task_Uart_Handler+0x184>)
 8001b34:	f7fe fbc0 	bl	80002b8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	491b      	ldr	r1, [pc, #108]	; (8001bac <Task_Uart_Handler+0x194>)
 8001b3e:	680c      	ldr	r4, [r1, #0]
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff f848 	bl	8000bd8 <__aeabi_d2uiz>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
			printf("Change period of dist time to %ld\r\n", pTime);
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <Task_Uart_Handler+0x198>)
 8001b50:	f004 fd4c 	bl	80065ec <iprintf>
}
 8001b54:	e002      	b.n	8001b5c <Task_Uart_Handler+0x144>
			printf("Error Command Syntax\r\n\n");
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <Task_Uart_Handler+0x178>)
 8001b58:	f004 fdae 	bl	80066b8 <puts>
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	08008abc 	.word	0x08008abc
 8001b68:	200003b4 	.word	0x200003b4
 8001b6c:	08008ac0 	.word	0x08008ac0
 8001b70:	20000000 	.word	0x20000000
 8001b74:	08008acc 	.word	0x08008acc
 8001b78:	08008af4 	.word	0x08008af4
 8001b7c:	08008b00 	.word	0x08008b00
 8001b80:	08008b28 	.word	0x08008b28
 8001b84:	08008b34 	.word	0x08008b34
 8001b88:	08008b5c 	.word	0x08008b5c
 8001b8c:	08008b68 	.word	0x08008b68
 8001b90:	08008b90 	.word	0x08008b90
 8001b94:	08008ba8 	.word	0x08008ba8
 8001b98:	3fe00000 	.word	0x3fe00000
 8001b9c:	3ff00000 	.word	0x3ff00000
 8001ba0:	20000248 	.word	0x20000248
 8001ba4:	08008bb4 	.word	0x08008bb4
 8001ba8:	08008bd8 	.word	0x08008bd8
 8001bac:	20000290 	.word	0x20000290
 8001bb0:	08008be4 	.word	0x08008be4

08001bb4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bba:	f000 fd8f 	bl	80026dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bbe:	f000 f863 	bl	8001c88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bc2:	f000 fa0d 	bl	8001fe0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8001bc6:	f000 f8c9 	bl	8001d5c <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8001bca:	f000 f9df 	bl	8001f8c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8001bce:	f000 f941 	bl	8001e54 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001bd2:	f000 f98d 	bl	8001ef0 <MX_TIM4_Init>
	MX_TIM2_Init();
 8001bd6:	f000 f8ef 	bl	8001db8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	DHT11_Init(&dht, DHT_GPIO_Port, DHT_Pin, &htim4);
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <main+0x9c>)
 8001bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be0:	491c      	ldr	r1, [pc, #112]	; (8001c54 <main+0xa0>)
 8001be2:	481d      	ldr	r0, [pc, #116]	; (8001c58 <main+0xa4>)
 8001be4:	f7ff fb0c 	bl	8001200 <DHT11_Init>
	LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 8001be8:	2304      	movs	r3, #4
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2314      	movs	r3, #20
 8001bee:	224e      	movs	r2, #78	; 0x4e
 8001bf0:	491a      	ldr	r1, [pc, #104]	; (8001c5c <main+0xa8>)
 8001bf2:	481b      	ldr	r0, [pc, #108]	; (8001c60 <main+0xac>)
 8001bf4:	f7ff fc95 	bl	8001522 <LCD_Init>
	SRF05_Init(&hrf05, ECHO_GPIO_Port, ECHO_Pin, TRIG_GPIO_Port, TRIG_Pin);
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <main+0xb0>)
 8001bfe:	2210      	movs	r2, #16
 8001c00:	4918      	ldr	r1, [pc, #96]	; (8001c64 <main+0xb0>)
 8001c02:	4819      	ldr	r0, [pc, #100]	; (8001c68 <main+0xb4>)
 8001c04:	f7ff fba2 	bl	800134c <SRF05_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataIndex], 1);
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <main+0xb8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <main+0xbc>)
 8001c10:	4413      	add	r3, r2
 8001c12:	2201      	movs	r2, #1
 8001c14:	4619      	mov	r1, r3
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <main+0xc0>)
 8001c18:	f002 ffb5 	bl	8004b86 <HAL_UART_Receive_IT>
	Queue_Init(&TaskQueue, 20);
 8001c1c:	2114      	movs	r1, #20
 8001c1e:	4816      	ldr	r0, [pc, #88]	; (8001c78 <main+0xc4>)
 8001c20:	f000 fca2 	bl	8002568 <Queue_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001c24:	4815      	ldr	r0, [pc, #84]	; (8001c7c <main+0xc8>)
 8001c26:	f002 fae9 	bl	80041fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001c2a:	4815      	ldr	r0, [pc, #84]	; (8001c80 <main+0xcc>)
 8001c2c:	f002 fae6 	bl	80041fc <HAL_TIM_Base_Start_IT>
	printf("Start\r\n");
 8001c30:	4814      	ldr	r0, [pc, #80]	; (8001c84 <main+0xd0>)
 8001c32:	f004 fd41 	bl	80066b8 <puts>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		while(TaskQueue.Size != 0){
 8001c36:	e005      	b.n	8001c44 <main+0x90>
			pTaskFunction taskHander = Queue_Pop(&TaskQueue);
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <main+0xc4>)
 8001c3a:	f000 fce0 	bl	80025fe <Queue_Pop>
 8001c3e:	6078      	str	r0, [r7, #4]
			taskHander();
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4798      	blx	r3
		while(TaskQueue.Size != 0){
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <main+0xc4>)
 8001c46:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f4      	bne.n	8001c38 <main+0x84>
 8001c4e:	e7f9      	b.n	8001c44 <main+0x90>
 8001c50:	200002d8 	.word	0x200002d8
 8001c54:	40020400 	.word	0x40020400
 8001c58:	20000368 	.word	0x20000368
 8001c5c:	200001f4 	.word	0x200001f4
 8001c60:	2000037c 	.word	0x2000037c
 8001c64:	40020000 	.word	0x40020000
 8001c68:	20000388 	.word	0x20000388
 8001c6c:	200003c8 	.word	0x200003c8
 8001c70:	200003b4 	.word	0x200003b4
 8001c74:	20000320 	.word	0x20000320
 8001c78:	200003cc 	.word	0x200003cc
 8001c7c:	20000248 	.word	0x20000248
 8001c80:	20000290 	.word	0x20000290
 8001c84:	08008c08 	.word	0x08008c08

08001c88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b094      	sub	sp, #80	; 0x50
 8001c8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2230      	movs	r2, #48	; 0x30
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fe0e 	bl	80068b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <SystemClock_Config+0xcc>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <SystemClock_Config+0xcc>)
 8001cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cba:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <SystemClock_Config+0xcc>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <SystemClock_Config+0xd0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <SystemClock_Config+0xd0>)
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <SystemClock_Config+0xd0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cec:	2301      	movs	r3, #1
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001d00:	2354      	movs	r3, #84	; 0x54
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fd71 	bl	80037f8 <HAL_RCC_OscConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001d1c:	f000 f9d4 	bl	80020c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d20:	230f      	movs	r3, #15
 8001d22:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 ffd3 	bl	8003ce8 <HAL_RCC_ClockConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001d48:	f000 f9be 	bl	80020c8 <Error_Handler>
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	3750      	adds	r7, #80	; 0x50
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000

08001d5c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <MX_I2C2_Init+0x54>)
 8001d64:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_I2C2_Init+0x58>)
 8001d6a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_I2C2_Init+0x50>)
 8001d9a:	f001 f88f 	bl	8002ebc <HAL_I2C_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001da4:	f000 f990 	bl	80020c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200001f4 	.word	0x200001f4
 8001db0:	40005800 	.word	0x40005800
 8001db4:	000186a0 	.word	0x000186a0

08001db8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dda:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 41999;
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001dde:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001de2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2999;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001dec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001df0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dfe:	4814      	ldr	r0, [pc, #80]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001e00:	f002 f952 	bl	80040a8 <HAL_TIM_Base_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001e0a:	f000 f95d 	bl	80020c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001e1c:	f002 fb40 	bl	80044a0 <HAL_TIM_ConfigClockSource>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8001e26:	f000 f94f 	bl	80020c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM2_Init+0x98>)
 8001e38:	f002 fd48 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001e42:	f000 f941 	bl	80020c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000248 	.word	0x20000248

08001e54 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <MX_TIM3_Init+0x98>)
 8001e74:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 41999;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e78:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001e7c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2999;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e86:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e8a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e98:	4813      	ldr	r0, [pc, #76]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e9a:	f002 f905 	bl	80040a8 <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8001ea4:	f000 f910 	bl	80020c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001eb6:	f002 faf3 	bl	80044a0 <HAL_TIM_ConfigClockSource>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8001ec0:	f000 f902 	bl	80020c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001ed2:	f002 fcfb 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8001edc:	f000 f8f4 	bl	80020c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000290 	.word	0x20000290
 8001eec:	40000400 	.word	0x40000400

08001ef0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <MX_TIM4_Init+0x98>)
 8001f10:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 83;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f14:	2253      	movs	r2, #83	; 0x53
 8001f16:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f24:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f32:	4814      	ldr	r0, [pc, #80]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f34:	f002 f8b8 	bl	80040a8 <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8001f3e:	f000 f8c3 	bl	80020c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f50:	f002 faa6 	bl	80044a0 <HAL_TIM_ConfigClockSource>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8001f5a:	f000 f8b5 	bl	80020c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f66:	463b      	mov	r3, r7
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <MX_TIM4_Init+0x94>)
 8001f6c:	f002 fcae 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8001f76:	f000 f8a7 	bl	80020c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002d8 	.word	0x200002d8
 8001f88:	40000800 	.word	0x40000800

08001f8c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_USART2_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f002 fd04 	bl	80049d0 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001fce:	f000 f87b 	bl	80020c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000320 	.word	0x20000320
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <MX_GPIO_Init+0xdc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a28      	ldr	r2, [pc, #160]	; (80020bc <MX_GPIO_Init+0xdc>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <MX_GPIO_Init+0xdc>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2102      	movs	r1, #2
 800204e:	481c      	ldr	r0, [pc, #112]	; (80020c0 <MX_GPIO_Init+0xe0>)
 8002050:	f000 ff1a 	bl	8002e88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800205a:	481a      	ldr	r0, [pc, #104]	; (80020c4 <MX_GPIO_Init+0xe4>)
 800205c:	f000 ff14 	bl	8002e88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TRIG_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin;
 8002060:	2302      	movs	r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4619      	mov	r1, r3
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <MX_GPIO_Init+0xe0>)
 8002078:	f000 fd6a 	bl	8002b50 <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO_Pin */
	GPIO_InitStruct.Pin = ECHO_Pin;
 800207c:	2310      	movs	r3, #16
 800207e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MX_GPIO_Init+0xe0>)
 8002090:	f000 fd5e 	bl	8002b50 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT_Pin */
	GPIO_InitStruct.Pin = DHT_Pin;
 8002094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002098:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_GPIO_Init+0xe4>)
 80020ae:	f000 fd4f 	bl	8002b50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80020b2:	bf00      	nop
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400

080020c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
}
 80020ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020d0:	e7fe      	b.n	80020d0 <Error_Handler+0x8>
	...

080020d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_MspInit+0x4c>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_MspInit+0x4c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_I2C_MspInit+0xa4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d13c      	bne.n	80021c0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_I2C_MspInit+0xa8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_I2C_MspInit+0xa8>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_I2C_MspInit+0xa8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002168:	2312      	movs	r3, #18
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002174:	2304      	movs	r3, #4
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4814      	ldr	r0, [pc, #80]	; (80021d0 <HAL_I2C_MspInit+0xac>)
 8002180:	f000 fce6 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002184:	2308      	movs	r3, #8
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002188:	2312      	movs	r3, #18
 800218a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002194:	2309      	movs	r3, #9
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <HAL_I2C_MspInit+0xac>)
 80021a0:	f000 fcd6 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_I2C_MspInit+0xa8>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_I2C_MspInit+0xa8>)
 80021ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_I2C_MspInit+0xa8>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40005800 	.word	0x40005800
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020400 	.word	0x40020400

080021d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d116      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a23      	ldr	r2, [pc, #140]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2101      	movs	r1, #1
 8002206:	201c      	movs	r0, #28
 8002208:	f000 fbd9 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800220c:	201c      	movs	r0, #28
 800220e:	f000 fbf2 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002212:	e02e      	b.n	8002272 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_TIM_Base_MspInit+0xac>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d116      	bne.n	800224c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2101      	movs	r1, #1
 800223e:	201d      	movs	r0, #29
 8002240:	f000 fbbd 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002244:	201d      	movs	r0, #29
 8002246:	f000 fbd6 	bl	80029f6 <HAL_NVIC_EnableIRQ>
}
 800224a:	e012      	b.n	8002272 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_TIM_Base_MspInit+0xb0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_TIM_Base_MspInit+0xa8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800

08002288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_UART_MspInit+0x94>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d133      	bne.n	8002312 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_UART_MspInit+0x98>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_UART_MspInit+0x98>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_UART_MspInit+0x98>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0x98>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_UART_MspInit+0x98>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_UART_MspInit+0x98>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022e2:	230c      	movs	r3, #12
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f2:	2307      	movs	r3, #7
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <HAL_UART_MspInit+0x9c>)
 80022fe:	f000 fc27 	bl	8002b50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2101      	movs	r1, #1
 8002306:	2026      	movs	r0, #38	; 0x26
 8002308:	f000 fb59 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800230c:	2026      	movs	r0, #38	; 0x26
 800230e:	f000 fb72 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004400 	.word	0x40004400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 fa04 	bl	8002780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM2_IRQHandler+0x10>)
 8002382:	f001 ff9d 	bl	80042c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000248 	.word	0x20000248

08002390 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM3_IRQHandler+0x10>)
 8002396:	f001 ff93 	bl	80042c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000290 	.word	0x20000290

080023a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <USART2_IRQHandler+0x10>)
 80023aa:	f002 fc11 	bl	8004bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000320 	.word	0x20000320

080023b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_kill>:

int _kill(int pid, int sig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023d2:	f004 fb1f 	bl	8006a14 <__errno>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2216      	movs	r2, #22
 80023da:	601a      	str	r2, [r3, #0]
  return -1;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_exit>:

void _exit (int status)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ffe7 	bl	80023c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023fa:	e7fe      	b.n	80023fa <_exit+0x12>

080023fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e00a      	b.n	8002424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800240e:	f3af 8000 	nop.w
 8002412:	4601      	mov	r1, r0
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	dbf0      	blt.n	800240e <_read+0x12>
  }

  return len;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e009      	b.n	800245c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f953 	bl	80016fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbf1      	blt.n	8002448 <_write+0x12>
  }
  return len;
 8002464:	687b      	ldr	r3, [r7, #4]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_close>:

int _close(int file)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	605a      	str	r2, [r3, #4]
  return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_isatty>:

int _isatty(int file)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <_sbrk+0x5c>)
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <_sbrk+0x60>)
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x64>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <_sbrk+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d207      	bcs.n	8002518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002508:	f004 fa84 	bl	8006a14 <__errno>
 800250c:	4603      	mov	r3, r0
 800250e:	220c      	movs	r2, #12
 8002510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e009      	b.n	800252c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <_sbrk+0x64>)
 8002528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20018000 	.word	0x20018000
 8002538:	00000400 	.word	0x00000400
 800253c:	2000056c 	.word	0x2000056c
 8002540:	200006c0 	.word	0x200006c0

08002544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <SystemInit+0x20>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <SystemInit+0x20>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <Queue_Init>:


/* Private user code ---------------------------------------------------------*/

void Queue_Init(TaskQueue_t *queue, uint8_t capacity)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
	queue->Size = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	queue->Front = capacity - 1;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	3b01      	subs	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	queue->Rear = capacity;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	queue->Capacity = capacity;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <Queue_PushRear>:

Queue_Status Queue_PushRear(TaskQueue_t* queue, pTaskFunction pTask)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
	Queue_Status status = QUEUE_FULL;
 80025ae:	2302      	movs	r3, #2
 80025b0:	73fb      	strb	r3, [r7, #15]

	if (queue->Size < MAX_TASKS)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80025b8:	2b63      	cmp	r3, #99	; 0x63
 80025ba:	d819      	bhi.n	80025f0 <Queue_PushRear+0x4c>
	{
		(queue->Rear)--;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		queue->Task[queue->Rear] = pTask;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		(queue->Size)++;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		status = QUEUE_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <Queue_Pop>:

	return status;
}

pTaskFunction Queue_Pop(TaskQueue_t* queue)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	pTaskFunction pTask = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
	uint8_t idx;

	if (queue->Size >= 0)
	{
		pTask = queue->Task[queue->Front];
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	60bb      	str	r3, [r7, #8]
		(queue->Size)--;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8002620:	3b01      	subs	r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		(queue->Rear)++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8002630:	3301      	adds	r3, #1
 8002632:	b2da      	uxtb	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		for (idx = 0; idx < queue->Size; idx++)
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e015      	b.n	800266c <Queue_Pop+0x6e>
		{
			queue->Task[queue->Front - idx] = queue->Task[queue->Front - idx - 1];
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8002646:	461a      	mov	r2, r3
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	1e59      	subs	r1, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8002654:	461a      	mov	r2, r3
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	1ad2      	subs	r2, r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < queue->Size; idx++)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	3301      	adds	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	429a      	cmp	r2, r3
 8002676:	d3e3      	bcc.n	8002640 <Queue_Pop+0x42>
		}
	}

	return pTask;
 8002678:	68bb      	ldr	r3, [r7, #8]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800268c:	f7ff ff5a 	bl	8002544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002690:	480c      	ldr	r0, [pc, #48]	; (80026c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002692:	490d      	ldr	r1, [pc, #52]	; (80026c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800269c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a8:	4c0a      	ldr	r4, [pc, #40]	; (80026d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f004 f9b3 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ba:	f7ff fa7b 	bl	8001bb4 <main>
  bx  lr    
 80026be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80026cc:	08009008 	.word	0x08009008
  ldr r2, =_sbss
 80026d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80026d4:	200006c0 	.word	0x200006c0

080026d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC_IRQHandler>
	...

080026dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_Init+0x40>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_Init+0x40>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_Init+0x40>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 f94f 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270a:	200f      	movs	r0, #15
 800270c:	f000 f808 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002710:	f7ff fce0 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_InitTick+0x54>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x58>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f967 	bl	8002a12 <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00e      	b.n	800276c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d80a      	bhi.n	800276a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f000 f92f 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4a06      	ldr	r2, [pc, #24]	; (800277c <HAL_InitTick+0x5c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000004 	.word	0x20000004
 8002778:	2000000c 	.word	0x2000000c
 800277c:	20000008 	.word	0x20000008

08002780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x20>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x24>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_IncTick+0x24>)
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	20000570 	.word	0x20000570

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_GetTick+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000570 	.word	0x20000570

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff ffee 	bl	80027a8 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_Delay+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	; (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	; (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff29 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff3e 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff8e 	bl	80028fc <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff31 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff feb6 	bl	80027a8 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d008      	beq.n	8002a5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e052      	b.n	8002b02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0216 	bic.w	r2, r2, #22
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_DMA_Abort+0x62>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aac:	e013      	b.n	8002ad6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7ff fe7b 	bl	80027a8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d90c      	bls.n	8002ad6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e015      	b.n	8002b02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e4      	bne.n	8002aae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	223f      	movs	r2, #63	; 0x3f
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d004      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00c      	b.n	8002b42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e159      	b.n	8002e20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8148 	bne.w	8002e1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a2 	beq.w	8002e1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a52      	ldr	r2, [pc, #328]	; (8002e3c <HAL_GPIO_Init+0x2ec>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_GPIO_Init+0x2f0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d019      	beq.n	8002d52 <HAL_GPIO_Init+0x202>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <HAL_GPIO_Init+0x2f4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_GPIO_Init+0x1fe>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a47      	ldr	r2, [pc, #284]	; (8002e48 <HAL_GPIO_Init+0x2f8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00d      	beq.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a46      	ldr	r2, [pc, #280]	; (8002e4c <HAL_GPIO_Init+0x2fc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <HAL_GPIO_Init+0x1f6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <HAL_GPIO_Init+0x1f2>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x204>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x204>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x204>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x204>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x204>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <HAL_GPIO_Init+0x2ec>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d96:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc0:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dea:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e14:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f aea2 	bls.w	8002b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e001      	b.n	8002e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e12b      	b.n	8003126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff f91e 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f20:	f001 f89a 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	; (8003130 <HAL_I2C_Init+0x274>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d807      	bhi.n	8002f40 <HAL_I2C_Init+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a80      	ldr	r2, [pc, #512]	; (8003134 <HAL_I2C_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e006      	b.n	8002f4e <HAL_I2C_Init+0x92>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a7d      	ldr	r2, [pc, #500]	; (8003138 <HAL_I2C_Init+0x27c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a78      	ldr	r2, [pc, #480]	; (800313c <HAL_I2C_Init+0x280>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	; (8003130 <HAL_I2C_Init+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <HAL_I2C_Init+0xd4>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e009      	b.n	8002fa4 <HAL_I2C_Init+0xe8>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a69      	ldr	r2, [pc, #420]	; (8003140 <HAL_I2C_Init+0x284>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	495c      	ldr	r1, [pc, #368]	; (8003130 <HAL_I2C_Init+0x274>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d819      	bhi.n	8002ff8 <HAL_I2C_Init+0x13c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e59      	subs	r1, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Init+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	e051      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e04f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d111      	bne.n	8003024 <HAL_I2C_Init+0x168>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e012      	b.n	800304a <HAL_I2C_Init+0x18e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x196>
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <HAL_I2C_Init+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e58      	subs	r0, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	fbb0 f3f3 	udiv	r3, r0, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6809      	ldr	r1, [r1, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6911      	ldr	r1, [r2, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	003d08ff 	.word	0x003d08ff
 800313c:	431bde83 	.word	0x431bde83
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fb26 	bl	80027a8 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80e0 	bne.w	800332c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4970      	ldr	r1, [pc, #448]	; (8003338 <HAL_I2C_Master_Transmit+0x1f4>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f964 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	e0d3      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x50>
 8003190:	2302      	movs	r3, #2
 8003192:	e0cc      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2221      	movs	r2, #33	; 0x21
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2210      	movs	r2, #16
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	893a      	ldrh	r2, [r7, #8]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_I2C_Master_Transmit+0x1f8>)
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031fc:	8979      	ldrh	r1, [r7, #10]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f89c 	bl	8003340 <I2C_MasterRequestWrite>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e08d      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003228:	e066      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa22 	bl	8003678 <I2C_WaitOnTXEFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b04      	cmp	r3, #4
 8003240:	d107      	bne.n	8003252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06b      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d11b      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x188>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6a39      	ldr	r1, [r7, #32]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fa19 	bl	8003708 <I2C_WaitOnBTFFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e01a      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d194      	bne.n	800322a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000

08003340 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d006      	beq.n	800336a <I2C_MasterRequestWrite+0x2a>
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d003      	beq.n	800336a <I2C_MasterRequestWrite+0x2a>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003368:	d108      	bne.n	800337c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e00b      	b.n	8003394 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	2b12      	cmp	r3, #18
 8003382:	d107      	bne.n	8003394 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f84f 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ba:	d103      	bne.n	80033c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e035      	b.n	8003434 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d0:	d108      	bne.n	80033e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e0:	611a      	str	r2, [r3, #16]
 80033e2:	e01b      	b.n	800341c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	11db      	asrs	r3, r3, #7
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 0306 	and.w	r3, r3, #6
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f063 030f 	orn	r3, r3, #15
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <I2C_MasterRequestWrite+0xfc>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f898 	bl	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e010      	b.n	8003434 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <I2C_MasterRequestWrite+0x100>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f888 	bl	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	00010008 	.word	0x00010008
 8003440:	00010002 	.word	0x00010002

08003444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003454:	e048      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d044      	beq.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7ff f9a3 	bl	80027a8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d139      	bne.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d10d      	bne.n	800349a <I2C_WaitOnFlagUntilTimeout+0x56>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	43da      	mvns	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	e00c      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d116      	bne.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e023      	b.n	8003530 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10d      	bne.n	800350e <I2C_WaitOnFlagUntilTimeout+0xca>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	e00c      	b.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	429a      	cmp	r2, r3
 800352c:	d093      	beq.n	8003456 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003546:	e071      	b.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003556:	d123      	bne.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e067      	b.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d041      	beq.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7ff f8fe 	bl	80027a8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d136      	bne.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10c      	bne.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e00b      	b.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	43da      	mvns	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d016      	beq.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e021      	b.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10c      	bne.n	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e00b      	b.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	f47f af6d 	bne.w	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f886 	bl	8003798 <I2C_IsAcknowledgeFailed>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e034      	b.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d028      	beq.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7ff f883 	bl	80027a8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11d      	bne.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d016      	beq.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e007      	b.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d1c3      	bne.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003714:	e034      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f83e 	bl	8003798 <I2C_IsAcknowledgeFailed>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e034      	b.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d028      	beq.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7ff f83b 	bl	80027a8 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11d      	bne.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d016      	beq.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e007      	b.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d1c3      	bne.n	8003716 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d11b      	bne.n	80037e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e267      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d075      	beq.n	8003902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003816:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00c      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382a:	2b08      	cmp	r3, #8
 800382c:	d112      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382e:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4b7e      	ldr	r3, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05b      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d157      	bne.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e242      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d106      	bne.n	800386c <HAL_RCC_OscConfig+0x74>
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x98>
 8003876:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6f      	ldr	r2, [pc, #444]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 8003890:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe ff7a 	bl	80027a8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe ff76 	bl	80027a8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e207      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	4b5b      	ldr	r3, [pc, #364]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe ff66 	bl	80027a8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe ff62 	bl	80027a8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e1f3      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800390e:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003922:	2b08      	cmp	r3, #8
 8003924:	d11c      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e1c7      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4937      	ldr	r1, [pc, #220]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	e03a      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003968:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_RCC_OscConfig+0x244>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe ff1b 	bl	80027a8 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe ff17 	bl	80027a8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e1a8      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4925      	ldr	r1, [pc, #148]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e015      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x244>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fefa 	bl	80027a8 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe fef6 	bl	80027a8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e187      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d036      	beq.n	8003a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x248>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe feda 	bl	80027a8 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fe fed6 	bl	80027a8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e167      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x200>
 8003a16:	e01b      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_OscConfig+0x248>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fec3 	bl	80027a8 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	e00e      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a26:	f7fe febf 	bl	80027a8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d907      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e150      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470000 	.word	0x42470000
 8003a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ea      	bne.n	8003a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8097 	beq.w	8003b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	4b7d      	ldr	r3, [pc, #500]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d118      	bne.n	8003acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9a:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fe7f 	bl	80027a8 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aae:	f7fe fe7b 	bl	80027a8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e10c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a63      	ldr	r2, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x30c>
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a5e      	ldr	r2, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
 8003af6:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003b04:	4b58      	ldr	r3, [pc, #352]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	4b55      	ldr	r3, [pc, #340]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fe fe40 	bl	80027a8 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fe3c 	bl	80027a8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0cb      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ee      	beq.n	8003b2c <HAL_RCC_OscConfig+0x334>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b50:	f7fe fe2a 	bl	80027a8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe fe26 	bl	80027a8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0b5      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ee      	bne.n	8003b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a1 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d05c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d141      	bne.n	8003c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fdfa 	bl	80027a8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fdf6 	bl	80027a8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e087      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	019b      	lsls	r3, r3, #6
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	491b      	ldr	r1, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fe fdcf 	bl	80027a8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe fdcb 	bl	80027a8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e05c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x416>
 8003c2c:	e054      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe fdb8 	bl	80027a8 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe fdb4 	bl	80027a8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e045      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x444>
 8003c5a:	e03d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e038      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x4ec>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d121      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0cc      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d90c      	bls.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b63      	ldr	r3, [pc, #396]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0b8      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d3c:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d60:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	494d      	ldr	r1, [pc, #308]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d044      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e067      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4934      	ldr	r1, [pc, #208]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe fce6 	bl	80027a8 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe fce2 	bl	80027a8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e04f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d20c      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e032      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	490e      	ldr	r1, [pc, #56]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e6e:	f000 f821 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	490a      	ldr	r1, [pc, #40]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	5ccb      	ldrb	r3, [r1, r3]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a09      	ldr	r2, [pc, #36]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fc46 	bl	8002720 <HAL_InitTick>

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023c00 	.word	0x40023c00
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	08008c10 	.word	0x08008c10
 8003eac:	20000004 	.word	0x20000004
 8003eb0:	20000008 	.word	0x20000008

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b090      	sub	sp, #64	; 0x40
 8003eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ecc:	4b59      	ldr	r3, [pc, #356]	; (8004034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	f200 80a1 	bhi.w	8004020 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ee6:	e09b      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b53      	ldr	r3, [pc, #332]	; (8004038 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003eec:	e09b      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ef2:	e098      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b4f      	ldr	r3, [pc, #316]	; (8004034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4b4d      	ldr	r3, [pc, #308]	; (8004034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d028      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b4a      	ldr	r3, [pc, #296]	; (8004034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	2200      	movs	r2, #0
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	627a      	str	r2, [r7, #36]	; 0x24
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f20:	fb03 f201 	mul.w	r2, r3, r1
 8003f24:	2300      	movs	r3, #0
 8003f26:	fb00 f303 	mul.w	r3, r0, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a43      	ldr	r2, [pc, #268]	; (800403c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f34:	460a      	mov	r2, r1
 8003f36:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3a:	4413      	add	r3, r2
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f40:	2200      	movs	r2, #0
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	61fa      	str	r2, [r7, #28]
 8003f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f4e:	f7fc feb3 	bl	8000cb8 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4613      	mov	r3, r2
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5a:	e053      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5c:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	2200      	movs	r2, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	617a      	str	r2, [r7, #20]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f6e:	f04f 0b00 	mov.w	fp, #0
 8003f72:	4652      	mov	r2, sl
 8003f74:	465b      	mov	r3, fp
 8003f76:	f04f 0000 	mov.w	r0, #0
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	0159      	lsls	r1, r3, #5
 8003f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f84:	0150      	lsls	r0, r2, #5
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f8e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fa6:	ebb2 0408 	subs.w	r4, r2, r8
 8003faa:	eb63 0509 	sbc.w	r5, r3, r9
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	00eb      	lsls	r3, r5, #3
 8003fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fbc:	00e2      	lsls	r2, r4, #3
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	461d      	mov	r5, r3
 8003fc2:	eb14 030a 	adds.w	r3, r4, sl
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	eb45 030b 	adc.w	r3, r5, fp
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fda:	4629      	mov	r1, r5
 8003fdc:	028b      	lsls	r3, r1, #10
 8003fde:	4621      	mov	r1, r4
 8003fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	028a      	lsls	r2, r1, #10
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	60fa      	str	r2, [r7, #12]
 8003ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff8:	f7fc fe5e 	bl	8000cb8 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_GetSysClockFreq+0x180>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	3301      	adds	r3, #1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetSysClockFreq+0x184>)
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004028:	4618      	mov	r0, r3
 800402a:	3740      	adds	r7, #64	; 0x40
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400
 800403c:	017d7840 	.word	0x017d7840

08004040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_GetHCLKFreq+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000004 	.word	0x20000004

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800405c:	f7ff fff0 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	0a9b      	lsrs	r3, r3, #10
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4903      	ldr	r1, [pc, #12]	; (800407c <HAL_RCC_GetPCLK1Freq+0x24>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	08008c20 	.word	0x08008c20

08004080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004084:	f7ff ffdc 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0b5b      	lsrs	r3, r3, #13
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	08008c20 	.word	0x08008c20

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe f880 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 faca 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e03c      	b.n	80041da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_TIM_Base_Start+0xa0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_TIM_Base_Start+0x5c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d013      	beq.n	80041a4 <HAL_TIM_Base_Start+0x5c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <HAL_TIM_Base_Start+0xa4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_TIM_Base_Start+0x5c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <HAL_TIM_Base_Start+0xa8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_TIM_Base_Start+0x5c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <HAL_TIM_Base_Start+0xac>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_TIM_Base_Start+0x5c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_TIM_Base_Start+0xb0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d010      	beq.n	80041d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	e007      	b.n	80041d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40014000 	.word	0x40014000

080041fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e044      	b.n	800429e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_TIM_Base_Start_IT+0xb0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIM_Base_Start_IT+0xc0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d010      	beq.n	800429c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	e007      	b.n	800429c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40014000 	.word	0x40014000

080042c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01b      	beq.n	8004324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0202 	mvn.w	r2, #2
 80042f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f999 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f98b 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f99c 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d020      	beq.n	8004370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01b      	beq.n	8004370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0204 	mvn.w	r2, #4
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f973 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f965 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f976 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d020      	beq.n	80043bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01b      	beq.n	80043bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f94d 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f93f 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f950 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d020      	beq.n	8004408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0210 	mvn.w	r2, #16
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2208      	movs	r2, #8
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f927 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f919 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f92a 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0201 	mvn.w	r2, #1
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd f9bc 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fab6 	bl	80049bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8fb 	bl	800466a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0220 	mvn.w	r2, #32
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa88 	bl	80049a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIM_ConfigClockSource+0x1c>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0b4      	b.n	8004626 <HAL_TIM_ConfigClockSource+0x186>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f4:	d03e      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0xd4>
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fa:	f200 8087 	bhi.w	800460c <HAL_TIM_ConfigClockSource+0x16c>
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	f000 8086 	beq.w	8004612 <HAL_TIM_ConfigClockSource+0x172>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d87f      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b70      	cmp	r3, #112	; 0x70
 800450e:	d01a      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0xa6>
 8004510:	2b70      	cmp	r3, #112	; 0x70
 8004512:	d87b      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b60      	cmp	r3, #96	; 0x60
 8004516:	d050      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x11a>
 8004518:	2b60      	cmp	r3, #96	; 0x60
 800451a:	d877      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b50      	cmp	r3, #80	; 0x50
 800451e:	d03c      	beq.n	800459a <HAL_TIM_ConfigClockSource+0xfa>
 8004520:	2b50      	cmp	r3, #80	; 0x50
 8004522:	d873      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d058      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x13a>
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d86f      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b30      	cmp	r3, #48	; 0x30
 800452e:	d064      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004530:	2b30      	cmp	r3, #48	; 0x30
 8004532:	d86b      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d060      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	2b20      	cmp	r3, #32
 800453a:	d867      	bhi.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004540:	2b10      	cmp	r3, #16
 8004542:	d05a      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x15a>
 8004544:	e062      	b.n	800460c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004556:	f000 f999 	bl	800488c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	609a      	str	r2, [r3, #8]
      break;
 8004572:	e04f      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004584:	f000 f982 	bl	800488c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004596:	609a      	str	r2, [r3, #8]
      break;
 8004598:	e03c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a6:	461a      	mov	r2, r3
 80045a8:	f000 f8f6 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2150      	movs	r1, #80	; 0x50
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f94f 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80045b8:	e02c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 f915 	bl	80047f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2160      	movs	r1, #96	; 0x60
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f93f 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80045d8:	e01c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 f8d6 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2140      	movs	r1, #64	; 0x40
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f92f 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e00c      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f000 f926 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 800460a:	e003      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	e000      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3a      	ldr	r2, [pc, #232]	; (800477c <TIM_Base_SetConfig+0xfc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a37      	ldr	r2, [pc, #220]	; (8004780 <TIM_Base_SetConfig+0x100>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a36      	ldr	r2, [pc, #216]	; (8004784 <TIM_Base_SetConfig+0x104>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a35      	ldr	r2, [pc, #212]	; (8004788 <TIM_Base_SetConfig+0x108>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2b      	ldr	r2, [pc, #172]	; (800477c <TIM_Base_SetConfig+0xfc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01b      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d017      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <TIM_Base_SetConfig+0x100>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a27      	ldr	r2, [pc, #156]	; (8004784 <TIM_Base_SetConfig+0x104>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00f      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a26      	ldr	r2, [pc, #152]	; (8004788 <TIM_Base_SetConfig+0x108>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a25      	ldr	r2, [pc, #148]	; (800478c <TIM_Base_SetConfig+0x10c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <TIM_Base_SetConfig+0x110>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <TIM_Base_SetConfig+0x114>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d108      	bne.n	800471c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <TIM_Base_SetConfig+0xfc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]
  }
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800

08004798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 030a 	bic.w	r3, r3, #10
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b087      	sub	sp, #28
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0210 	bic.w	r2, r3, #16
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	031b      	lsls	r3, r3, #12
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	f043 0307 	orr.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e050      	b.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1c      	ldr	r2, [pc, #112]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d018      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d013      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00e      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10c      	bne.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	4313      	orrs	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40014000 	.word	0x40014000

080049a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e042      	b.n	8004a68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fd fc46 	bl	8002288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2224      	movs	r2, #36	; 0x24
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fdbd 	bl	8005594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d175      	bne.n	8004b7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_UART_Transmit+0x2c>
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e06e      	b.n	8004b7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2221      	movs	r2, #33	; 0x21
 8004aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aae:	f7fd fe7b 	bl	80027a8 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	88fa      	ldrh	r2, [r7, #6]
 8004ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d108      	bne.n	8004adc <HAL_UART_Transmit+0x6c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e003      	b.n	8004ae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ae4:	e02e      	b.n	8004b44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fb1f 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e03a      	b.n	8004b7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	3302      	adds	r3, #2
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e007      	b.n	8004b36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	3301      	adds	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2140      	movs	r1, #64	; 0x40
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 faeb 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e006      	b.n	8004b7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d112      	bne.n	8004bc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_UART_Receive_IT+0x26>
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e00b      	b.n	8004bc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fb12 	bl	80051e6 <UART_Start_Receive_IT>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	e000      	b.n	8004bc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
  }
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0ba      	sub	sp, #232	; 0xe8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_UART_IRQHandler+0x66>
 8004c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fbf2 	bl	8005418 <UART_Receive_IT>
      return;
 8004c34:	e25b      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80de 	beq.w	8004dfc <HAL_UART_IRQHandler+0x22c>
 8004c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80d1 	beq.w	8004dfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_UART_IRQHandler+0xae>
 8004c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	f043 0201 	orr.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xd2>
 8004c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xf6>
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x126>
 8004cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d105      	bne.n	8004cea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 81f2 	beq.w	80050e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_UART_IRQHandler+0x14e>
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fb7d 	bl	8005418 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_UART_IRQHandler+0x17a>
 8004d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04f      	beq.n	8004dea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa85 	bl	800525a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d141      	bne.n	8004de2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1d9      	bne.n	8004d5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d013      	beq.n	8004dda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	4a7e      	ldr	r2, [pc, #504]	; (8004fb0 <HAL_UART_IRQHandler+0x3e0>)
 8004db8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fea3 	bl	8002b0a <HAL_DMA_Abort_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d016      	beq.n	8004df8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00e      	b.n	8004df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f994 	bl	8005108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e00a      	b.n	8004df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f990 	bl	8005108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e006      	b.n	8004df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f98c 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004df6:	e175      	b.n	80050e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	bf00      	nop
    return;
 8004dfa:	e173      	b.n	80050e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 814f 	bne.w	80050a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8148 	beq.w	80050a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8141 	beq.w	80050a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	f040 80b6 	bne.w	8004fb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8145 	beq.w	80050e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e66:	429a      	cmp	r2, r3
 8004e68:	f080 813e 	bcs.w	80050e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	f000 8088 	beq.w	8004f92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1d9      	bne.n	8004e82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e1      	bne.n	8004ece <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3314      	adds	r3, #20
 8004f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f62:	f023 0310 	bic.w	r3, r3, #16
 8004f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f74:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e3      	bne.n	8004f50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd fd4c 	bl	8002a2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8b7 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fae:	e09b      	b.n	80050e8 <HAL_UART_IRQHandler+0x518>
 8004fb0:	08005321 	.word	0x08005321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 808e 	beq.w	80050ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8089 	beq.w	80050ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ffe:	647a      	str	r2, [r7, #68]	; 0x44
 8005000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800500c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e3      	bne.n	8004fda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	623b      	str	r3, [r7, #32]
   return(result);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005036:	633a      	str	r2, [r7, #48]	; 0x30
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800503c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e3      	bne.n	8005012 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60fb      	str	r3, [r7, #12]
   return(result);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0310 	bic.w	r3, r3, #16
 800506e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800507c:	61fa      	str	r2, [r7, #28]
 800507e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	617b      	str	r3, [r7, #20]
   return(result);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e3      	bne.n	8005058 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f83d 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a2:	e023      	b.n	80050ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_UART_IRQHandler+0x4f4>
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f943 	bl	8005348 <UART_Transmit_IT>
    return;
 80050c2:	e014      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <HAL_UART_IRQHandler+0x51e>
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f983 	bl	80053e8 <UART_EndTransmit_IT>
    return;
 80050e2:	e004      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
    return;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
      return;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <HAL_UART_IRQHandler+0x51e>
      return;
 80050ec:	bf00      	nop
  }
}
 80050ee:	37e8      	adds	r7, #232	; 0xe8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005144:	e03b      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d037      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fd fb2b 	bl	80027a8 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <UART_WaitOnFlagUntilTimeout+0x30>
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e03a      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d023      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0x8a>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d020      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0x8a>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d01d      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b08      	cmp	r3, #8
 800518e:	d116      	bne.n	80051be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f857 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2208      	movs	r2, #8
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e00f      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4013      	ands	r3, r2
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	bf0c      	ite	eq
 80051ce:	2301      	moveq	r3, #1
 80051d0:	2300      	movne	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d0b4      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2222      	movs	r2, #34	; 0x22
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0220 	orr.w	r2, r2, #32
 800524a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800525a:	b480      	push	{r7}
 800525c:	b095      	sub	sp, #84	; 0x54
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005282:	643a      	str	r2, [r7, #64]	; 0x40
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e5      	bne.n	8005262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d119      	bne.n	8005306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052f2:	61ba      	str	r2, [r7, #24]
 80052f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6979      	ldr	r1, [r7, #20]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005314:	bf00      	nop
 8005316:	3754      	adds	r7, #84	; 0x54
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fee4 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b21      	cmp	r3, #33	; 0x21
 800535a:	d13e      	bne.n	80053da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d114      	bne.n	8005390 <UART_Transmit_IT+0x48>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d110      	bne.n	8005390 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]
 800538e:	e008      	b.n	80053a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6211      	str	r1, [r2, #32]
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e000      	b.n	80053dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fe73 	bl	80050f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b22      	cmp	r3, #34	; 0x22
 800542a:	f040 80ae 	bne.w	800558a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d117      	bne.n	8005468 <UART_Receive_IT+0x50>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d113      	bne.n	8005468 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	b29a      	uxth	r2, r3
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	1c9a      	adds	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
 8005466:	e026      	b.n	80054b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547a:	d007      	beq.n	800548c <UART_Receive_IT+0x74>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <UART_Receive_IT+0x82>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e008      	b.n	80054ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4619      	mov	r1, r3
 80054c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d15d      	bne.n	8005586 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0220 	bic.w	r2, r2, #32
 80054d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	2b01      	cmp	r3, #1
 800550e:	d135      	bne.n	800557c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	613b      	str	r3, [r7, #16]
   return(result);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f023 0310 	bic.w	r3, r3, #16
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	623a      	str	r2, [r7, #32]
 8005538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	69f9      	ldr	r1, [r7, #28]
 800553c:	6a3a      	ldr	r2, [r7, #32]
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	61bb      	str	r3, [r7, #24]
   return(result);
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e5      	bne.n	8005516 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d10a      	bne.n	800556e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fdd1 	bl	800511c <HAL_UARTEx_RxEventCallback>
 800557a:	e002      	b.n	8005582 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fc f8cf 	bl	8001720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e002      	b.n	800558c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3730      	adds	r7, #48	; 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005598:	b0c0      	sub	sp, #256	; 0x100
 800559a:	af00      	add	r7, sp, #0
 800559c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	68d9      	ldr	r1, [r3, #12]
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	ea40 0301 	orr.w	r3, r0, r1
 80055bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055ec:	f021 010c 	bic.w	r1, r1, #12
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055fa:	430b      	orrs	r3, r1
 80055fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	6999      	ldr	r1, [r3, #24]
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	ea40 0301 	orr.w	r3, r0, r1
 800561a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b8f      	ldr	r3, [pc, #572]	; (8005860 <UART_SetConfig+0x2cc>)
 8005624:	429a      	cmp	r2, r3
 8005626:	d005      	beq.n	8005634 <UART_SetConfig+0xa0>
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b8d      	ldr	r3, [pc, #564]	; (8005864 <UART_SetConfig+0x2d0>)
 8005630:	429a      	cmp	r2, r3
 8005632:	d104      	bne.n	800563e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe fd24 	bl	8004080 <HAL_RCC_GetPCLK2Freq>
 8005638:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800563c:	e003      	b.n	8005646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800563e:	f7fe fd0b 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8005642:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005650:	f040 810c 	bne.w	800586c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800565e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005666:	4622      	mov	r2, r4
 8005668:	462b      	mov	r3, r5
 800566a:	1891      	adds	r1, r2, r2
 800566c:	65b9      	str	r1, [r7, #88]	; 0x58
 800566e:	415b      	adcs	r3, r3
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005676:	4621      	mov	r1, r4
 8005678:	eb12 0801 	adds.w	r8, r2, r1
 800567c:	4629      	mov	r1, r5
 800567e:	eb43 0901 	adc.w	r9, r3, r1
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800568e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005696:	4690      	mov	r8, r2
 8005698:	4699      	mov	r9, r3
 800569a:	4623      	mov	r3, r4
 800569c:	eb18 0303 	adds.w	r3, r8, r3
 80056a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056a4:	462b      	mov	r3, r5
 80056a6:	eb49 0303 	adc.w	r3, r9, r3
 80056aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056c2:	460b      	mov	r3, r1
 80056c4:	18db      	adds	r3, r3, r3
 80056c6:	653b      	str	r3, [r7, #80]	; 0x50
 80056c8:	4613      	mov	r3, r2
 80056ca:	eb42 0303 	adc.w	r3, r2, r3
 80056ce:	657b      	str	r3, [r7, #84]	; 0x54
 80056d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056d8:	f7fb faee 	bl	8000cb8 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4b61      	ldr	r3, [pc, #388]	; (8005868 <UART_SetConfig+0x2d4>)
 80056e2:	fba3 2302 	umull	r2, r3, r3, r2
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	011c      	lsls	r4, r3, #4
 80056ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056fc:	4642      	mov	r2, r8
 80056fe:	464b      	mov	r3, r9
 8005700:	1891      	adds	r1, r2, r2
 8005702:	64b9      	str	r1, [r7, #72]	; 0x48
 8005704:	415b      	adcs	r3, r3
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800570c:	4641      	mov	r1, r8
 800570e:	eb12 0a01 	adds.w	sl, r2, r1
 8005712:	4649      	mov	r1, r9
 8005714:	eb43 0b01 	adc.w	fp, r3, r1
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800572c:	4692      	mov	sl, r2
 800572e:	469b      	mov	fp, r3
 8005730:	4643      	mov	r3, r8
 8005732:	eb1a 0303 	adds.w	r3, sl, r3
 8005736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800573a:	464b      	mov	r3, r9
 800573c:	eb4b 0303 	adc.w	r3, fp, r3
 8005740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005750:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005758:	460b      	mov	r3, r1
 800575a:	18db      	adds	r3, r3, r3
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
 800575e:	4613      	mov	r3, r2
 8005760:	eb42 0303 	adc.w	r3, r2, r3
 8005764:	647b      	str	r3, [r7, #68]	; 0x44
 8005766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800576a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800576e:	f7fb faa3 	bl	8000cb8 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4611      	mov	r1, r2
 8005778:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <UART_SetConfig+0x2d4>)
 800577a:	fba3 2301 	umull	r2, r3, r3, r1
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2264      	movs	r2, #100	; 0x64
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	1acb      	subs	r3, r1, r3
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800578e:	4b36      	ldr	r3, [pc, #216]	; (8005868 <UART_SetConfig+0x2d4>)
 8005790:	fba3 2302 	umull	r2, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800579c:	441c      	add	r4, r3
 800579e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b8:	415b      	adcs	r3, r3
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057c0:	4641      	mov	r1, r8
 80057c2:	1851      	adds	r1, r2, r1
 80057c4:	6339      	str	r1, [r7, #48]	; 0x30
 80057c6:	4649      	mov	r1, r9
 80057c8:	414b      	adcs	r3, r1
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057d8:	4659      	mov	r1, fp
 80057da:	00cb      	lsls	r3, r1, #3
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e2:	4651      	mov	r1, sl
 80057e4:	00ca      	lsls	r2, r1, #3
 80057e6:	4610      	mov	r0, r2
 80057e8:	4619      	mov	r1, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	4642      	mov	r2, r8
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800580c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005814:	460b      	mov	r3, r1
 8005816:	18db      	adds	r3, r3, r3
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 800581a:	4613      	mov	r3, r2
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800582a:	f7fb fa45 	bl	8000cb8 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <UART_SetConfig+0x2d4>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <UART_SetConfig+0x2d4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4422      	add	r2, r4
 800585a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800585c:	e106      	b.n	8005a6c <UART_SetConfig+0x4d8>
 800585e:	bf00      	nop
 8005860:	40011000 	.word	0x40011000
 8005864:	40011400 	.word	0x40011400
 8005868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800586c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005870:	2200      	movs	r2, #0
 8005872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005876:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800587a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800587e:	4642      	mov	r2, r8
 8005880:	464b      	mov	r3, r9
 8005882:	1891      	adds	r1, r2, r2
 8005884:	6239      	str	r1, [r7, #32]
 8005886:	415b      	adcs	r3, r3
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800588e:	4641      	mov	r1, r8
 8005890:	1854      	adds	r4, r2, r1
 8005892:	4649      	mov	r1, r9
 8005894:	eb43 0501 	adc.w	r5, r3, r1
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	00eb      	lsls	r3, r5, #3
 80058a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058a6:	00e2      	lsls	r2, r4, #3
 80058a8:	4614      	mov	r4, r2
 80058aa:	461d      	mov	r5, r3
 80058ac:	4643      	mov	r3, r8
 80058ae:	18e3      	adds	r3, r4, r3
 80058b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058b4:	464b      	mov	r3, r9
 80058b6:	eb45 0303 	adc.w	r3, r5, r3
 80058ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058da:	4629      	mov	r1, r5
 80058dc:	008b      	lsls	r3, r1, #2
 80058de:	4621      	mov	r1, r4
 80058e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e4:	4621      	mov	r1, r4
 80058e6:	008a      	lsls	r2, r1, #2
 80058e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058ec:	f7fb f9e4 	bl	8000cb8 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4b60      	ldr	r3, [pc, #384]	; (8005a78 <UART_SetConfig+0x4e4>)
 80058f6:	fba3 2302 	umull	r2, r3, r3, r2
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	011c      	lsls	r4, r3, #4
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005908:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800590c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	1891      	adds	r1, r2, r2
 8005916:	61b9      	str	r1, [r7, #24]
 8005918:	415b      	adcs	r3, r3
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005920:	4641      	mov	r1, r8
 8005922:	1851      	adds	r1, r2, r1
 8005924:	6139      	str	r1, [r7, #16]
 8005926:	4649      	mov	r1, r9
 8005928:	414b      	adcs	r3, r1
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005938:	4659      	mov	r1, fp
 800593a:	00cb      	lsls	r3, r1, #3
 800593c:	4651      	mov	r1, sl
 800593e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005942:	4651      	mov	r1, sl
 8005944:	00ca      	lsls	r2, r1, #3
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	4603      	mov	r3, r0
 800594c:	4642      	mov	r2, r8
 800594e:	189b      	adds	r3, r3, r2
 8005950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005954:	464b      	mov	r3, r9
 8005956:	460a      	mov	r2, r1
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	67bb      	str	r3, [r7, #120]	; 0x78
 800596a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005978:	4649      	mov	r1, r9
 800597a:	008b      	lsls	r3, r1, #2
 800597c:	4641      	mov	r1, r8
 800597e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005982:	4641      	mov	r1, r8
 8005984:	008a      	lsls	r2, r1, #2
 8005986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800598a:	f7fb f995 	bl	8000cb8 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4611      	mov	r1, r2
 8005994:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <UART_SetConfig+0x4e4>)
 8005996:	fba3 2301 	umull	r2, r3, r3, r1
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2264      	movs	r2, #100	; 0x64
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	1acb      	subs	r3, r1, r3
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	3332      	adds	r3, #50	; 0x32
 80059a8:	4a33      	ldr	r2, [pc, #204]	; (8005a78 <UART_SetConfig+0x4e4>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b4:	441c      	add	r4, r3
 80059b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ba:	2200      	movs	r2, #0
 80059bc:	673b      	str	r3, [r7, #112]	; 0x70
 80059be:	677a      	str	r2, [r7, #116]	; 0x74
 80059c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	1891      	adds	r1, r2, r2
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	415b      	adcs	r3, r3
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059d4:	4641      	mov	r1, r8
 80059d6:	1851      	adds	r1, r2, r1
 80059d8:	6039      	str	r1, [r7, #0]
 80059da:	4649      	mov	r1, r9
 80059dc:	414b      	adcs	r3, r1
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ec:	4659      	mov	r1, fp
 80059ee:	00cb      	lsls	r3, r1, #3
 80059f0:	4651      	mov	r1, sl
 80059f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059f6:	4651      	mov	r1, sl
 80059f8:	00ca      	lsls	r2, r1, #3
 80059fa:	4610      	mov	r0, r2
 80059fc:	4619      	mov	r1, r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	4642      	mov	r2, r8
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a06:	464b      	mov	r3, r9
 8005a08:	460a      	mov	r2, r1
 8005a0a:	eb42 0303 	adc.w	r3, r2, r3
 8005a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1a:	667a      	str	r2, [r7, #100]	; 0x64
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a28:	4649      	mov	r1, r9
 8005a2a:	008b      	lsls	r3, r1, #2
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a32:	4641      	mov	r1, r8
 8005a34:	008a      	lsls	r2, r1, #2
 8005a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a3a:	f7fb f93d 	bl	8000cb8 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <UART_SetConfig+0x4e4>)
 8005a44:	fba3 1302 	umull	r1, r3, r3, r2
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	2164      	movs	r1, #100	; 0x64
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	3332      	adds	r3, #50	; 0x32
 8005a56:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <UART_SetConfig+0x4e4>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	f003 020f 	and.w	r2, r3, #15
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4422      	add	r2, r4
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a72:	46bd      	mov	sp, r7
 8005a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a78:	51eb851f 	.word	0x51eb851f

08005a7c <atoi>:
 8005a7c:	220a      	movs	r2, #10
 8005a7e:	2100      	movs	r1, #0
 8005a80:	f000 b882 	b.w	8005b88 <strtol>

08005a84 <_strtol_l.constprop.0>:
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8a:	d001      	beq.n	8005a90 <_strtol_l.constprop.0+0xc>
 8005a8c:	2b24      	cmp	r3, #36	; 0x24
 8005a8e:	d906      	bls.n	8005a9e <_strtol_l.constprop.0+0x1a>
 8005a90:	f000 ffc0 	bl	8006a14 <__errno>
 8005a94:	2316      	movs	r3, #22
 8005a96:	6003      	str	r3, [r0, #0]
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005b84 <_strtol_l.constprop.0+0x100>
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	462e      	mov	r6, r5
 8005aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aaa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005aae:	f017 0708 	ands.w	r7, r7, #8
 8005ab2:	d1f7      	bne.n	8005aa4 <_strtol_l.constprop.0+0x20>
 8005ab4:	2c2d      	cmp	r4, #45	; 0x2d
 8005ab6:	d132      	bne.n	8005b1e <_strtol_l.constprop.0+0x9a>
 8005ab8:	782c      	ldrb	r4, [r5, #0]
 8005aba:	2701      	movs	r7, #1
 8005abc:	1cb5      	adds	r5, r6, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d05b      	beq.n	8005b7a <_strtol_l.constprop.0+0xf6>
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d109      	bne.n	8005ada <_strtol_l.constprop.0+0x56>
 8005ac6:	2c30      	cmp	r4, #48	; 0x30
 8005ac8:	d107      	bne.n	8005ada <_strtol_l.constprop.0+0x56>
 8005aca:	782c      	ldrb	r4, [r5, #0]
 8005acc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005ad0:	2c58      	cmp	r4, #88	; 0x58
 8005ad2:	d14d      	bne.n	8005b70 <_strtol_l.constprop.0+0xec>
 8005ad4:	786c      	ldrb	r4, [r5, #1]
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	3502      	adds	r5, #2
 8005ada:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005ade:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ae2:	f04f 0e00 	mov.w	lr, #0
 8005ae6:	fbb8 f9f3 	udiv	r9, r8, r3
 8005aea:	4676      	mov	r6, lr
 8005aec:	fb03 8a19 	mls	sl, r3, r9, r8
 8005af0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005af4:	f1bc 0f09 	cmp.w	ip, #9
 8005af8:	d816      	bhi.n	8005b28 <_strtol_l.constprop.0+0xa4>
 8005afa:	4664      	mov	r4, ip
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	dd24      	ble.n	8005b4a <_strtol_l.constprop.0+0xc6>
 8005b00:	f1be 3fff 	cmp.w	lr, #4294967295
 8005b04:	d008      	beq.n	8005b18 <_strtol_l.constprop.0+0x94>
 8005b06:	45b1      	cmp	r9, r6
 8005b08:	d31c      	bcc.n	8005b44 <_strtol_l.constprop.0+0xc0>
 8005b0a:	d101      	bne.n	8005b10 <_strtol_l.constprop.0+0x8c>
 8005b0c:	45a2      	cmp	sl, r4
 8005b0e:	db19      	blt.n	8005b44 <_strtol_l.constprop.0+0xc0>
 8005b10:	fb06 4603 	mla	r6, r6, r3, r4
 8005b14:	f04f 0e01 	mov.w	lr, #1
 8005b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b1c:	e7e8      	b.n	8005af0 <_strtol_l.constprop.0+0x6c>
 8005b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8005b20:	bf04      	itt	eq
 8005b22:	782c      	ldrbeq	r4, [r5, #0]
 8005b24:	1cb5      	addeq	r5, r6, #2
 8005b26:	e7ca      	b.n	8005abe <_strtol_l.constprop.0+0x3a>
 8005b28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005b2c:	f1bc 0f19 	cmp.w	ip, #25
 8005b30:	d801      	bhi.n	8005b36 <_strtol_l.constprop.0+0xb2>
 8005b32:	3c37      	subs	r4, #55	; 0x37
 8005b34:	e7e2      	b.n	8005afc <_strtol_l.constprop.0+0x78>
 8005b36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005b3a:	f1bc 0f19 	cmp.w	ip, #25
 8005b3e:	d804      	bhi.n	8005b4a <_strtol_l.constprop.0+0xc6>
 8005b40:	3c57      	subs	r4, #87	; 0x57
 8005b42:	e7db      	b.n	8005afc <_strtol_l.constprop.0+0x78>
 8005b44:	f04f 3eff 	mov.w	lr, #4294967295
 8005b48:	e7e6      	b.n	8005b18 <_strtol_l.constprop.0+0x94>
 8005b4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8005b4e:	d105      	bne.n	8005b5c <_strtol_l.constprop.0+0xd8>
 8005b50:	2322      	movs	r3, #34	; 0x22
 8005b52:	6003      	str	r3, [r0, #0]
 8005b54:	4646      	mov	r6, r8
 8005b56:	b942      	cbnz	r2, 8005b6a <_strtol_l.constprop.0+0xe6>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	e79e      	b.n	8005a9a <_strtol_l.constprop.0+0x16>
 8005b5c:	b107      	cbz	r7, 8005b60 <_strtol_l.constprop.0+0xdc>
 8005b5e:	4276      	negs	r6, r6
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d0f9      	beq.n	8005b58 <_strtol_l.constprop.0+0xd4>
 8005b64:	f1be 0f00 	cmp.w	lr, #0
 8005b68:	d000      	beq.n	8005b6c <_strtol_l.constprop.0+0xe8>
 8005b6a:	1e69      	subs	r1, r5, #1
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	e7f3      	b.n	8005b58 <_strtol_l.constprop.0+0xd4>
 8005b70:	2430      	movs	r4, #48	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1b1      	bne.n	8005ada <_strtol_l.constprop.0+0x56>
 8005b76:	2308      	movs	r3, #8
 8005b78:	e7af      	b.n	8005ada <_strtol_l.constprop.0+0x56>
 8005b7a:	2c30      	cmp	r4, #48	; 0x30
 8005b7c:	d0a5      	beq.n	8005aca <_strtol_l.constprop.0+0x46>
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e7ab      	b.n	8005ada <_strtol_l.constprop.0+0x56>
 8005b82:	bf00      	nop
 8005b84:	08008c29 	.word	0x08008c29

08005b88 <strtol>:
 8005b88:	4613      	mov	r3, r2
 8005b8a:	460a      	mov	r2, r1
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	4802      	ldr	r0, [pc, #8]	; (8005b98 <strtol+0x10>)
 8005b90:	6800      	ldr	r0, [r0, #0]
 8005b92:	f7ff bf77 	b.w	8005a84 <_strtol_l.constprop.0>
 8005b96:	bf00      	nop
 8005b98:	20000068 	.word	0x20000068

08005b9c <__cvt>:
 8005b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	ec55 4b10 	vmov	r4, r5, d0
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	460e      	mov	r6, r1
 8005ba8:	4619      	mov	r1, r3
 8005baa:	462b      	mov	r3, r5
 8005bac:	bfbb      	ittet	lt
 8005bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bb2:	461d      	movlt	r5, r3
 8005bb4:	2300      	movge	r3, #0
 8005bb6:	232d      	movlt	r3, #45	; 0x2d
 8005bb8:	700b      	strb	r3, [r1, #0]
 8005bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bc0:	4691      	mov	r9, r2
 8005bc2:	f023 0820 	bic.w	r8, r3, #32
 8005bc6:	bfbc      	itt	lt
 8005bc8:	4622      	movlt	r2, r4
 8005bca:	4614      	movlt	r4, r2
 8005bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bd0:	d005      	beq.n	8005bde <__cvt+0x42>
 8005bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bd6:	d100      	bne.n	8005bda <__cvt+0x3e>
 8005bd8:	3601      	adds	r6, #1
 8005bda:	2102      	movs	r1, #2
 8005bdc:	e000      	b.n	8005be0 <__cvt+0x44>
 8005bde:	2103      	movs	r1, #3
 8005be0:	ab03      	add	r3, sp, #12
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	ab02      	add	r3, sp, #8
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	ec45 4b10 	vmov	d0, r4, r5
 8005bec:	4653      	mov	r3, sl
 8005bee:	4632      	mov	r2, r6
 8005bf0:	f000 ffe6 	bl	8006bc0 <_dtoa_r>
 8005bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	d102      	bne.n	8005c02 <__cvt+0x66>
 8005bfc:	f019 0f01 	tst.w	r9, #1
 8005c00:	d022      	beq.n	8005c48 <__cvt+0xac>
 8005c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c06:	eb07 0906 	add.w	r9, r7, r6
 8005c0a:	d110      	bne.n	8005c2e <__cvt+0x92>
 8005c0c:	783b      	ldrb	r3, [r7, #0]
 8005c0e:	2b30      	cmp	r3, #48	; 0x30
 8005c10:	d10a      	bne.n	8005c28 <__cvt+0x8c>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa ff6d 	bl	8000af8 <__aeabi_dcmpeq>
 8005c1e:	b918      	cbnz	r0, 8005c28 <__cvt+0x8c>
 8005c20:	f1c6 0601 	rsb	r6, r6, #1
 8005c24:	f8ca 6000 	str.w	r6, [sl]
 8005c28:	f8da 3000 	ldr.w	r3, [sl]
 8005c2c:	4499      	add	r9, r3
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 8005c3a:	b108      	cbz	r0, 8005c40 <__cvt+0xa4>
 8005c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c40:	2230      	movs	r2, #48	; 0x30
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	454b      	cmp	r3, r9
 8005c46:	d307      	bcc.n	8005c58 <__cvt+0xbc>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c4c:	1bdb      	subs	r3, r3, r7
 8005c4e:	4638      	mov	r0, r7
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	b004      	add	sp, #16
 8005c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	9103      	str	r1, [sp, #12]
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e7f0      	b.n	8005c42 <__cvt+0xa6>

08005c60 <__exponent>:
 8005c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c62:	4603      	mov	r3, r0
 8005c64:	2900      	cmp	r1, #0
 8005c66:	bfb8      	it	lt
 8005c68:	4249      	neglt	r1, r1
 8005c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8005c6e:	bfb4      	ite	lt
 8005c70:	222d      	movlt	r2, #45	; 0x2d
 8005c72:	222b      	movge	r2, #43	; 0x2b
 8005c74:	2909      	cmp	r1, #9
 8005c76:	7042      	strb	r2, [r0, #1]
 8005c78:	dd2a      	ble.n	8005cd0 <__exponent+0x70>
 8005c7a:	f10d 0207 	add.w	r2, sp, #7
 8005c7e:	4617      	mov	r7, r2
 8005c80:	260a      	movs	r6, #10
 8005c82:	4694      	mov	ip, r2
 8005c84:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c88:	fb06 1415 	mls	r4, r6, r5, r1
 8005c8c:	3430      	adds	r4, #48	; 0x30
 8005c8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005c92:	460c      	mov	r4, r1
 8005c94:	2c63      	cmp	r4, #99	; 0x63
 8005c96:	f102 32ff 	add.w	r2, r2, #4294967295
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	dcf1      	bgt.n	8005c82 <__exponent+0x22>
 8005c9e:	3130      	adds	r1, #48	; 0x30
 8005ca0:	f1ac 0402 	sub.w	r4, ip, #2
 8005ca4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005ca8:	1c41      	adds	r1, r0, #1
 8005caa:	4622      	mov	r2, r4
 8005cac:	42ba      	cmp	r2, r7
 8005cae:	d30a      	bcc.n	8005cc6 <__exponent+0x66>
 8005cb0:	f10d 0209 	add.w	r2, sp, #9
 8005cb4:	eba2 020c 	sub.w	r2, r2, ip
 8005cb8:	42bc      	cmp	r4, r7
 8005cba:	bf88      	it	hi
 8005cbc:	2200      	movhi	r2, #0
 8005cbe:	4413      	add	r3, r2
 8005cc0:	1a18      	subs	r0, r3, r0
 8005cc2:	b003      	add	sp, #12
 8005cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005cce:	e7ed      	b.n	8005cac <__exponent+0x4c>
 8005cd0:	2330      	movs	r3, #48	; 0x30
 8005cd2:	3130      	adds	r1, #48	; 0x30
 8005cd4:	7083      	strb	r3, [r0, #2]
 8005cd6:	70c1      	strb	r1, [r0, #3]
 8005cd8:	1d03      	adds	r3, r0, #4
 8005cda:	e7f1      	b.n	8005cc0 <__exponent+0x60>

08005cdc <_printf_float>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	ed2d 8b02 	vpush	{d8}
 8005ce4:	b08d      	sub	sp, #52	; 0x34
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cec:	4616      	mov	r6, r2
 8005cee:	461f      	mov	r7, r3
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	f000 fe45 	bl	8006980 <_localeconv_r>
 8005cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8005cfa:	4650      	mov	r0, sl
 8005cfc:	f7fa fad0 	bl	80002a0 <strlen>
 8005d00:	2300      	movs	r3, #0
 8005d02:	930a      	str	r3, [sp, #40]	; 0x28
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	9305      	str	r3, [sp, #20]
 8005d08:	f8d8 3000 	ldr.w	r3, [r8]
 8005d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d10:	3307      	adds	r3, #7
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	f103 0208 	add.w	r2, r3, #8
 8005d1a:	f8c8 2000 	str.w	r2, [r8]
 8005d1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d2c:	ee08 0a10 	vmov	s16, r0
 8005d30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005d34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d38:	4b9e      	ldr	r3, [pc, #632]	; (8005fb4 <_printf_float+0x2d8>)
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	f7fa ff0d 	bl	8000b5c <__aeabi_dcmpun>
 8005d42:	bb88      	cbnz	r0, 8005da8 <_printf_float+0xcc>
 8005d44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d48:	4b9a      	ldr	r3, [pc, #616]	; (8005fb4 <_printf_float+0x2d8>)
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	f7fa fee7 	bl	8000b20 <__aeabi_dcmple>
 8005d52:	bb48      	cbnz	r0, 8005da8 <_printf_float+0xcc>
 8005d54:	2200      	movs	r2, #0
 8005d56:	2300      	movs	r3, #0
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	f7fa fed6 	bl	8000b0c <__aeabi_dcmplt>
 8005d60:	b110      	cbz	r0, 8005d68 <_printf_float+0x8c>
 8005d62:	232d      	movs	r3, #45	; 0x2d
 8005d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d68:	4a93      	ldr	r2, [pc, #588]	; (8005fb8 <_printf_float+0x2dc>)
 8005d6a:	4b94      	ldr	r3, [pc, #592]	; (8005fbc <_printf_float+0x2e0>)
 8005d6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d70:	bf94      	ite	ls
 8005d72:	4690      	movls	r8, r2
 8005d74:	4698      	movhi	r8, r3
 8005d76:	2303      	movs	r3, #3
 8005d78:	6123      	str	r3, [r4, #16]
 8005d7a:	9b05      	ldr	r3, [sp, #20]
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	f04f 0900 	mov.w	r9, #0
 8005d86:	9700      	str	r7, [sp, #0]
 8005d88:	4633      	mov	r3, r6
 8005d8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f9da 	bl	8006148 <_printf_common>
 8005d94:	3001      	adds	r0, #1
 8005d96:	f040 8090 	bne.w	8005eba <_printf_float+0x1de>
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9e:	b00d      	add	sp, #52	; 0x34
 8005da0:	ecbd 8b02 	vpop	{d8}
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fed4 	bl	8000b5c <__aeabi_dcmpun>
 8005db4:	b140      	cbz	r0, 8005dc8 <_printf_float+0xec>
 8005db6:	464b      	mov	r3, r9
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfbc      	itt	lt
 8005dbc:	232d      	movlt	r3, #45	; 0x2d
 8005dbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dc2:	4a7f      	ldr	r2, [pc, #508]	; (8005fc0 <_printf_float+0x2e4>)
 8005dc4:	4b7f      	ldr	r3, [pc, #508]	; (8005fc4 <_printf_float+0x2e8>)
 8005dc6:	e7d1      	b.n	8005d6c <_printf_float+0x90>
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dce:	9206      	str	r2, [sp, #24]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	d13f      	bne.n	8005e54 <_printf_float+0x178>
 8005dd4:	2306      	movs	r3, #6
 8005dd6:	6063      	str	r3, [r4, #4]
 8005dd8:	9b05      	ldr	r3, [sp, #20]
 8005dda:	6861      	ldr	r1, [r4, #4]
 8005ddc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005de0:	2300      	movs	r3, #0
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	ab0a      	add	r3, sp, #40	; 0x28
 8005de6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005dea:	ab09      	add	r3, sp, #36	; 0x24
 8005dec:	ec49 8b10 	vmov	d0, r8, r9
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6022      	str	r2, [r4, #0]
 8005df4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff fecf 	bl	8005b9c <__cvt>
 8005dfe:	9b06      	ldr	r3, [sp, #24]
 8005e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e02:	2b47      	cmp	r3, #71	; 0x47
 8005e04:	4680      	mov	r8, r0
 8005e06:	d108      	bne.n	8005e1a <_printf_float+0x13e>
 8005e08:	1cc8      	adds	r0, r1, #3
 8005e0a:	db02      	blt.n	8005e12 <_printf_float+0x136>
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	dd41      	ble.n	8005e96 <_printf_float+0x1ba>
 8005e12:	f1ab 0302 	sub.w	r3, fp, #2
 8005e16:	fa5f fb83 	uxtb.w	fp, r3
 8005e1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e1e:	d820      	bhi.n	8005e62 <_printf_float+0x186>
 8005e20:	3901      	subs	r1, #1
 8005e22:	465a      	mov	r2, fp
 8005e24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e28:	9109      	str	r1, [sp, #36]	; 0x24
 8005e2a:	f7ff ff19 	bl	8005c60 <__exponent>
 8005e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e30:	1813      	adds	r3, r2, r0
 8005e32:	2a01      	cmp	r2, #1
 8005e34:	4681      	mov	r9, r0
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	dc02      	bgt.n	8005e40 <_printf_float+0x164>
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	07d2      	lsls	r2, r2, #31
 8005e3e:	d501      	bpl.n	8005e44 <_printf_float+0x168>
 8005e40:	3301      	adds	r3, #1
 8005e42:	6123      	str	r3, [r4, #16]
 8005e44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d09c      	beq.n	8005d86 <_printf_float+0xaa>
 8005e4c:	232d      	movs	r3, #45	; 0x2d
 8005e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e52:	e798      	b.n	8005d86 <_printf_float+0xaa>
 8005e54:	9a06      	ldr	r2, [sp, #24]
 8005e56:	2a47      	cmp	r2, #71	; 0x47
 8005e58:	d1be      	bne.n	8005dd8 <_printf_float+0xfc>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1bc      	bne.n	8005dd8 <_printf_float+0xfc>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e7b9      	b.n	8005dd6 <_printf_float+0xfa>
 8005e62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e66:	d118      	bne.n	8005e9a <_printf_float+0x1be>
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	dd0b      	ble.n	8005e86 <_printf_float+0x1aa>
 8005e6e:	6121      	str	r1, [r4, #16]
 8005e70:	b913      	cbnz	r3, 8005e78 <_printf_float+0x19c>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	07d0      	lsls	r0, r2, #31
 8005e76:	d502      	bpl.n	8005e7e <_printf_float+0x1a2>
 8005e78:	3301      	adds	r3, #1
 8005e7a:	440b      	add	r3, r1
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e80:	f04f 0900 	mov.w	r9, #0
 8005e84:	e7de      	b.n	8005e44 <_printf_float+0x168>
 8005e86:	b913      	cbnz	r3, 8005e8e <_printf_float+0x1b2>
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	07d2      	lsls	r2, r2, #31
 8005e8c:	d501      	bpl.n	8005e92 <_printf_float+0x1b6>
 8005e8e:	3302      	adds	r3, #2
 8005e90:	e7f4      	b.n	8005e7c <_printf_float+0x1a0>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e7f2      	b.n	8005e7c <_printf_float+0x1a0>
 8005e96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	db05      	blt.n	8005eac <_printf_float+0x1d0>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	6121      	str	r1, [r4, #16]
 8005ea4:	07d8      	lsls	r0, r3, #31
 8005ea6:	d5ea      	bpl.n	8005e7e <_printf_float+0x1a2>
 8005ea8:	1c4b      	adds	r3, r1, #1
 8005eaa:	e7e7      	b.n	8005e7c <_printf_float+0x1a0>
 8005eac:	2900      	cmp	r1, #0
 8005eae:	bfd4      	ite	le
 8005eb0:	f1c1 0202 	rsble	r2, r1, #2
 8005eb4:	2201      	movgt	r2, #1
 8005eb6:	4413      	add	r3, r2
 8005eb8:	e7e0      	b.n	8005e7c <_printf_float+0x1a0>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	055a      	lsls	r2, r3, #21
 8005ebe:	d407      	bmi.n	8005ed0 <_printf_float+0x1f4>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	4642      	mov	r2, r8
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d12c      	bne.n	8005f28 <_printf_float+0x24c>
 8005ece:	e764      	b.n	8005d9a <_printf_float+0xbe>
 8005ed0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ed4:	f240 80e0 	bls.w	8006098 <_printf_float+0x3bc>
 8005ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005edc:	2200      	movs	r2, #0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f7fa fe0a 	bl	8000af8 <__aeabi_dcmpeq>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d034      	beq.n	8005f52 <_printf_float+0x276>
 8005ee8:	4a37      	ldr	r2, [pc, #220]	; (8005fc8 <_printf_float+0x2ec>)
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af51 	beq.w	8005d9a <_printf_float+0xbe>
 8005ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005efc:	429a      	cmp	r2, r3
 8005efe:	db02      	blt.n	8005f06 <_printf_float+0x22a>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07d8      	lsls	r0, r3, #31
 8005f04:	d510      	bpl.n	8005f28 <_printf_float+0x24c>
 8005f06:	ee18 3a10 	vmov	r3, s16
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af41 	beq.w	8005d9a <_printf_float+0xbe>
 8005f18:	f04f 0800 	mov.w	r8, #0
 8005f1c:	f104 091a 	add.w	r9, r4, #26
 8005f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4543      	cmp	r3, r8
 8005f26:	dc09      	bgt.n	8005f3c <_printf_float+0x260>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	079b      	lsls	r3, r3, #30
 8005f2c:	f100 8107 	bmi.w	800613e <_printf_float+0x462>
 8005f30:	68e0      	ldr	r0, [r4, #12]
 8005f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f34:	4298      	cmp	r0, r3
 8005f36:	bfb8      	it	lt
 8005f38:	4618      	movlt	r0, r3
 8005f3a:	e730      	b.n	8005d9e <_printf_float+0xc2>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	464a      	mov	r2, r9
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f af27 	beq.w	8005d9a <_printf_float+0xbe>
 8005f4c:	f108 0801 	add.w	r8, r8, #1
 8005f50:	e7e6      	b.n	8005f20 <_printf_float+0x244>
 8005f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dc39      	bgt.n	8005fcc <_printf_float+0x2f0>
 8005f58:	4a1b      	ldr	r2, [pc, #108]	; (8005fc8 <_printf_float+0x2ec>)
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f af19 	beq.w	8005d9a <_printf_float+0xbe>
 8005f68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d102      	bne.n	8005f76 <_printf_float+0x29a>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07d9      	lsls	r1, r3, #31
 8005f74:	d5d8      	bpl.n	8005f28 <_printf_float+0x24c>
 8005f76:	ee18 3a10 	vmov	r3, s16
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	f43f af09 	beq.w	8005d9a <_printf_float+0xbe>
 8005f88:	f04f 0900 	mov.w	r9, #0
 8005f8c:	f104 0a1a 	add.w	sl, r4, #26
 8005f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f92:	425b      	negs	r3, r3
 8005f94:	454b      	cmp	r3, r9
 8005f96:	dc01      	bgt.n	8005f9c <_printf_float+0x2c0>
 8005f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9a:	e792      	b.n	8005ec2 <_printf_float+0x1e6>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4652      	mov	r2, sl
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f aef7 	beq.w	8005d9a <_printf_float+0xbe>
 8005fac:	f109 0901 	add.w	r9, r9, #1
 8005fb0:	e7ee      	b.n	8005f90 <_printf_float+0x2b4>
 8005fb2:	bf00      	nop
 8005fb4:	7fefffff 	.word	0x7fefffff
 8005fb8:	08008d29 	.word	0x08008d29
 8005fbc:	08008d2d 	.word	0x08008d2d
 8005fc0:	08008d31 	.word	0x08008d31
 8005fc4:	08008d35 	.word	0x08008d35
 8005fc8:	08008d39 	.word	0x08008d39
 8005fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	bfa8      	it	ge
 8005fd4:	461a      	movge	r2, r3
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	4691      	mov	r9, r2
 8005fda:	dc37      	bgt.n	800604c <_printf_float+0x370>
 8005fdc:	f04f 0b00 	mov.w	fp, #0
 8005fe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe4:	f104 021a 	add.w	r2, r4, #26
 8005fe8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	eba3 0309 	sub.w	r3, r3, r9
 8005ff0:	455b      	cmp	r3, fp
 8005ff2:	dc33      	bgt.n	800605c <_printf_float+0x380>
 8005ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	db3b      	blt.n	8006074 <_printf_float+0x398>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	07da      	lsls	r2, r3, #31
 8006000:	d438      	bmi.n	8006074 <_printf_float+0x398>
 8006002:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006006:	eba2 0903 	sub.w	r9, r2, r3
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	4591      	cmp	r9, r2
 8006010:	bfa8      	it	ge
 8006012:	4691      	movge	r9, r2
 8006014:	f1b9 0f00 	cmp.w	r9, #0
 8006018:	dc35      	bgt.n	8006086 <_printf_float+0x3aa>
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006022:	f104 0a1a 	add.w	sl, r4, #26
 8006026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	eba3 0309 	sub.w	r3, r3, r9
 8006030:	4543      	cmp	r3, r8
 8006032:	f77f af79 	ble.w	8005f28 <_printf_float+0x24c>
 8006036:	2301      	movs	r3, #1
 8006038:	4652      	mov	r2, sl
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f aeaa 	beq.w	8005d9a <_printf_float+0xbe>
 8006046:	f108 0801 	add.w	r8, r8, #1
 800604a:	e7ec      	b.n	8006026 <_printf_float+0x34a>
 800604c:	4613      	mov	r3, r2
 800604e:	4631      	mov	r1, r6
 8006050:	4642      	mov	r2, r8
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	d1c0      	bne.n	8005fdc <_printf_float+0x300>
 800605a:	e69e      	b.n	8005d9a <_printf_float+0xbe>
 800605c:	2301      	movs	r3, #1
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	9205      	str	r2, [sp, #20]
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	f43f ae97 	beq.w	8005d9a <_printf_float+0xbe>
 800606c:	9a05      	ldr	r2, [sp, #20]
 800606e:	f10b 0b01 	add.w	fp, fp, #1
 8006072:	e7b9      	b.n	8005fe8 <_printf_float+0x30c>
 8006074:	ee18 3a10 	vmov	r3, s16
 8006078:	4652      	mov	r2, sl
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	d1be      	bne.n	8006002 <_printf_float+0x326>
 8006084:	e689      	b.n	8005d9a <_printf_float+0xbe>
 8006086:	9a05      	ldr	r2, [sp, #20]
 8006088:	464b      	mov	r3, r9
 800608a:	4442      	add	r2, r8
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	d1c1      	bne.n	800601a <_printf_float+0x33e>
 8006096:	e680      	b.n	8005d9a <_printf_float+0xbe>
 8006098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800609a:	2a01      	cmp	r2, #1
 800609c:	dc01      	bgt.n	80060a2 <_printf_float+0x3c6>
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d53a      	bpl.n	8006118 <_printf_float+0x43c>
 80060a2:	2301      	movs	r3, #1
 80060a4:	4642      	mov	r2, r8
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f ae74 	beq.w	8005d9a <_printf_float+0xbe>
 80060b2:	ee18 3a10 	vmov	r3, s16
 80060b6:	4652      	mov	r2, sl
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f ae6b 	beq.w	8005d9a <_printf_float+0xbe>
 80060c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060c8:	2200      	movs	r2, #0
 80060ca:	2300      	movs	r3, #0
 80060cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80060d0:	f7fa fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80060d4:	b9d8      	cbnz	r0, 800610e <_printf_float+0x432>
 80060d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80060da:	f108 0201 	add.w	r2, r8, #1
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	d10e      	bne.n	8006106 <_printf_float+0x42a>
 80060e8:	e657      	b.n	8005d9a <_printf_float+0xbe>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4652      	mov	r2, sl
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	f43f ae50 	beq.w	8005d9a <_printf_float+0xbe>
 80060fa:	f108 0801 	add.w	r8, r8, #1
 80060fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006100:	3b01      	subs	r3, #1
 8006102:	4543      	cmp	r3, r8
 8006104:	dcf1      	bgt.n	80060ea <_printf_float+0x40e>
 8006106:	464b      	mov	r3, r9
 8006108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800610c:	e6da      	b.n	8005ec4 <_printf_float+0x1e8>
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	f104 0a1a 	add.w	sl, r4, #26
 8006116:	e7f2      	b.n	80060fe <_printf_float+0x422>
 8006118:	2301      	movs	r3, #1
 800611a:	4642      	mov	r2, r8
 800611c:	e7df      	b.n	80060de <_printf_float+0x402>
 800611e:	2301      	movs	r3, #1
 8006120:	464a      	mov	r2, r9
 8006122:	4631      	mov	r1, r6
 8006124:	4628      	mov	r0, r5
 8006126:	47b8      	blx	r7
 8006128:	3001      	adds	r0, #1
 800612a:	f43f ae36 	beq.w	8005d9a <_printf_float+0xbe>
 800612e:	f108 0801 	add.w	r8, r8, #1
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006136:	1a5b      	subs	r3, r3, r1
 8006138:	4543      	cmp	r3, r8
 800613a:	dcf0      	bgt.n	800611e <_printf_float+0x442>
 800613c:	e6f8      	b.n	8005f30 <_printf_float+0x254>
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	f104 0919 	add.w	r9, r4, #25
 8006146:	e7f4      	b.n	8006132 <_printf_float+0x456>

08006148 <_printf_common>:
 8006148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614c:	4616      	mov	r6, r2
 800614e:	4699      	mov	r9, r3
 8006150:	688a      	ldr	r2, [r1, #8]
 8006152:	690b      	ldr	r3, [r1, #16]
 8006154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006158:	4293      	cmp	r3, r2
 800615a:	bfb8      	it	lt
 800615c:	4613      	movlt	r3, r2
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006164:	4607      	mov	r7, r0
 8006166:	460c      	mov	r4, r1
 8006168:	b10a      	cbz	r2, 800616e <_printf_common+0x26>
 800616a:	3301      	adds	r3, #1
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	0699      	lsls	r1, r3, #26
 8006172:	bf42      	ittt	mi
 8006174:	6833      	ldrmi	r3, [r6, #0]
 8006176:	3302      	addmi	r3, #2
 8006178:	6033      	strmi	r3, [r6, #0]
 800617a:	6825      	ldr	r5, [r4, #0]
 800617c:	f015 0506 	ands.w	r5, r5, #6
 8006180:	d106      	bne.n	8006190 <_printf_common+0x48>
 8006182:	f104 0a19 	add.w	sl, r4, #25
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	6832      	ldr	r2, [r6, #0]
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	42ab      	cmp	r3, r5
 800618e:	dc26      	bgt.n	80061de <_printf_common+0x96>
 8006190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006194:	1e13      	subs	r3, r2, #0
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	bf18      	it	ne
 800619a:	2301      	movne	r3, #1
 800619c:	0692      	lsls	r2, r2, #26
 800619e:	d42b      	bmi.n	80061f8 <_printf_common+0xb0>
 80061a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a4:	4649      	mov	r1, r9
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c0      	blx	r8
 80061aa:	3001      	adds	r0, #1
 80061ac:	d01e      	beq.n	80061ec <_printf_common+0xa4>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	6922      	ldr	r2, [r4, #16]
 80061b2:	f003 0306 	and.w	r3, r3, #6
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	bf02      	ittt	eq
 80061ba:	68e5      	ldreq	r5, [r4, #12]
 80061bc:	6833      	ldreq	r3, [r6, #0]
 80061be:	1aed      	subeq	r5, r5, r3
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	bf0c      	ite	eq
 80061c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061c8:	2500      	movne	r5, #0
 80061ca:	4293      	cmp	r3, r2
 80061cc:	bfc4      	itt	gt
 80061ce:	1a9b      	subgt	r3, r3, r2
 80061d0:	18ed      	addgt	r5, r5, r3
 80061d2:	2600      	movs	r6, #0
 80061d4:	341a      	adds	r4, #26
 80061d6:	42b5      	cmp	r5, r6
 80061d8:	d11a      	bne.n	8006210 <_printf_common+0xc8>
 80061da:	2000      	movs	r0, #0
 80061dc:	e008      	b.n	80061f0 <_printf_common+0xa8>
 80061de:	2301      	movs	r3, #1
 80061e0:	4652      	mov	r2, sl
 80061e2:	4649      	mov	r1, r9
 80061e4:	4638      	mov	r0, r7
 80061e6:	47c0      	blx	r8
 80061e8:	3001      	adds	r0, #1
 80061ea:	d103      	bne.n	80061f4 <_printf_common+0xac>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f4:	3501      	adds	r5, #1
 80061f6:	e7c6      	b.n	8006186 <_printf_common+0x3e>
 80061f8:	18e1      	adds	r1, r4, r3
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	2030      	movs	r0, #48	; 0x30
 80061fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006202:	4422      	add	r2, r4
 8006204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800620c:	3302      	adds	r3, #2
 800620e:	e7c7      	b.n	80061a0 <_printf_common+0x58>
 8006210:	2301      	movs	r3, #1
 8006212:	4622      	mov	r2, r4
 8006214:	4649      	mov	r1, r9
 8006216:	4638      	mov	r0, r7
 8006218:	47c0      	blx	r8
 800621a:	3001      	adds	r0, #1
 800621c:	d0e6      	beq.n	80061ec <_printf_common+0xa4>
 800621e:	3601      	adds	r6, #1
 8006220:	e7d9      	b.n	80061d6 <_printf_common+0x8e>
	...

08006224 <_printf_i>:
 8006224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	7e0f      	ldrb	r7, [r1, #24]
 800622a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800622c:	2f78      	cmp	r7, #120	; 0x78
 800622e:	4691      	mov	r9, r2
 8006230:	4680      	mov	r8, r0
 8006232:	460c      	mov	r4, r1
 8006234:	469a      	mov	sl, r3
 8006236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800623a:	d807      	bhi.n	800624c <_printf_i+0x28>
 800623c:	2f62      	cmp	r7, #98	; 0x62
 800623e:	d80a      	bhi.n	8006256 <_printf_i+0x32>
 8006240:	2f00      	cmp	r7, #0
 8006242:	f000 80d4 	beq.w	80063ee <_printf_i+0x1ca>
 8006246:	2f58      	cmp	r7, #88	; 0x58
 8006248:	f000 80c0 	beq.w	80063cc <_printf_i+0x1a8>
 800624c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006254:	e03a      	b.n	80062cc <_printf_i+0xa8>
 8006256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800625a:	2b15      	cmp	r3, #21
 800625c:	d8f6      	bhi.n	800624c <_printf_i+0x28>
 800625e:	a101      	add	r1, pc, #4	; (adr r1, 8006264 <_printf_i+0x40>)
 8006260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006264:	080062bd 	.word	0x080062bd
 8006268:	080062d1 	.word	0x080062d1
 800626c:	0800624d 	.word	0x0800624d
 8006270:	0800624d 	.word	0x0800624d
 8006274:	0800624d 	.word	0x0800624d
 8006278:	0800624d 	.word	0x0800624d
 800627c:	080062d1 	.word	0x080062d1
 8006280:	0800624d 	.word	0x0800624d
 8006284:	0800624d 	.word	0x0800624d
 8006288:	0800624d 	.word	0x0800624d
 800628c:	0800624d 	.word	0x0800624d
 8006290:	080063d5 	.word	0x080063d5
 8006294:	080062fd 	.word	0x080062fd
 8006298:	0800638f 	.word	0x0800638f
 800629c:	0800624d 	.word	0x0800624d
 80062a0:	0800624d 	.word	0x0800624d
 80062a4:	080063f7 	.word	0x080063f7
 80062a8:	0800624d 	.word	0x0800624d
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	0800624d 	.word	0x0800624d
 80062b4:	0800624d 	.word	0x0800624d
 80062b8:	08006397 	.word	0x08006397
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	1d1a      	adds	r2, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	602a      	str	r2, [r5, #0]
 80062c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062cc:	2301      	movs	r3, #1
 80062ce:	e09f      	b.n	8006410 <_printf_i+0x1ec>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	0607      	lsls	r7, r0, #24
 80062d6:	f103 0104 	add.w	r1, r3, #4
 80062da:	6029      	str	r1, [r5, #0]
 80062dc:	d501      	bpl.n	80062e2 <_printf_i+0xbe>
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	e003      	b.n	80062ea <_printf_i+0xc6>
 80062e2:	0646      	lsls	r6, r0, #25
 80062e4:	d5fb      	bpl.n	80062de <_printf_i+0xba>
 80062e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062ea:	2e00      	cmp	r6, #0
 80062ec:	da03      	bge.n	80062f6 <_printf_i+0xd2>
 80062ee:	232d      	movs	r3, #45	; 0x2d
 80062f0:	4276      	negs	r6, r6
 80062f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f6:	485a      	ldr	r0, [pc, #360]	; (8006460 <_printf_i+0x23c>)
 80062f8:	230a      	movs	r3, #10
 80062fa:	e012      	b.n	8006322 <_printf_i+0xfe>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	6029      	str	r1, [r5, #0]
 8006304:	0605      	lsls	r5, r0, #24
 8006306:	d501      	bpl.n	800630c <_printf_i+0xe8>
 8006308:	681e      	ldr	r6, [r3, #0]
 800630a:	e002      	b.n	8006312 <_printf_i+0xee>
 800630c:	0641      	lsls	r1, r0, #25
 800630e:	d5fb      	bpl.n	8006308 <_printf_i+0xe4>
 8006310:	881e      	ldrh	r6, [r3, #0]
 8006312:	4853      	ldr	r0, [pc, #332]	; (8006460 <_printf_i+0x23c>)
 8006314:	2f6f      	cmp	r7, #111	; 0x6f
 8006316:	bf0c      	ite	eq
 8006318:	2308      	moveq	r3, #8
 800631a:	230a      	movne	r3, #10
 800631c:	2100      	movs	r1, #0
 800631e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006322:	6865      	ldr	r5, [r4, #4]
 8006324:	60a5      	str	r5, [r4, #8]
 8006326:	2d00      	cmp	r5, #0
 8006328:	bfa2      	ittt	ge
 800632a:	6821      	ldrge	r1, [r4, #0]
 800632c:	f021 0104 	bicge.w	r1, r1, #4
 8006330:	6021      	strge	r1, [r4, #0]
 8006332:	b90e      	cbnz	r6, 8006338 <_printf_i+0x114>
 8006334:	2d00      	cmp	r5, #0
 8006336:	d04b      	beq.n	80063d0 <_printf_i+0x1ac>
 8006338:	4615      	mov	r5, r2
 800633a:	fbb6 f1f3 	udiv	r1, r6, r3
 800633e:	fb03 6711 	mls	r7, r3, r1, r6
 8006342:	5dc7      	ldrb	r7, [r0, r7]
 8006344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006348:	4637      	mov	r7, r6
 800634a:	42bb      	cmp	r3, r7
 800634c:	460e      	mov	r6, r1
 800634e:	d9f4      	bls.n	800633a <_printf_i+0x116>
 8006350:	2b08      	cmp	r3, #8
 8006352:	d10b      	bne.n	800636c <_printf_i+0x148>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07de      	lsls	r6, r3, #31
 8006358:	d508      	bpl.n	800636c <_printf_i+0x148>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	6861      	ldr	r1, [r4, #4]
 800635e:	4299      	cmp	r1, r3
 8006360:	bfde      	ittt	le
 8006362:	2330      	movle	r3, #48	; 0x30
 8006364:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800636c:	1b52      	subs	r2, r2, r5
 800636e:	6122      	str	r2, [r4, #16]
 8006370:	f8cd a000 	str.w	sl, [sp]
 8006374:	464b      	mov	r3, r9
 8006376:	aa03      	add	r2, sp, #12
 8006378:	4621      	mov	r1, r4
 800637a:	4640      	mov	r0, r8
 800637c:	f7ff fee4 	bl	8006148 <_printf_common>
 8006380:	3001      	adds	r0, #1
 8006382:	d14a      	bne.n	800641a <_printf_i+0x1f6>
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	b004      	add	sp, #16
 800638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	f043 0320 	orr.w	r3, r3, #32
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	4833      	ldr	r0, [pc, #204]	; (8006464 <_printf_i+0x240>)
 8006398:	2778      	movs	r7, #120	; 0x78
 800639a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	6829      	ldr	r1, [r5, #0]
 80063a2:	061f      	lsls	r7, r3, #24
 80063a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80063a8:	d402      	bmi.n	80063b0 <_printf_i+0x18c>
 80063aa:	065f      	lsls	r7, r3, #25
 80063ac:	bf48      	it	mi
 80063ae:	b2b6      	uxthmi	r6, r6
 80063b0:	07df      	lsls	r7, r3, #31
 80063b2:	bf48      	it	mi
 80063b4:	f043 0320 	orrmi.w	r3, r3, #32
 80063b8:	6029      	str	r1, [r5, #0]
 80063ba:	bf48      	it	mi
 80063bc:	6023      	strmi	r3, [r4, #0]
 80063be:	b91e      	cbnz	r6, 80063c8 <_printf_i+0x1a4>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	f023 0320 	bic.w	r3, r3, #32
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	2310      	movs	r3, #16
 80063ca:	e7a7      	b.n	800631c <_printf_i+0xf8>
 80063cc:	4824      	ldr	r0, [pc, #144]	; (8006460 <_printf_i+0x23c>)
 80063ce:	e7e4      	b.n	800639a <_printf_i+0x176>
 80063d0:	4615      	mov	r5, r2
 80063d2:	e7bd      	b.n	8006350 <_printf_i+0x12c>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	6826      	ldr	r6, [r4, #0]
 80063d8:	6961      	ldr	r1, [r4, #20]
 80063da:	1d18      	adds	r0, r3, #4
 80063dc:	6028      	str	r0, [r5, #0]
 80063de:	0635      	lsls	r5, r6, #24
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	d501      	bpl.n	80063e8 <_printf_i+0x1c4>
 80063e4:	6019      	str	r1, [r3, #0]
 80063e6:	e002      	b.n	80063ee <_printf_i+0x1ca>
 80063e8:	0670      	lsls	r0, r6, #25
 80063ea:	d5fb      	bpl.n	80063e4 <_printf_i+0x1c0>
 80063ec:	8019      	strh	r1, [r3, #0]
 80063ee:	2300      	movs	r3, #0
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	4615      	mov	r5, r2
 80063f4:	e7bc      	b.n	8006370 <_printf_i+0x14c>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	2100      	movs	r1, #0
 8006402:	4628      	mov	r0, r5
 8006404:	f7f9 fefc 	bl	8000200 <memchr>
 8006408:	b108      	cbz	r0, 800640e <_printf_i+0x1ea>
 800640a:	1b40      	subs	r0, r0, r5
 800640c:	6060      	str	r0, [r4, #4]
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	2300      	movs	r3, #0
 8006414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006418:	e7aa      	b.n	8006370 <_printf_i+0x14c>
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	462a      	mov	r2, r5
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	47d0      	blx	sl
 8006424:	3001      	adds	r0, #1
 8006426:	d0ad      	beq.n	8006384 <_printf_i+0x160>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	079b      	lsls	r3, r3, #30
 800642c:	d413      	bmi.n	8006456 <_printf_i+0x232>
 800642e:	68e0      	ldr	r0, [r4, #12]
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	4298      	cmp	r0, r3
 8006434:	bfb8      	it	lt
 8006436:	4618      	movlt	r0, r3
 8006438:	e7a6      	b.n	8006388 <_printf_i+0x164>
 800643a:	2301      	movs	r3, #1
 800643c:	4632      	mov	r2, r6
 800643e:	4649      	mov	r1, r9
 8006440:	4640      	mov	r0, r8
 8006442:	47d0      	blx	sl
 8006444:	3001      	adds	r0, #1
 8006446:	d09d      	beq.n	8006384 <_printf_i+0x160>
 8006448:	3501      	adds	r5, #1
 800644a:	68e3      	ldr	r3, [r4, #12]
 800644c:	9903      	ldr	r1, [sp, #12]
 800644e:	1a5b      	subs	r3, r3, r1
 8006450:	42ab      	cmp	r3, r5
 8006452:	dcf2      	bgt.n	800643a <_printf_i+0x216>
 8006454:	e7eb      	b.n	800642e <_printf_i+0x20a>
 8006456:	2500      	movs	r5, #0
 8006458:	f104 0619 	add.w	r6, r4, #25
 800645c:	e7f5      	b.n	800644a <_printf_i+0x226>
 800645e:	bf00      	nop
 8006460:	08008d3b 	.word	0x08008d3b
 8006464:	08008d4c 	.word	0x08008d4c

08006468 <std>:
 8006468:	2300      	movs	r3, #0
 800646a:	b510      	push	{r4, lr}
 800646c:	4604      	mov	r4, r0
 800646e:	e9c0 3300 	strd	r3, r3, [r0]
 8006472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006476:	6083      	str	r3, [r0, #8]
 8006478:	8181      	strh	r1, [r0, #12]
 800647a:	6643      	str	r3, [r0, #100]	; 0x64
 800647c:	81c2      	strh	r2, [r0, #14]
 800647e:	6183      	str	r3, [r0, #24]
 8006480:	4619      	mov	r1, r3
 8006482:	2208      	movs	r2, #8
 8006484:	305c      	adds	r0, #92	; 0x5c
 8006486:	f000 fa17 	bl	80068b8 <memset>
 800648a:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <std+0x58>)
 800648c:	6263      	str	r3, [r4, #36]	; 0x24
 800648e:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <std+0x5c>)
 8006490:	62a3      	str	r3, [r4, #40]	; 0x28
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <std+0x60>)
 8006494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <std+0x64>)
 8006498:	6323      	str	r3, [r4, #48]	; 0x30
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <std+0x68>)
 800649c:	6224      	str	r4, [r4, #32]
 800649e:	429c      	cmp	r4, r3
 80064a0:	d006      	beq.n	80064b0 <std+0x48>
 80064a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064a6:	4294      	cmp	r4, r2
 80064a8:	d002      	beq.n	80064b0 <std+0x48>
 80064aa:	33d0      	adds	r3, #208	; 0xd0
 80064ac:	429c      	cmp	r4, r3
 80064ae:	d105      	bne.n	80064bc <std+0x54>
 80064b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	f000 bad6 	b.w	8006a68 <__retarget_lock_init_recursive>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	08006709 	.word	0x08006709
 80064c4:	0800672b 	.word	0x0800672b
 80064c8:	08006763 	.word	0x08006763
 80064cc:	08006787 	.word	0x08006787
 80064d0:	20000574 	.word	0x20000574

080064d4 <stdio_exit_handler>:
 80064d4:	4a02      	ldr	r2, [pc, #8]	; (80064e0 <stdio_exit_handler+0xc>)
 80064d6:	4903      	ldr	r1, [pc, #12]	; (80064e4 <stdio_exit_handler+0x10>)
 80064d8:	4803      	ldr	r0, [pc, #12]	; (80064e8 <stdio_exit_handler+0x14>)
 80064da:	f000 b869 	b.w	80065b0 <_fwalk_sglue>
 80064de:	bf00      	nop
 80064e0:	20000010 	.word	0x20000010
 80064e4:	080086e1 	.word	0x080086e1
 80064e8:	2000001c 	.word	0x2000001c

080064ec <cleanup_stdio>:
 80064ec:	6841      	ldr	r1, [r0, #4]
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <cleanup_stdio+0x34>)
 80064f0:	4299      	cmp	r1, r3
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	d001      	beq.n	80064fc <cleanup_stdio+0x10>
 80064f8:	f002 f8f2 	bl	80086e0 <_fflush_r>
 80064fc:	68a1      	ldr	r1, [r4, #8]
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <cleanup_stdio+0x38>)
 8006500:	4299      	cmp	r1, r3
 8006502:	d002      	beq.n	800650a <cleanup_stdio+0x1e>
 8006504:	4620      	mov	r0, r4
 8006506:	f002 f8eb 	bl	80086e0 <_fflush_r>
 800650a:	68e1      	ldr	r1, [r4, #12]
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <cleanup_stdio+0x3c>)
 800650e:	4299      	cmp	r1, r3
 8006510:	d004      	beq.n	800651c <cleanup_stdio+0x30>
 8006512:	4620      	mov	r0, r4
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006518:	f002 b8e2 	b.w	80086e0 <_fflush_r>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	bf00      	nop
 8006520:	20000574 	.word	0x20000574
 8006524:	200005dc 	.word	0x200005dc
 8006528:	20000644 	.word	0x20000644

0800652c <global_stdio_init.part.0>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <global_stdio_init.part.0+0x30>)
 8006530:	4c0b      	ldr	r4, [pc, #44]	; (8006560 <global_stdio_init.part.0+0x34>)
 8006532:	4a0c      	ldr	r2, [pc, #48]	; (8006564 <global_stdio_init.part.0+0x38>)
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	4620      	mov	r0, r4
 8006538:	2200      	movs	r2, #0
 800653a:	2104      	movs	r1, #4
 800653c:	f7ff ff94 	bl	8006468 <std>
 8006540:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006544:	2201      	movs	r2, #1
 8006546:	2109      	movs	r1, #9
 8006548:	f7ff ff8e 	bl	8006468 <std>
 800654c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006550:	2202      	movs	r2, #2
 8006552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006556:	2112      	movs	r1, #18
 8006558:	f7ff bf86 	b.w	8006468 <std>
 800655c:	200006ac 	.word	0x200006ac
 8006560:	20000574 	.word	0x20000574
 8006564:	080064d5 	.word	0x080064d5

08006568 <__sfp_lock_acquire>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__sfp_lock_acquire+0x8>)
 800656a:	f000 ba7e 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	200006b5 	.word	0x200006b5

08006574 <__sfp_lock_release>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__sfp_lock_release+0x8>)
 8006576:	f000 ba79 	b.w	8006a6c <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	200006b5 	.word	0x200006b5

08006580 <__sinit>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	f7ff fff0 	bl	8006568 <__sfp_lock_acquire>
 8006588:	6a23      	ldr	r3, [r4, #32]
 800658a:	b11b      	cbz	r3, 8006594 <__sinit+0x14>
 800658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006590:	f7ff bff0 	b.w	8006574 <__sfp_lock_release>
 8006594:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <__sinit+0x28>)
 8006596:	6223      	str	r3, [r4, #32]
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <__sinit+0x2c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f5      	bne.n	800658c <__sinit+0xc>
 80065a0:	f7ff ffc4 	bl	800652c <global_stdio_init.part.0>
 80065a4:	e7f2      	b.n	800658c <__sinit+0xc>
 80065a6:	bf00      	nop
 80065a8:	080064ed 	.word	0x080064ed
 80065ac:	200006ac 	.word	0x200006ac

080065b0 <_fwalk_sglue>:
 80065b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	4607      	mov	r7, r0
 80065b6:	4688      	mov	r8, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	2600      	movs	r6, #0
 80065bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065c0:	f1b9 0901 	subs.w	r9, r9, #1
 80065c4:	d505      	bpl.n	80065d2 <_fwalk_sglue+0x22>
 80065c6:	6824      	ldr	r4, [r4, #0]
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	d1f7      	bne.n	80065bc <_fwalk_sglue+0xc>
 80065cc:	4630      	mov	r0, r6
 80065ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d907      	bls.n	80065e8 <_fwalk_sglue+0x38>
 80065d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065dc:	3301      	adds	r3, #1
 80065de:	d003      	beq.n	80065e8 <_fwalk_sglue+0x38>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	4306      	orrs	r6, r0
 80065e8:	3568      	adds	r5, #104	; 0x68
 80065ea:	e7e9      	b.n	80065c0 <_fwalk_sglue+0x10>

080065ec <iprintf>:
 80065ec:	b40f      	push	{r0, r1, r2, r3}
 80065ee:	b507      	push	{r0, r1, r2, lr}
 80065f0:	4906      	ldr	r1, [pc, #24]	; (800660c <iprintf+0x20>)
 80065f2:	ab04      	add	r3, sp, #16
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fa:	6881      	ldr	r1, [r0, #8]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	f001 fecf 	bl	80083a0 <_vfiprintf_r>
 8006602:	b003      	add	sp, #12
 8006604:	f85d eb04 	ldr.w	lr, [sp], #4
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	20000068 	.word	0x20000068

08006610 <_puts_r>:
 8006610:	6a03      	ldr	r3, [r0, #32]
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	6884      	ldr	r4, [r0, #8]
 8006616:	4605      	mov	r5, r0
 8006618:	460e      	mov	r6, r1
 800661a:	b90b      	cbnz	r3, 8006620 <_puts_r+0x10>
 800661c:	f7ff ffb0 	bl	8006580 <__sinit>
 8006620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006622:	07db      	lsls	r3, r3, #31
 8006624:	d405      	bmi.n	8006632 <_puts_r+0x22>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	0598      	lsls	r0, r3, #22
 800662a:	d402      	bmi.n	8006632 <_puts_r+0x22>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 fa1c 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	0719      	lsls	r1, r3, #28
 8006636:	d513      	bpl.n	8006660 <_puts_r+0x50>
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	b18b      	cbz	r3, 8006660 <_puts_r+0x50>
 800663c:	3e01      	subs	r6, #1
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006644:	3b01      	subs	r3, #1
 8006646:	60a3      	str	r3, [r4, #8]
 8006648:	b9e9      	cbnz	r1, 8006686 <_puts_r+0x76>
 800664a:	2b00      	cmp	r3, #0
 800664c:	da2e      	bge.n	80066ac <_puts_r+0x9c>
 800664e:	4622      	mov	r2, r4
 8006650:	210a      	movs	r1, #10
 8006652:	4628      	mov	r0, r5
 8006654:	f000 f89b 	bl	800678e <__swbuf_r>
 8006658:	3001      	adds	r0, #1
 800665a:	d007      	beq.n	800666c <_puts_r+0x5c>
 800665c:	250a      	movs	r5, #10
 800665e:	e007      	b.n	8006670 <_puts_r+0x60>
 8006660:	4621      	mov	r1, r4
 8006662:	4628      	mov	r0, r5
 8006664:	f000 f8d0 	bl	8006808 <__swsetup_r>
 8006668:	2800      	cmp	r0, #0
 800666a:	d0e7      	beq.n	800663c <_puts_r+0x2c>
 800666c:	f04f 35ff 	mov.w	r5, #4294967295
 8006670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006672:	07da      	lsls	r2, r3, #31
 8006674:	d405      	bmi.n	8006682 <_puts_r+0x72>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	059b      	lsls	r3, r3, #22
 800667a:	d402      	bmi.n	8006682 <_puts_r+0x72>
 800667c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800667e:	f000 f9f5 	bl	8006a6c <__retarget_lock_release_recursive>
 8006682:	4628      	mov	r0, r5
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	2b00      	cmp	r3, #0
 8006688:	da04      	bge.n	8006694 <_puts_r+0x84>
 800668a:	69a2      	ldr	r2, [r4, #24]
 800668c:	429a      	cmp	r2, r3
 800668e:	dc06      	bgt.n	800669e <_puts_r+0x8e>
 8006690:	290a      	cmp	r1, #10
 8006692:	d004      	beq.n	800669e <_puts_r+0x8e>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	7019      	strb	r1, [r3, #0]
 800669c:	e7cf      	b.n	800663e <_puts_r+0x2e>
 800669e:	4622      	mov	r2, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 f874 	bl	800678e <__swbuf_r>
 80066a6:	3001      	adds	r0, #1
 80066a8:	d1c9      	bne.n	800663e <_puts_r+0x2e>
 80066aa:	e7df      	b.n	800666c <_puts_r+0x5c>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	250a      	movs	r5, #10
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	6022      	str	r2, [r4, #0]
 80066b4:	701d      	strb	r5, [r3, #0]
 80066b6:	e7db      	b.n	8006670 <_puts_r+0x60>

080066b8 <puts>:
 80066b8:	4b02      	ldr	r3, [pc, #8]	; (80066c4 <puts+0xc>)
 80066ba:	4601      	mov	r1, r0
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	f7ff bfa7 	b.w	8006610 <_puts_r>
 80066c2:	bf00      	nop
 80066c4:	20000068 	.word	0x20000068

080066c8 <siprintf>:
 80066c8:	b40e      	push	{r1, r2, r3}
 80066ca:	b500      	push	{lr}
 80066cc:	b09c      	sub	sp, #112	; 0x70
 80066ce:	ab1d      	add	r3, sp, #116	; 0x74
 80066d0:	9002      	str	r0, [sp, #8]
 80066d2:	9006      	str	r0, [sp, #24]
 80066d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066d8:	4809      	ldr	r0, [pc, #36]	; (8006700 <siprintf+0x38>)
 80066da:	9107      	str	r1, [sp, #28]
 80066dc:	9104      	str	r1, [sp, #16]
 80066de:	4909      	ldr	r1, [pc, #36]	; (8006704 <siprintf+0x3c>)
 80066e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066e4:	9105      	str	r1, [sp, #20]
 80066e6:	6800      	ldr	r0, [r0, #0]
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	a902      	add	r1, sp, #8
 80066ec:	f001 fd30 	bl	8008150 <_svfiprintf_r>
 80066f0:	9b02      	ldr	r3, [sp, #8]
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	b01c      	add	sp, #112	; 0x70
 80066f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066fc:	b003      	add	sp, #12
 80066fe:	4770      	bx	lr
 8006700:	20000068 	.word	0x20000068
 8006704:	ffff0208 	.word	0xffff0208

08006708 <__sread>:
 8006708:	b510      	push	{r4, lr}
 800670a:	460c      	mov	r4, r1
 800670c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006710:	f000 f95c 	bl	80069cc <_read_r>
 8006714:	2800      	cmp	r0, #0
 8006716:	bfab      	itete	ge
 8006718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800671a:	89a3      	ldrhlt	r3, [r4, #12]
 800671c:	181b      	addge	r3, r3, r0
 800671e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006722:	bfac      	ite	ge
 8006724:	6563      	strge	r3, [r4, #84]	; 0x54
 8006726:	81a3      	strhlt	r3, [r4, #12]
 8006728:	bd10      	pop	{r4, pc}

0800672a <__swrite>:
 800672a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672e:	461f      	mov	r7, r3
 8006730:	898b      	ldrh	r3, [r1, #12]
 8006732:	05db      	lsls	r3, r3, #23
 8006734:	4605      	mov	r5, r0
 8006736:	460c      	mov	r4, r1
 8006738:	4616      	mov	r6, r2
 800673a:	d505      	bpl.n	8006748 <__swrite+0x1e>
 800673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006740:	2302      	movs	r3, #2
 8006742:	2200      	movs	r2, #0
 8006744:	f000 f930 	bl	80069a8 <_lseek_r>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800674e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	4632      	mov	r2, r6
 8006756:	463b      	mov	r3, r7
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800675e:	f000 b947 	b.w	80069f0 <_write_r>

08006762 <__sseek>:
 8006762:	b510      	push	{r4, lr}
 8006764:	460c      	mov	r4, r1
 8006766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800676a:	f000 f91d 	bl	80069a8 <_lseek_r>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	bf15      	itete	ne
 8006774:	6560      	strne	r0, [r4, #84]	; 0x54
 8006776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800677a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800677e:	81a3      	strheq	r3, [r4, #12]
 8006780:	bf18      	it	ne
 8006782:	81a3      	strhne	r3, [r4, #12]
 8006784:	bd10      	pop	{r4, pc}

08006786 <__sclose>:
 8006786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678a:	f000 b8fd 	b.w	8006988 <_close_r>

0800678e <__swbuf_r>:
 800678e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006790:	460e      	mov	r6, r1
 8006792:	4614      	mov	r4, r2
 8006794:	4605      	mov	r5, r0
 8006796:	b118      	cbz	r0, 80067a0 <__swbuf_r+0x12>
 8006798:	6a03      	ldr	r3, [r0, #32]
 800679a:	b90b      	cbnz	r3, 80067a0 <__swbuf_r+0x12>
 800679c:	f7ff fef0 	bl	8006580 <__sinit>
 80067a0:	69a3      	ldr	r3, [r4, #24]
 80067a2:	60a3      	str	r3, [r4, #8]
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	071a      	lsls	r2, r3, #28
 80067a8:	d525      	bpl.n	80067f6 <__swbuf_r+0x68>
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	b31b      	cbz	r3, 80067f6 <__swbuf_r+0x68>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	6922      	ldr	r2, [r4, #16]
 80067b2:	1a98      	subs	r0, r3, r2
 80067b4:	6963      	ldr	r3, [r4, #20]
 80067b6:	b2f6      	uxtb	r6, r6
 80067b8:	4283      	cmp	r3, r0
 80067ba:	4637      	mov	r7, r6
 80067bc:	dc04      	bgt.n	80067c8 <__swbuf_r+0x3a>
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f001 ff8d 	bl	80086e0 <_fflush_r>
 80067c6:	b9e0      	cbnz	r0, 8006802 <__swbuf_r+0x74>
 80067c8:	68a3      	ldr	r3, [r4, #8]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	60a3      	str	r3, [r4, #8]
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	6022      	str	r2, [r4, #0]
 80067d4:	701e      	strb	r6, [r3, #0]
 80067d6:	6962      	ldr	r2, [r4, #20]
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	429a      	cmp	r2, r3
 80067dc:	d004      	beq.n	80067e8 <__swbuf_r+0x5a>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	07db      	lsls	r3, r3, #31
 80067e2:	d506      	bpl.n	80067f2 <__swbuf_r+0x64>
 80067e4:	2e0a      	cmp	r6, #10
 80067e6:	d104      	bne.n	80067f2 <__swbuf_r+0x64>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f001 ff78 	bl	80086e0 <_fflush_r>
 80067f0:	b938      	cbnz	r0, 8006802 <__swbuf_r+0x74>
 80067f2:	4638      	mov	r0, r7
 80067f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 f805 	bl	8006808 <__swsetup_r>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0d5      	beq.n	80067ae <__swbuf_r+0x20>
 8006802:	f04f 37ff 	mov.w	r7, #4294967295
 8006806:	e7f4      	b.n	80067f2 <__swbuf_r+0x64>

08006808 <__swsetup_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4b2a      	ldr	r3, [pc, #168]	; (80068b4 <__swsetup_r+0xac>)
 800680c:	4605      	mov	r5, r0
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	460c      	mov	r4, r1
 8006812:	b118      	cbz	r0, 800681c <__swsetup_r+0x14>
 8006814:	6a03      	ldr	r3, [r0, #32]
 8006816:	b90b      	cbnz	r3, 800681c <__swsetup_r+0x14>
 8006818:	f7ff feb2 	bl	8006580 <__sinit>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006822:	0718      	lsls	r0, r3, #28
 8006824:	d422      	bmi.n	800686c <__swsetup_r+0x64>
 8006826:	06d9      	lsls	r1, r3, #27
 8006828:	d407      	bmi.n	800683a <__swsetup_r+0x32>
 800682a:	2309      	movs	r3, #9
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	e034      	b.n	80068a4 <__swsetup_r+0x9c>
 800683a:	0758      	lsls	r0, r3, #29
 800683c:	d512      	bpl.n	8006864 <__swsetup_r+0x5c>
 800683e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006840:	b141      	cbz	r1, 8006854 <__swsetup_r+0x4c>
 8006842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006846:	4299      	cmp	r1, r3
 8006848:	d002      	beq.n	8006850 <__swsetup_r+0x48>
 800684a:	4628      	mov	r0, r5
 800684c:	f000 ffaa 	bl	80077a4 <_free_r>
 8006850:	2300      	movs	r3, #0
 8006852:	6363      	str	r3, [r4, #52]	; 0x34
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	2300      	movs	r3, #0
 800685e:	6063      	str	r3, [r4, #4]
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	6023      	str	r3, [r4, #0]
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f043 0308 	orr.w	r3, r3, #8
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	b94b      	cbnz	r3, 8006884 <__swsetup_r+0x7c>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687a:	d003      	beq.n	8006884 <__swsetup_r+0x7c>
 800687c:	4621      	mov	r1, r4
 800687e:	4628      	mov	r0, r5
 8006880:	f001 ff8e 	bl	80087a0 <__smakebuf_r>
 8006884:	89a0      	ldrh	r0, [r4, #12]
 8006886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800688a:	f010 0301 	ands.w	r3, r0, #1
 800688e:	d00a      	beq.n	80068a6 <__swsetup_r+0x9e>
 8006890:	2300      	movs	r3, #0
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	6963      	ldr	r3, [r4, #20]
 8006896:	425b      	negs	r3, r3
 8006898:	61a3      	str	r3, [r4, #24]
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	b943      	cbnz	r3, 80068b0 <__swsetup_r+0xa8>
 800689e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068a2:	d1c4      	bne.n	800682e <__swsetup_r+0x26>
 80068a4:	bd38      	pop	{r3, r4, r5, pc}
 80068a6:	0781      	lsls	r1, r0, #30
 80068a8:	bf58      	it	pl
 80068aa:	6963      	ldrpl	r3, [r4, #20]
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	e7f4      	b.n	800689a <__swsetup_r+0x92>
 80068b0:	2000      	movs	r0, #0
 80068b2:	e7f7      	b.n	80068a4 <__swsetup_r+0x9c>
 80068b4:	20000068 	.word	0x20000068

080068b8 <memset>:
 80068b8:	4402      	add	r2, r0
 80068ba:	4603      	mov	r3, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <strtok>:
 80068c8:	4b16      	ldr	r3, [pc, #88]	; (8006924 <strtok+0x5c>)
 80068ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068cc:	681e      	ldr	r6, [r3, #0]
 80068ce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80068d0:	4605      	mov	r5, r0
 80068d2:	b9fc      	cbnz	r4, 8006914 <strtok+0x4c>
 80068d4:	2050      	movs	r0, #80	; 0x50
 80068d6:	9101      	str	r1, [sp, #4]
 80068d8:	f000 ffb0 	bl	800783c <malloc>
 80068dc:	9901      	ldr	r1, [sp, #4]
 80068de:	6470      	str	r0, [r6, #68]	; 0x44
 80068e0:	4602      	mov	r2, r0
 80068e2:	b920      	cbnz	r0, 80068ee <strtok+0x26>
 80068e4:	4b10      	ldr	r3, [pc, #64]	; (8006928 <strtok+0x60>)
 80068e6:	4811      	ldr	r0, [pc, #68]	; (800692c <strtok+0x64>)
 80068e8:	215b      	movs	r1, #91	; 0x5b
 80068ea:	f000 f8c1 	bl	8006a70 <__assert_func>
 80068ee:	e9c0 4400 	strd	r4, r4, [r0]
 80068f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80068fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006902:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006906:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800690a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800690e:	6184      	str	r4, [r0, #24]
 8006910:	7704      	strb	r4, [r0, #28]
 8006912:	6244      	str	r4, [r0, #36]	; 0x24
 8006914:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006916:	2301      	movs	r3, #1
 8006918:	4628      	mov	r0, r5
 800691a:	b002      	add	sp, #8
 800691c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006920:	f000 b806 	b.w	8006930 <__strtok_r>
 8006924:	20000068 	.word	0x20000068
 8006928:	08008d5d 	.word	0x08008d5d
 800692c:	08008d74 	.word	0x08008d74

08006930 <__strtok_r>:
 8006930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006932:	b908      	cbnz	r0, 8006938 <__strtok_r+0x8>
 8006934:	6810      	ldr	r0, [r2, #0]
 8006936:	b188      	cbz	r0, 800695c <__strtok_r+0x2c>
 8006938:	4604      	mov	r4, r0
 800693a:	4620      	mov	r0, r4
 800693c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006940:	460f      	mov	r7, r1
 8006942:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006946:	b91e      	cbnz	r6, 8006950 <__strtok_r+0x20>
 8006948:	b965      	cbnz	r5, 8006964 <__strtok_r+0x34>
 800694a:	6015      	str	r5, [r2, #0]
 800694c:	4628      	mov	r0, r5
 800694e:	e005      	b.n	800695c <__strtok_r+0x2c>
 8006950:	42b5      	cmp	r5, r6
 8006952:	d1f6      	bne.n	8006942 <__strtok_r+0x12>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f0      	bne.n	800693a <__strtok_r+0xa>
 8006958:	6014      	str	r4, [r2, #0]
 800695a:	7003      	strb	r3, [r0, #0]
 800695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695e:	461c      	mov	r4, r3
 8006960:	e00c      	b.n	800697c <__strtok_r+0x4c>
 8006962:	b915      	cbnz	r5, 800696a <__strtok_r+0x3a>
 8006964:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006968:	460e      	mov	r6, r1
 800696a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800696e:	42ab      	cmp	r3, r5
 8006970:	d1f7      	bne.n	8006962 <__strtok_r+0x32>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f3      	beq.n	800695e <__strtok_r+0x2e>
 8006976:	2300      	movs	r3, #0
 8006978:	f804 3c01 	strb.w	r3, [r4, #-1]
 800697c:	6014      	str	r4, [r2, #0]
 800697e:	e7ed      	b.n	800695c <__strtok_r+0x2c>

08006980 <_localeconv_r>:
 8006980:	4800      	ldr	r0, [pc, #0]	; (8006984 <_localeconv_r+0x4>)
 8006982:	4770      	bx	lr
 8006984:	2000015c 	.word	0x2000015c

08006988 <_close_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_close_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fb fd6b 	bl	800246e <_close>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_close_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_close_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	200006b0 	.word	0x200006b0

080069a8 <_lseek_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d07      	ldr	r5, [pc, #28]	; (80069c8 <_lseek_r+0x20>)
 80069ac:	4604      	mov	r4, r0
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	602a      	str	r2, [r5, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f7fb fd80 	bl	80024bc <_lseek>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_lseek_r+0x1e>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_lseek_r+0x1e>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	200006b0 	.word	0x200006b0

080069cc <_read_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d07      	ldr	r5, [pc, #28]	; (80069ec <_read_r+0x20>)
 80069d0:	4604      	mov	r4, r0
 80069d2:	4608      	mov	r0, r1
 80069d4:	4611      	mov	r1, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	602a      	str	r2, [r5, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	f7fb fd0e 	bl	80023fc <_read>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_read_r+0x1e>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_read_r+0x1e>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	200006b0 	.word	0x200006b0

080069f0 <_write_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4d07      	ldr	r5, [pc, #28]	; (8006a10 <_write_r+0x20>)
 80069f4:	4604      	mov	r4, r0
 80069f6:	4608      	mov	r0, r1
 80069f8:	4611      	mov	r1, r2
 80069fa:	2200      	movs	r2, #0
 80069fc:	602a      	str	r2, [r5, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f7fb fd19 	bl	8002436 <_write>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_write_r+0x1e>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_write_r+0x1e>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	200006b0 	.word	0x200006b0

08006a14 <__errno>:
 8006a14:	4b01      	ldr	r3, [pc, #4]	; (8006a1c <__errno+0x8>)
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000068 	.word	0x20000068

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4d0d      	ldr	r5, [pc, #52]	; (8006a58 <__libc_init_array+0x38>)
 8006a24:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a26:	1b64      	subs	r4, r4, r5
 8006a28:	10a4      	asrs	r4, r4, #2
 8006a2a:	2600      	movs	r6, #0
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	4d0b      	ldr	r5, [pc, #44]	; (8006a60 <__libc_init_array+0x40>)
 8006a32:	4c0c      	ldr	r4, [pc, #48]	; (8006a64 <__libc_init_array+0x44>)
 8006a34:	f002 f802 	bl	8008a3c <_init>
 8006a38:	1b64      	subs	r4, r4, r5
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	08009000 	.word	0x08009000
 8006a5c:	08009000 	.word	0x08009000
 8006a60:	08009000 	.word	0x08009000
 8006a64:	08009004 	.word	0x08009004

08006a68 <__retarget_lock_init_recursive>:
 8006a68:	4770      	bx	lr

08006a6a <__retarget_lock_acquire_recursive>:
 8006a6a:	4770      	bx	lr

08006a6c <__retarget_lock_release_recursive>:
 8006a6c:	4770      	bx	lr
	...

08006a70 <__assert_func>:
 8006a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a72:	4614      	mov	r4, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <__assert_func+0x2c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	68d8      	ldr	r0, [r3, #12]
 8006a7e:	b14c      	cbz	r4, 8006a94 <__assert_func+0x24>
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <__assert_func+0x30>)
 8006a82:	9100      	str	r1, [sp, #0]
 8006a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a88:	4906      	ldr	r1, [pc, #24]	; (8006aa4 <__assert_func+0x34>)
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	f001 fe50 	bl	8008730 <fiprintf>
 8006a90:	f001 ff1c 	bl	80088cc <abort>
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <__assert_func+0x38>)
 8006a96:	461c      	mov	r4, r3
 8006a98:	e7f3      	b.n	8006a82 <__assert_func+0x12>
 8006a9a:	bf00      	nop
 8006a9c:	20000068 	.word	0x20000068
 8006aa0:	08008dce 	.word	0x08008dce
 8006aa4:	08008ddb 	.word	0x08008ddb
 8006aa8:	08008e09 	.word	0x08008e09

08006aac <quorem>:
 8006aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	6903      	ldr	r3, [r0, #16]
 8006ab2:	690c      	ldr	r4, [r1, #16]
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	db7e      	blt.n	8006bb8 <quorem+0x10c>
 8006aba:	3c01      	subs	r4, #1
 8006abc:	f101 0814 	add.w	r8, r1, #20
 8006ac0:	f100 0514 	add.w	r5, r0, #20
 8006ac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ada:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ade:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ae2:	d331      	bcc.n	8006b48 <quorem+0x9c>
 8006ae4:	f04f 0e00 	mov.w	lr, #0
 8006ae8:	4640      	mov	r0, r8
 8006aea:	46ac      	mov	ip, r5
 8006aec:	46f2      	mov	sl, lr
 8006aee:	f850 2b04 	ldr.w	r2, [r0], #4
 8006af2:	b293      	uxth	r3, r2
 8006af4:	fb06 e303 	mla	r3, r6, r3, lr
 8006af8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006afc:	0c1a      	lsrs	r2, r3, #16
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	ebaa 0303 	sub.w	r3, sl, r3
 8006b04:	f8dc a000 	ldr.w	sl, [ip]
 8006b08:	fa13 f38a 	uxtah	r3, r3, sl
 8006b0c:	fb06 220e 	mla	r2, r6, lr, r2
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b18:	b292      	uxth	r2, r2
 8006b1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b22:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b26:	4581      	cmp	r9, r0
 8006b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b2c:	f84c 3b04 	str.w	r3, [ip], #4
 8006b30:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b34:	d2db      	bcs.n	8006aee <quorem+0x42>
 8006b36:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b3a:	b92b      	cbnz	r3, 8006b48 <quorem+0x9c>
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	3b04      	subs	r3, #4
 8006b40:	429d      	cmp	r5, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	d32c      	bcc.n	8006ba0 <quorem+0xf4>
 8006b46:	613c      	str	r4, [r7, #16]
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f001 f9a7 	bl	8007e9c <__mcmp>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	db22      	blt.n	8006b98 <quorem+0xec>
 8006b52:	3601      	adds	r6, #1
 8006b54:	4629      	mov	r1, r5
 8006b56:	2000      	movs	r0, #0
 8006b58:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b5c:	f8d1 c000 	ldr.w	ip, [r1]
 8006b60:	b293      	uxth	r3, r2
 8006b62:	1ac3      	subs	r3, r0, r3
 8006b64:	0c12      	lsrs	r2, r2, #16
 8006b66:	fa13 f38c 	uxtah	r3, r3, ip
 8006b6a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b78:	45c1      	cmp	r9, r8
 8006b7a:	f841 3b04 	str.w	r3, [r1], #4
 8006b7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b82:	d2e9      	bcs.n	8006b58 <quorem+0xac>
 8006b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b8c:	b922      	cbnz	r2, 8006b98 <quorem+0xec>
 8006b8e:	3b04      	subs	r3, #4
 8006b90:	429d      	cmp	r5, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	d30a      	bcc.n	8006bac <quorem+0x100>
 8006b96:	613c      	str	r4, [r7, #16]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	b003      	add	sp, #12
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	3b04      	subs	r3, #4
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	d1ce      	bne.n	8006b46 <quorem+0x9a>
 8006ba8:	3c01      	subs	r4, #1
 8006baa:	e7c9      	b.n	8006b40 <quorem+0x94>
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	d1f0      	bne.n	8006b96 <quorem+0xea>
 8006bb4:	3c01      	subs	r4, #1
 8006bb6:	e7eb      	b.n	8006b90 <quorem+0xe4>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e7ee      	b.n	8006b9a <quorem+0xee>
 8006bbc:	0000      	movs	r0, r0
	...

08006bc0 <_dtoa_r>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	ed2d 8b04 	vpush	{d8-d9}
 8006bc8:	69c5      	ldr	r5, [r0, #28]
 8006bca:	b093      	sub	sp, #76	; 0x4c
 8006bcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006bd0:	ec57 6b10 	vmov	r6, r7, d0
 8006bd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bd8:	9107      	str	r1, [sp, #28]
 8006bda:	4604      	mov	r4, r0
 8006bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8006bde:	930d      	str	r3, [sp, #52]	; 0x34
 8006be0:	b975      	cbnz	r5, 8006c00 <_dtoa_r+0x40>
 8006be2:	2010      	movs	r0, #16
 8006be4:	f000 fe2a 	bl	800783c <malloc>
 8006be8:	4602      	mov	r2, r0
 8006bea:	61e0      	str	r0, [r4, #28]
 8006bec:	b920      	cbnz	r0, 8006bf8 <_dtoa_r+0x38>
 8006bee:	4bae      	ldr	r3, [pc, #696]	; (8006ea8 <_dtoa_r+0x2e8>)
 8006bf0:	21ef      	movs	r1, #239	; 0xef
 8006bf2:	48ae      	ldr	r0, [pc, #696]	; (8006eac <_dtoa_r+0x2ec>)
 8006bf4:	f7ff ff3c 	bl	8006a70 <__assert_func>
 8006bf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bfc:	6005      	str	r5, [r0, #0]
 8006bfe:	60c5      	str	r5, [r0, #12]
 8006c00:	69e3      	ldr	r3, [r4, #28]
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	b151      	cbz	r1, 8006c1c <_dtoa_r+0x5c>
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	604a      	str	r2, [r1, #4]
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4093      	lsls	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 ff07 	bl	8007a24 <_Bfree>
 8006c16:	69e3      	ldr	r3, [r4, #28]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	1e3b      	subs	r3, r7, #0
 8006c1e:	bfbb      	ittet	lt
 8006c20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c24:	9303      	strlt	r3, [sp, #12]
 8006c26:	2300      	movge	r3, #0
 8006c28:	2201      	movlt	r2, #1
 8006c2a:	bfac      	ite	ge
 8006c2c:	f8c8 3000 	strge.w	r3, [r8]
 8006c30:	f8c8 2000 	strlt.w	r2, [r8]
 8006c34:	4b9e      	ldr	r3, [pc, #632]	; (8006eb0 <_dtoa_r+0x2f0>)
 8006c36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c3a:	ea33 0308 	bics.w	r3, r3, r8
 8006c3e:	d11b      	bne.n	8006c78 <_dtoa_r+0xb8>
 8006c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c4c:	4333      	orrs	r3, r6
 8006c4e:	f000 8593 	beq.w	8007778 <_dtoa_r+0xbb8>
 8006c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c54:	b963      	cbnz	r3, 8006c70 <_dtoa_r+0xb0>
 8006c56:	4b97      	ldr	r3, [pc, #604]	; (8006eb4 <_dtoa_r+0x2f4>)
 8006c58:	e027      	b.n	8006caa <_dtoa_r+0xea>
 8006c5a:	4b97      	ldr	r3, [pc, #604]	; (8006eb8 <_dtoa_r+0x2f8>)
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	9800      	ldr	r0, [sp, #0]
 8006c66:	b013      	add	sp, #76	; 0x4c
 8006c68:	ecbd 8b04 	vpop	{d8-d9}
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c70:	4b90      	ldr	r3, [pc, #576]	; (8006eb4 <_dtoa_r+0x2f4>)
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	3303      	adds	r3, #3
 8006c76:	e7f3      	b.n	8006c60 <_dtoa_r+0xa0>
 8006c78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	ec51 0b17 	vmov	r0, r1, d7
 8006c82:	eeb0 8a47 	vmov.f32	s16, s14
 8006c86:	eef0 8a67 	vmov.f32	s17, s15
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f7f9 ff34 	bl	8000af8 <__aeabi_dcmpeq>
 8006c90:	4681      	mov	r9, r0
 8006c92:	b160      	cbz	r0, 8006cae <_dtoa_r+0xee>
 8006c94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c96:	2301      	movs	r3, #1
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8568 	beq.w	8007772 <_dtoa_r+0xbb2>
 8006ca2:	4b86      	ldr	r3, [pc, #536]	; (8006ebc <_dtoa_r+0x2fc>)
 8006ca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	e7da      	b.n	8006c64 <_dtoa_r+0xa4>
 8006cae:	aa10      	add	r2, sp, #64	; 0x40
 8006cb0:	a911      	add	r1, sp, #68	; 0x44
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8006cb8:	eef0 0a68 	vmov.f32	s1, s17
 8006cbc:	f001 f994 	bl	8007fe8 <__d2b>
 8006cc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006cc4:	4682      	mov	sl, r0
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	d07f      	beq.n	8006dca <_dtoa_r+0x20a>
 8006cca:	ee18 3a90 	vmov	r3, s17
 8006cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cd6:	ec51 0b18 	vmov	r0, r1, d8
 8006cda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ce2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4b75      	ldr	r3, [pc, #468]	; (8006ec0 <_dtoa_r+0x300>)
 8006cec:	f7f9 fae4 	bl	80002b8 <__aeabi_dsub>
 8006cf0:	a367      	add	r3, pc, #412	; (adr r3, 8006e90 <_dtoa_r+0x2d0>)
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f7f9 fc97 	bl	8000628 <__aeabi_dmul>
 8006cfa:	a367      	add	r3, pc, #412	; (adr r3, 8006e98 <_dtoa_r+0x2d8>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fadc 	bl	80002bc <__adddf3>
 8006d04:	4606      	mov	r6, r0
 8006d06:	4628      	mov	r0, r5
 8006d08:	460f      	mov	r7, r1
 8006d0a:	f7f9 fc23 	bl	8000554 <__aeabi_i2d>
 8006d0e:	a364      	add	r3, pc, #400	; (adr r3, 8006ea0 <_dtoa_r+0x2e0>)
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f7f9 fc88 	bl	8000628 <__aeabi_dmul>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4639      	mov	r1, r7
 8006d20:	f7f9 facc 	bl	80002bc <__adddf3>
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	f7f9 ff2e 	bl	8000b88 <__aeabi_d2iz>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4683      	mov	fp, r0
 8006d30:	2300      	movs	r3, #0
 8006d32:	4630      	mov	r0, r6
 8006d34:	4639      	mov	r1, r7
 8006d36:	f7f9 fee9 	bl	8000b0c <__aeabi_dcmplt>
 8006d3a:	b148      	cbz	r0, 8006d50 <_dtoa_r+0x190>
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f7f9 fc09 	bl	8000554 <__aeabi_i2d>
 8006d42:	4632      	mov	r2, r6
 8006d44:	463b      	mov	r3, r7
 8006d46:	f7f9 fed7 	bl	8000af8 <__aeabi_dcmpeq>
 8006d4a:	b908      	cbnz	r0, 8006d50 <_dtoa_r+0x190>
 8006d4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d50:	f1bb 0f16 	cmp.w	fp, #22
 8006d54:	d857      	bhi.n	8006e06 <_dtoa_r+0x246>
 8006d56:	4b5b      	ldr	r3, [pc, #364]	; (8006ec4 <_dtoa_r+0x304>)
 8006d58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	ec51 0b18 	vmov	r0, r1, d8
 8006d64:	f7f9 fed2 	bl	8000b0c <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d04e      	beq.n	8006e0a <_dtoa_r+0x24a>
 8006d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d70:	2300      	movs	r3, #0
 8006d72:	930c      	str	r3, [sp, #48]	; 0x30
 8006d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d76:	1b5b      	subs	r3, r3, r5
 8006d78:	1e5a      	subs	r2, r3, #1
 8006d7a:	bf45      	ittet	mi
 8006d7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d80:	9305      	strmi	r3, [sp, #20]
 8006d82:	2300      	movpl	r3, #0
 8006d84:	2300      	movmi	r3, #0
 8006d86:	9206      	str	r2, [sp, #24]
 8006d88:	bf54      	ite	pl
 8006d8a:	9305      	strpl	r3, [sp, #20]
 8006d8c:	9306      	strmi	r3, [sp, #24]
 8006d8e:	f1bb 0f00 	cmp.w	fp, #0
 8006d92:	db3c      	blt.n	8006e0e <_dtoa_r+0x24e>
 8006d94:	9b06      	ldr	r3, [sp, #24]
 8006d96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006d9a:	445b      	add	r3, fp
 8006d9c:	9306      	str	r3, [sp, #24]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	9b07      	ldr	r3, [sp, #28]
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	d868      	bhi.n	8006e7a <_dtoa_r+0x2ba>
 8006da8:	2b05      	cmp	r3, #5
 8006daa:	bfc4      	itt	gt
 8006dac:	3b04      	subgt	r3, #4
 8006dae:	9307      	strgt	r3, [sp, #28]
 8006db0:	9b07      	ldr	r3, [sp, #28]
 8006db2:	f1a3 0302 	sub.w	r3, r3, #2
 8006db6:	bfcc      	ite	gt
 8006db8:	2500      	movgt	r5, #0
 8006dba:	2501      	movle	r5, #1
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	f200 8085 	bhi.w	8006ecc <_dtoa_r+0x30c>
 8006dc2:	e8df f003 	tbb	[pc, r3]
 8006dc6:	3b2e      	.short	0x3b2e
 8006dc8:	5839      	.short	0x5839
 8006dca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006dce:	441d      	add	r5, r3
 8006dd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	bfc1      	itttt	gt
 8006dd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ddc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006de0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006de4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006de8:	bfd6      	itet	le
 8006dea:	f1c3 0320 	rsble	r3, r3, #32
 8006dee:	ea48 0003 	orrgt.w	r0, r8, r3
 8006df2:	fa06 f003 	lslle.w	r0, r6, r3
 8006df6:	f7f9 fb9d 	bl	8000534 <__aeabi_ui2d>
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e00:	3d01      	subs	r5, #1
 8006e02:	920e      	str	r2, [sp, #56]	; 0x38
 8006e04:	e76f      	b.n	8006ce6 <_dtoa_r+0x126>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e7b3      	b.n	8006d72 <_dtoa_r+0x1b2>
 8006e0a:	900c      	str	r0, [sp, #48]	; 0x30
 8006e0c:	e7b2      	b.n	8006d74 <_dtoa_r+0x1b4>
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	eba3 030b 	sub.w	r3, r3, fp
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	f1cb 0300 	rsb	r3, fp, #0
 8006e1a:	9308      	str	r3, [sp, #32]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e20:	e7bf      	b.n	8006da2 <_dtoa_r+0x1e2>
 8006e22:	2300      	movs	r3, #0
 8006e24:	9309      	str	r3, [sp, #36]	; 0x24
 8006e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dc52      	bgt.n	8006ed2 <_dtoa_r+0x312>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	461a      	mov	r2, r3
 8006e34:	920a      	str	r2, [sp, #40]	; 0x28
 8006e36:	e00b      	b.n	8006e50 <_dtoa_r+0x290>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e7f3      	b.n	8006e24 <_dtoa_r+0x264>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e42:	445b      	add	r3, fp
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	3301      	adds	r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	bfb8      	it	lt
 8006e4e:	2301      	movlt	r3, #1
 8006e50:	69e0      	ldr	r0, [r4, #28]
 8006e52:	2100      	movs	r1, #0
 8006e54:	2204      	movs	r2, #4
 8006e56:	f102 0614 	add.w	r6, r2, #20
 8006e5a:	429e      	cmp	r6, r3
 8006e5c:	d93d      	bls.n	8006eda <_dtoa_r+0x31a>
 8006e5e:	6041      	str	r1, [r0, #4]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fd9f 	bl	80079a4 <_Balloc>
 8006e66:	9000      	str	r0, [sp, #0]
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d139      	bne.n	8006ee0 <_dtoa_r+0x320>
 8006e6c:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <_dtoa_r+0x308>)
 8006e6e:	4602      	mov	r2, r0
 8006e70:	f240 11af 	movw	r1, #431	; 0x1af
 8006e74:	e6bd      	b.n	8006bf2 <_dtoa_r+0x32>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e7e1      	b.n	8006e3e <_dtoa_r+0x27e>
 8006e7a:	2501      	movs	r5, #1
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9307      	str	r3, [sp, #28]
 8006e80:	9509      	str	r5, [sp, #36]	; 0x24
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	9304      	str	r3, [sp, #16]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2312      	movs	r3, #18
 8006e8e:	e7d1      	b.n	8006e34 <_dtoa_r+0x274>
 8006e90:	636f4361 	.word	0x636f4361
 8006e94:	3fd287a7 	.word	0x3fd287a7
 8006e98:	8b60c8b3 	.word	0x8b60c8b3
 8006e9c:	3fc68a28 	.word	0x3fc68a28
 8006ea0:	509f79fb 	.word	0x509f79fb
 8006ea4:	3fd34413 	.word	0x3fd34413
 8006ea8:	08008d5d 	.word	0x08008d5d
 8006eac:	08008e17 	.word	0x08008e17
 8006eb0:	7ff00000 	.word	0x7ff00000
 8006eb4:	08008e13 	.word	0x08008e13
 8006eb8:	08008e0a 	.word	0x08008e0a
 8006ebc:	08008d3a 	.word	0x08008d3a
 8006ec0:	3ff80000 	.word	0x3ff80000
 8006ec4:	08008f08 	.word	0x08008f08
 8006ec8:	08008e6f 	.word	0x08008e6f
 8006ecc:	2301      	movs	r3, #1
 8006ece:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed0:	e7d7      	b.n	8006e82 <_dtoa_r+0x2c2>
 8006ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	9304      	str	r3, [sp, #16]
 8006ed8:	e7ba      	b.n	8006e50 <_dtoa_r+0x290>
 8006eda:	3101      	adds	r1, #1
 8006edc:	0052      	lsls	r2, r2, #1
 8006ede:	e7ba      	b.n	8006e56 <_dtoa_r+0x296>
 8006ee0:	69e3      	ldr	r3, [r4, #28]
 8006ee2:	9a00      	ldr	r2, [sp, #0]
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	2b0e      	cmp	r3, #14
 8006eea:	f200 80a8 	bhi.w	800703e <_dtoa_r+0x47e>
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	f000 80a5 	beq.w	800703e <_dtoa_r+0x47e>
 8006ef4:	f1bb 0f00 	cmp.w	fp, #0
 8006ef8:	dd38      	ble.n	8006f6c <_dtoa_r+0x3ac>
 8006efa:	4bc0      	ldr	r3, [pc, #768]	; (80071fc <_dtoa_r+0x63c>)
 8006efc:	f00b 020f 	and.w	r2, fp, #15
 8006f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f10:	d019      	beq.n	8006f46 <_dtoa_r+0x386>
 8006f12:	4bbb      	ldr	r3, [pc, #748]	; (8007200 <_dtoa_r+0x640>)
 8006f14:	ec51 0b18 	vmov	r0, r1, d8
 8006f18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f1c:	f7f9 fcae 	bl	800087c <__aeabi_ddiv>
 8006f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f24:	f008 080f 	and.w	r8, r8, #15
 8006f28:	2503      	movs	r5, #3
 8006f2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007200 <_dtoa_r+0x640>
 8006f2e:	f1b8 0f00 	cmp.w	r8, #0
 8006f32:	d10a      	bne.n	8006f4a <_dtoa_r+0x38a>
 8006f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	f7f9 fc9e 	bl	800087c <__aeabi_ddiv>
 8006f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f44:	e02b      	b.n	8006f9e <_dtoa_r+0x3de>
 8006f46:	2502      	movs	r5, #2
 8006f48:	e7ef      	b.n	8006f2a <_dtoa_r+0x36a>
 8006f4a:	f018 0f01 	tst.w	r8, #1
 8006f4e:	d008      	beq.n	8006f62 <_dtoa_r+0x3a2>
 8006f50:	4630      	mov	r0, r6
 8006f52:	4639      	mov	r1, r7
 8006f54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f58:	f7f9 fb66 	bl	8000628 <__aeabi_dmul>
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460f      	mov	r7, r1
 8006f62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f66:	f109 0908 	add.w	r9, r9, #8
 8006f6a:	e7e0      	b.n	8006f2e <_dtoa_r+0x36e>
 8006f6c:	f000 809f 	beq.w	80070ae <_dtoa_r+0x4ee>
 8006f70:	f1cb 0600 	rsb	r6, fp, #0
 8006f74:	4ba1      	ldr	r3, [pc, #644]	; (80071fc <_dtoa_r+0x63c>)
 8006f76:	4fa2      	ldr	r7, [pc, #648]	; (8007200 <_dtoa_r+0x640>)
 8006f78:	f006 020f 	and.w	r2, r6, #15
 8006f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	ec51 0b18 	vmov	r0, r1, d8
 8006f88:	f7f9 fb4e 	bl	8000628 <__aeabi_dmul>
 8006f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f90:	1136      	asrs	r6, r6, #4
 8006f92:	2300      	movs	r3, #0
 8006f94:	2502      	movs	r5, #2
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	d17e      	bne.n	8007098 <_dtoa_r+0x4d8>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1d0      	bne.n	8006f40 <_dtoa_r+0x380>
 8006f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fa0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8084 	beq.w	80070b2 <_dtoa_r+0x4f2>
 8006faa:	4b96      	ldr	r3, [pc, #600]	; (8007204 <_dtoa_r+0x644>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fdab 	bl	8000b0c <__aeabi_dcmplt>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d07b      	beq.n	80070b2 <_dtoa_r+0x4f2>
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d078      	beq.n	80070b2 <_dtoa_r+0x4f2>
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	dd39      	ble.n	800703a <_dtoa_r+0x47a>
 8006fc6:	4b90      	ldr	r3, [pc, #576]	; (8007208 <_dtoa_r+0x648>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4640      	mov	r0, r8
 8006fcc:	4649      	mov	r1, r9
 8006fce:	f7f9 fb2b 	bl	8000628 <__aeabi_dmul>
 8006fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd6:	9e01      	ldr	r6, [sp, #4]
 8006fd8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006fdc:	3501      	adds	r5, #1
 8006fde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7f9 fab6 	bl	8000554 <__aeabi_i2d>
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	f7f9 fb1c 	bl	8000628 <__aeabi_dmul>
 8006ff0:	4b86      	ldr	r3, [pc, #536]	; (800720c <_dtoa_r+0x64c>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f7f9 f962 	bl	80002bc <__adddf3>
 8006ff8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007000:	9303      	str	r3, [sp, #12]
 8007002:	2e00      	cmp	r6, #0
 8007004:	d158      	bne.n	80070b8 <_dtoa_r+0x4f8>
 8007006:	4b82      	ldr	r3, [pc, #520]	; (8007210 <_dtoa_r+0x650>)
 8007008:	2200      	movs	r2, #0
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 f953 	bl	80002b8 <__aeabi_dsub>
 8007012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007016:	4680      	mov	r8, r0
 8007018:	4689      	mov	r9, r1
 800701a:	f7f9 fd95 	bl	8000b48 <__aeabi_dcmpgt>
 800701e:	2800      	cmp	r0, #0
 8007020:	f040 8296 	bne.w	8007550 <_dtoa_r+0x990>
 8007024:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007028:	4640      	mov	r0, r8
 800702a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800702e:	4649      	mov	r1, r9
 8007030:	f7f9 fd6c 	bl	8000b0c <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 8289 	bne.w	800754c <_dtoa_r+0x98c>
 800703a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800703e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007040:	2b00      	cmp	r3, #0
 8007042:	f2c0 814e 	blt.w	80072e2 <_dtoa_r+0x722>
 8007046:	f1bb 0f0e 	cmp.w	fp, #14
 800704a:	f300 814a 	bgt.w	80072e2 <_dtoa_r+0x722>
 800704e:	4b6b      	ldr	r3, [pc, #428]	; (80071fc <_dtoa_r+0x63c>)
 8007050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	f280 80dc 	bge.w	8007218 <_dtoa_r+0x658>
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f300 80d8 	bgt.w	8007218 <_dtoa_r+0x658>
 8007068:	f040 826f 	bne.w	800754a <_dtoa_r+0x98a>
 800706c:	4b68      	ldr	r3, [pc, #416]	; (8007210 <_dtoa_r+0x650>)
 800706e:	2200      	movs	r2, #0
 8007070:	4640      	mov	r0, r8
 8007072:	4649      	mov	r1, r9
 8007074:	f7f9 fad8 	bl	8000628 <__aeabi_dmul>
 8007078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800707c:	f7f9 fd5a 	bl	8000b34 <__aeabi_dcmpge>
 8007080:	9e04      	ldr	r6, [sp, #16]
 8007082:	4637      	mov	r7, r6
 8007084:	2800      	cmp	r0, #0
 8007086:	f040 8245 	bne.w	8007514 <_dtoa_r+0x954>
 800708a:	9d00      	ldr	r5, [sp, #0]
 800708c:	2331      	movs	r3, #49	; 0x31
 800708e:	f805 3b01 	strb.w	r3, [r5], #1
 8007092:	f10b 0b01 	add.w	fp, fp, #1
 8007096:	e241      	b.n	800751c <_dtoa_r+0x95c>
 8007098:	07f2      	lsls	r2, r6, #31
 800709a:	d505      	bpl.n	80070a8 <_dtoa_r+0x4e8>
 800709c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a0:	f7f9 fac2 	bl	8000628 <__aeabi_dmul>
 80070a4:	3501      	adds	r5, #1
 80070a6:	2301      	movs	r3, #1
 80070a8:	1076      	asrs	r6, r6, #1
 80070aa:	3708      	adds	r7, #8
 80070ac:	e773      	b.n	8006f96 <_dtoa_r+0x3d6>
 80070ae:	2502      	movs	r5, #2
 80070b0:	e775      	b.n	8006f9e <_dtoa_r+0x3de>
 80070b2:	9e04      	ldr	r6, [sp, #16]
 80070b4:	465f      	mov	r7, fp
 80070b6:	e792      	b.n	8006fde <_dtoa_r+0x41e>
 80070b8:	9900      	ldr	r1, [sp, #0]
 80070ba:	4b50      	ldr	r3, [pc, #320]	; (80071fc <_dtoa_r+0x63c>)
 80070bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c0:	4431      	add	r1, r6
 80070c2:	9102      	str	r1, [sp, #8]
 80070c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c6:	eeb0 9a47 	vmov.f32	s18, s14
 80070ca:	eef0 9a67 	vmov.f32	s19, s15
 80070ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d044      	beq.n	8007164 <_dtoa_r+0x5a4>
 80070da:	494e      	ldr	r1, [pc, #312]	; (8007214 <_dtoa_r+0x654>)
 80070dc:	2000      	movs	r0, #0
 80070de:	f7f9 fbcd 	bl	800087c <__aeabi_ddiv>
 80070e2:	ec53 2b19 	vmov	r2, r3, d9
 80070e6:	f7f9 f8e7 	bl	80002b8 <__aeabi_dsub>
 80070ea:	9d00      	ldr	r5, [sp, #0]
 80070ec:	ec41 0b19 	vmov	d9, r0, r1
 80070f0:	4649      	mov	r1, r9
 80070f2:	4640      	mov	r0, r8
 80070f4:	f7f9 fd48 	bl	8000b88 <__aeabi_d2iz>
 80070f8:	4606      	mov	r6, r0
 80070fa:	f7f9 fa2b 	bl	8000554 <__aeabi_i2d>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 f8d7 	bl	80002b8 <__aeabi_dsub>
 800710a:	3630      	adds	r6, #48	; 0x30
 800710c:	f805 6b01 	strb.w	r6, [r5], #1
 8007110:	ec53 2b19 	vmov	r2, r3, d9
 8007114:	4680      	mov	r8, r0
 8007116:	4689      	mov	r9, r1
 8007118:	f7f9 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800711c:	2800      	cmp	r0, #0
 800711e:	d164      	bne.n	80071ea <_dtoa_r+0x62a>
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	4937      	ldr	r1, [pc, #220]	; (8007204 <_dtoa_r+0x644>)
 8007126:	2000      	movs	r0, #0
 8007128:	f7f9 f8c6 	bl	80002b8 <__aeabi_dsub>
 800712c:	ec53 2b19 	vmov	r2, r3, d9
 8007130:	f7f9 fcec 	bl	8000b0c <__aeabi_dcmplt>
 8007134:	2800      	cmp	r0, #0
 8007136:	f040 80b6 	bne.w	80072a6 <_dtoa_r+0x6e6>
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	429d      	cmp	r5, r3
 800713e:	f43f af7c 	beq.w	800703a <_dtoa_r+0x47a>
 8007142:	4b31      	ldr	r3, [pc, #196]	; (8007208 <_dtoa_r+0x648>)
 8007144:	ec51 0b19 	vmov	r0, r1, d9
 8007148:	2200      	movs	r2, #0
 800714a:	f7f9 fa6d 	bl	8000628 <__aeabi_dmul>
 800714e:	4b2e      	ldr	r3, [pc, #184]	; (8007208 <_dtoa_r+0x648>)
 8007150:	ec41 0b19 	vmov	d9, r0, r1
 8007154:	2200      	movs	r2, #0
 8007156:	4640      	mov	r0, r8
 8007158:	4649      	mov	r1, r9
 800715a:	f7f9 fa65 	bl	8000628 <__aeabi_dmul>
 800715e:	4680      	mov	r8, r0
 8007160:	4689      	mov	r9, r1
 8007162:	e7c5      	b.n	80070f0 <_dtoa_r+0x530>
 8007164:	ec51 0b17 	vmov	r0, r1, d7
 8007168:	f7f9 fa5e 	bl	8000628 <__aeabi_dmul>
 800716c:	9b02      	ldr	r3, [sp, #8]
 800716e:	9d00      	ldr	r5, [sp, #0]
 8007170:	930f      	str	r3, [sp, #60]	; 0x3c
 8007172:	ec41 0b19 	vmov	d9, r0, r1
 8007176:	4649      	mov	r1, r9
 8007178:	4640      	mov	r0, r8
 800717a:	f7f9 fd05 	bl	8000b88 <__aeabi_d2iz>
 800717e:	4606      	mov	r6, r0
 8007180:	f7f9 f9e8 	bl	8000554 <__aeabi_i2d>
 8007184:	3630      	adds	r6, #48	; 0x30
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	f7f9 f893 	bl	80002b8 <__aeabi_dsub>
 8007192:	f805 6b01 	strb.w	r6, [r5], #1
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	429d      	cmp	r5, r3
 800719a:	4680      	mov	r8, r0
 800719c:	4689      	mov	r9, r1
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	d124      	bne.n	80071ee <_dtoa_r+0x62e>
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <_dtoa_r+0x654>)
 80071a6:	ec51 0b19 	vmov	r0, r1, d9
 80071aa:	f7f9 f887 	bl	80002bc <__adddf3>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4640      	mov	r0, r8
 80071b4:	4649      	mov	r1, r9
 80071b6:	f7f9 fcc7 	bl	8000b48 <__aeabi_dcmpgt>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d173      	bne.n	80072a6 <_dtoa_r+0x6e6>
 80071be:	ec53 2b19 	vmov	r2, r3, d9
 80071c2:	4914      	ldr	r1, [pc, #80]	; (8007214 <_dtoa_r+0x654>)
 80071c4:	2000      	movs	r0, #0
 80071c6:	f7f9 f877 	bl	80002b8 <__aeabi_dsub>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4640      	mov	r0, r8
 80071d0:	4649      	mov	r1, r9
 80071d2:	f7f9 fc9b 	bl	8000b0c <__aeabi_dcmplt>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f af2f 	beq.w	800703a <_dtoa_r+0x47a>
 80071dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071de:	1e6b      	subs	r3, r5, #1
 80071e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80071e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071e6:	2b30      	cmp	r3, #48	; 0x30
 80071e8:	d0f8      	beq.n	80071dc <_dtoa_r+0x61c>
 80071ea:	46bb      	mov	fp, r7
 80071ec:	e04a      	b.n	8007284 <_dtoa_r+0x6c4>
 80071ee:	4b06      	ldr	r3, [pc, #24]	; (8007208 <_dtoa_r+0x648>)
 80071f0:	f7f9 fa1a 	bl	8000628 <__aeabi_dmul>
 80071f4:	4680      	mov	r8, r0
 80071f6:	4689      	mov	r9, r1
 80071f8:	e7bd      	b.n	8007176 <_dtoa_r+0x5b6>
 80071fa:	bf00      	nop
 80071fc:	08008f08 	.word	0x08008f08
 8007200:	08008ee0 	.word	0x08008ee0
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	40240000 	.word	0x40240000
 800720c:	401c0000 	.word	0x401c0000
 8007210:	40140000 	.word	0x40140000
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800721c:	9d00      	ldr	r5, [sp, #0]
 800721e:	4642      	mov	r2, r8
 8007220:	464b      	mov	r3, r9
 8007222:	4630      	mov	r0, r6
 8007224:	4639      	mov	r1, r7
 8007226:	f7f9 fb29 	bl	800087c <__aeabi_ddiv>
 800722a:	f7f9 fcad 	bl	8000b88 <__aeabi_d2iz>
 800722e:	9001      	str	r0, [sp, #4]
 8007230:	f7f9 f990 	bl	8000554 <__aeabi_i2d>
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	f7f9 f9f6 	bl	8000628 <__aeabi_dmul>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f838 	bl	80002b8 <__aeabi_dsub>
 8007248:	9e01      	ldr	r6, [sp, #4]
 800724a:	9f04      	ldr	r7, [sp, #16]
 800724c:	3630      	adds	r6, #48	; 0x30
 800724e:	f805 6b01 	strb.w	r6, [r5], #1
 8007252:	9e00      	ldr	r6, [sp, #0]
 8007254:	1bae      	subs	r6, r5, r6
 8007256:	42b7      	cmp	r7, r6
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	d134      	bne.n	80072c8 <_dtoa_r+0x708>
 800725e:	f7f9 f82d 	bl	80002bc <__adddf3>
 8007262:	4642      	mov	r2, r8
 8007264:	464b      	mov	r3, r9
 8007266:	4606      	mov	r6, r0
 8007268:	460f      	mov	r7, r1
 800726a:	f7f9 fc6d 	bl	8000b48 <__aeabi_dcmpgt>
 800726e:	b9c8      	cbnz	r0, 80072a4 <_dtoa_r+0x6e4>
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	4630      	mov	r0, r6
 8007276:	4639      	mov	r1, r7
 8007278:	f7f9 fc3e 	bl	8000af8 <__aeabi_dcmpeq>
 800727c:	b110      	cbz	r0, 8007284 <_dtoa_r+0x6c4>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	07db      	lsls	r3, r3, #31
 8007282:	d40f      	bmi.n	80072a4 <_dtoa_r+0x6e4>
 8007284:	4651      	mov	r1, sl
 8007286:	4620      	mov	r0, r4
 8007288:	f000 fbcc 	bl	8007a24 <_Bfree>
 800728c:	2300      	movs	r3, #0
 800728e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007290:	702b      	strb	r3, [r5, #0]
 8007292:	f10b 0301 	add.w	r3, fp, #1
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800729a:	2b00      	cmp	r3, #0
 800729c:	f43f ace2 	beq.w	8006c64 <_dtoa_r+0xa4>
 80072a0:	601d      	str	r5, [r3, #0]
 80072a2:	e4df      	b.n	8006c64 <_dtoa_r+0xa4>
 80072a4:	465f      	mov	r7, fp
 80072a6:	462b      	mov	r3, r5
 80072a8:	461d      	mov	r5, r3
 80072aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ae:	2a39      	cmp	r2, #57	; 0x39
 80072b0:	d106      	bne.n	80072c0 <_dtoa_r+0x700>
 80072b2:	9a00      	ldr	r2, [sp, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d1f7      	bne.n	80072a8 <_dtoa_r+0x6e8>
 80072b8:	9900      	ldr	r1, [sp, #0]
 80072ba:	2230      	movs	r2, #48	; 0x30
 80072bc:	3701      	adds	r7, #1
 80072be:	700a      	strb	r2, [r1, #0]
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	3201      	adds	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e790      	b.n	80071ea <_dtoa_r+0x62a>
 80072c8:	4ba3      	ldr	r3, [pc, #652]	; (8007558 <_dtoa_r+0x998>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	f7f9 f9ac 	bl	8000628 <__aeabi_dmul>
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	4606      	mov	r6, r0
 80072d6:	460f      	mov	r7, r1
 80072d8:	f7f9 fc0e 	bl	8000af8 <__aeabi_dcmpeq>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d09e      	beq.n	800721e <_dtoa_r+0x65e>
 80072e0:	e7d0      	b.n	8007284 <_dtoa_r+0x6c4>
 80072e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	f000 80ca 	beq.w	800747e <_dtoa_r+0x8be>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	2a01      	cmp	r2, #1
 80072ee:	f300 80ad 	bgt.w	800744c <_dtoa_r+0x88c>
 80072f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	f000 80a5 	beq.w	8007444 <_dtoa_r+0x884>
 80072fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072fe:	9e08      	ldr	r6, [sp, #32]
 8007300:	9d05      	ldr	r5, [sp, #20]
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	441a      	add	r2, r3
 8007306:	9205      	str	r2, [sp, #20]
 8007308:	9a06      	ldr	r2, [sp, #24]
 800730a:	2101      	movs	r1, #1
 800730c:	441a      	add	r2, r3
 800730e:	4620      	mov	r0, r4
 8007310:	9206      	str	r2, [sp, #24]
 8007312:	f000 fc3d 	bl	8007b90 <__i2b>
 8007316:	4607      	mov	r7, r0
 8007318:	b165      	cbz	r5, 8007334 <_dtoa_r+0x774>
 800731a:	9b06      	ldr	r3, [sp, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	dd09      	ble.n	8007334 <_dtoa_r+0x774>
 8007320:	42ab      	cmp	r3, r5
 8007322:	9a05      	ldr	r2, [sp, #20]
 8007324:	bfa8      	it	ge
 8007326:	462b      	movge	r3, r5
 8007328:	1ad2      	subs	r2, r2, r3
 800732a:	9205      	str	r2, [sp, #20]
 800732c:	9a06      	ldr	r2, [sp, #24]
 800732e:	1aed      	subs	r5, r5, r3
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	9306      	str	r3, [sp, #24]
 8007334:	9b08      	ldr	r3, [sp, #32]
 8007336:	b1f3      	cbz	r3, 8007376 <_dtoa_r+0x7b6>
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80a3 	beq.w	8007486 <_dtoa_r+0x8c6>
 8007340:	2e00      	cmp	r6, #0
 8007342:	dd10      	ble.n	8007366 <_dtoa_r+0x7a6>
 8007344:	4639      	mov	r1, r7
 8007346:	4632      	mov	r2, r6
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fce1 	bl	8007d10 <__pow5mult>
 800734e:	4652      	mov	r2, sl
 8007350:	4601      	mov	r1, r0
 8007352:	4607      	mov	r7, r0
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fc31 	bl	8007bbc <__multiply>
 800735a:	4651      	mov	r1, sl
 800735c:	4680      	mov	r8, r0
 800735e:	4620      	mov	r0, r4
 8007360:	f000 fb60 	bl	8007a24 <_Bfree>
 8007364:	46c2      	mov	sl, r8
 8007366:	9b08      	ldr	r3, [sp, #32]
 8007368:	1b9a      	subs	r2, r3, r6
 800736a:	d004      	beq.n	8007376 <_dtoa_r+0x7b6>
 800736c:	4651      	mov	r1, sl
 800736e:	4620      	mov	r0, r4
 8007370:	f000 fcce 	bl	8007d10 <__pow5mult>
 8007374:	4682      	mov	sl, r0
 8007376:	2101      	movs	r1, #1
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fc09 	bl	8007b90 <__i2b>
 800737e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007380:	2b00      	cmp	r3, #0
 8007382:	4606      	mov	r6, r0
 8007384:	f340 8081 	ble.w	800748a <_dtoa_r+0x8ca>
 8007388:	461a      	mov	r2, r3
 800738a:	4601      	mov	r1, r0
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fcbf 	bl	8007d10 <__pow5mult>
 8007392:	9b07      	ldr	r3, [sp, #28]
 8007394:	2b01      	cmp	r3, #1
 8007396:	4606      	mov	r6, r0
 8007398:	dd7a      	ble.n	8007490 <_dtoa_r+0x8d0>
 800739a:	f04f 0800 	mov.w	r8, #0
 800739e:	6933      	ldr	r3, [r6, #16]
 80073a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073a4:	6918      	ldr	r0, [r3, #16]
 80073a6:	f000 fba5 	bl	8007af4 <__hi0bits>
 80073aa:	f1c0 0020 	rsb	r0, r0, #32
 80073ae:	9b06      	ldr	r3, [sp, #24]
 80073b0:	4418      	add	r0, r3
 80073b2:	f010 001f 	ands.w	r0, r0, #31
 80073b6:	f000 8094 	beq.w	80074e2 <_dtoa_r+0x922>
 80073ba:	f1c0 0320 	rsb	r3, r0, #32
 80073be:	2b04      	cmp	r3, #4
 80073c0:	f340 8085 	ble.w	80074ce <_dtoa_r+0x90e>
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	f1c0 001c 	rsb	r0, r0, #28
 80073ca:	4403      	add	r3, r0
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	4403      	add	r3, r0
 80073d2:	4405      	add	r5, r0
 80073d4:	9306      	str	r3, [sp, #24]
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	dd05      	ble.n	80073e8 <_dtoa_r+0x828>
 80073dc:	4651      	mov	r1, sl
 80073de:	461a      	mov	r2, r3
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 fcef 	bl	8007dc4 <__lshift>
 80073e6:	4682      	mov	sl, r0
 80073e8:	9b06      	ldr	r3, [sp, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dd05      	ble.n	80073fa <_dtoa_r+0x83a>
 80073ee:	4631      	mov	r1, r6
 80073f0:	461a      	mov	r2, r3
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 fce6 	bl	8007dc4 <__lshift>
 80073f8:	4606      	mov	r6, r0
 80073fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d072      	beq.n	80074e6 <_dtoa_r+0x926>
 8007400:	4631      	mov	r1, r6
 8007402:	4650      	mov	r0, sl
 8007404:	f000 fd4a 	bl	8007e9c <__mcmp>
 8007408:	2800      	cmp	r0, #0
 800740a:	da6c      	bge.n	80074e6 <_dtoa_r+0x926>
 800740c:	2300      	movs	r3, #0
 800740e:	4651      	mov	r1, sl
 8007410:	220a      	movs	r2, #10
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fb28 	bl	8007a68 <__multadd>
 8007418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800741e:	4682      	mov	sl, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 81b0 	beq.w	8007786 <_dtoa_r+0xbc6>
 8007426:	2300      	movs	r3, #0
 8007428:	4639      	mov	r1, r7
 800742a:	220a      	movs	r2, #10
 800742c:	4620      	mov	r0, r4
 800742e:	f000 fb1b 	bl	8007a68 <__multadd>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	4607      	mov	r7, r0
 8007438:	f300 8096 	bgt.w	8007568 <_dtoa_r+0x9a8>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	2b02      	cmp	r3, #2
 8007440:	dc59      	bgt.n	80074f6 <_dtoa_r+0x936>
 8007442:	e091      	b.n	8007568 <_dtoa_r+0x9a8>
 8007444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007446:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800744a:	e758      	b.n	80072fe <_dtoa_r+0x73e>
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	1e5e      	subs	r6, r3, #1
 8007450:	9b08      	ldr	r3, [sp, #32]
 8007452:	42b3      	cmp	r3, r6
 8007454:	bfbf      	itttt	lt
 8007456:	9b08      	ldrlt	r3, [sp, #32]
 8007458:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800745a:	9608      	strlt	r6, [sp, #32]
 800745c:	1af3      	sublt	r3, r6, r3
 800745e:	bfb4      	ite	lt
 8007460:	18d2      	addlt	r2, r2, r3
 8007462:	1b9e      	subge	r6, r3, r6
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	bfbc      	itt	lt
 8007468:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800746a:	2600      	movlt	r6, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	bfb7      	itett	lt
 8007470:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007474:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007478:	1a9d      	sublt	r5, r3, r2
 800747a:	2300      	movlt	r3, #0
 800747c:	e741      	b.n	8007302 <_dtoa_r+0x742>
 800747e:	9e08      	ldr	r6, [sp, #32]
 8007480:	9d05      	ldr	r5, [sp, #20]
 8007482:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007484:	e748      	b.n	8007318 <_dtoa_r+0x758>
 8007486:	9a08      	ldr	r2, [sp, #32]
 8007488:	e770      	b.n	800736c <_dtoa_r+0x7ac>
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	2b01      	cmp	r3, #1
 800748e:	dc19      	bgt.n	80074c4 <_dtoa_r+0x904>
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	b9bb      	cbnz	r3, 80074c4 <_dtoa_r+0x904>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800749a:	b99b      	cbnz	r3, 80074c4 <_dtoa_r+0x904>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074a2:	0d1b      	lsrs	r3, r3, #20
 80074a4:	051b      	lsls	r3, r3, #20
 80074a6:	b183      	cbz	r3, 80074ca <_dtoa_r+0x90a>
 80074a8:	9b05      	ldr	r3, [sp, #20]
 80074aa:	3301      	adds	r3, #1
 80074ac:	9305      	str	r3, [sp, #20]
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	3301      	adds	r3, #1
 80074b2:	9306      	str	r3, [sp, #24]
 80074b4:	f04f 0801 	mov.w	r8, #1
 80074b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f47f af6f 	bne.w	800739e <_dtoa_r+0x7de>
 80074c0:	2001      	movs	r0, #1
 80074c2:	e774      	b.n	80073ae <_dtoa_r+0x7ee>
 80074c4:	f04f 0800 	mov.w	r8, #0
 80074c8:	e7f6      	b.n	80074b8 <_dtoa_r+0x8f8>
 80074ca:	4698      	mov	r8, r3
 80074cc:	e7f4      	b.n	80074b8 <_dtoa_r+0x8f8>
 80074ce:	d082      	beq.n	80073d6 <_dtoa_r+0x816>
 80074d0:	9a05      	ldr	r2, [sp, #20]
 80074d2:	331c      	adds	r3, #28
 80074d4:	441a      	add	r2, r3
 80074d6:	9205      	str	r2, [sp, #20]
 80074d8:	9a06      	ldr	r2, [sp, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	441d      	add	r5, r3
 80074de:	9206      	str	r2, [sp, #24]
 80074e0:	e779      	b.n	80073d6 <_dtoa_r+0x816>
 80074e2:	4603      	mov	r3, r0
 80074e4:	e7f4      	b.n	80074d0 <_dtoa_r+0x910>
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc37      	bgt.n	800755c <_dtoa_r+0x99c>
 80074ec:	9b07      	ldr	r3, [sp, #28]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	dd34      	ble.n	800755c <_dtoa_r+0x99c>
 80074f2:	9b04      	ldr	r3, [sp, #16]
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	9b01      	ldr	r3, [sp, #4]
 80074f8:	b963      	cbnz	r3, 8007514 <_dtoa_r+0x954>
 80074fa:	4631      	mov	r1, r6
 80074fc:	2205      	movs	r2, #5
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 fab2 	bl	8007a68 <__multadd>
 8007504:	4601      	mov	r1, r0
 8007506:	4606      	mov	r6, r0
 8007508:	4650      	mov	r0, sl
 800750a:	f000 fcc7 	bl	8007e9c <__mcmp>
 800750e:	2800      	cmp	r0, #0
 8007510:	f73f adbb 	bgt.w	800708a <_dtoa_r+0x4ca>
 8007514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007516:	9d00      	ldr	r5, [sp, #0]
 8007518:	ea6f 0b03 	mvn.w	fp, r3
 800751c:	f04f 0800 	mov.w	r8, #0
 8007520:	4631      	mov	r1, r6
 8007522:	4620      	mov	r0, r4
 8007524:	f000 fa7e 	bl	8007a24 <_Bfree>
 8007528:	2f00      	cmp	r7, #0
 800752a:	f43f aeab 	beq.w	8007284 <_dtoa_r+0x6c4>
 800752e:	f1b8 0f00 	cmp.w	r8, #0
 8007532:	d005      	beq.n	8007540 <_dtoa_r+0x980>
 8007534:	45b8      	cmp	r8, r7
 8007536:	d003      	beq.n	8007540 <_dtoa_r+0x980>
 8007538:	4641      	mov	r1, r8
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fa72 	bl	8007a24 <_Bfree>
 8007540:	4639      	mov	r1, r7
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fa6e 	bl	8007a24 <_Bfree>
 8007548:	e69c      	b.n	8007284 <_dtoa_r+0x6c4>
 800754a:	2600      	movs	r6, #0
 800754c:	4637      	mov	r7, r6
 800754e:	e7e1      	b.n	8007514 <_dtoa_r+0x954>
 8007550:	46bb      	mov	fp, r7
 8007552:	4637      	mov	r7, r6
 8007554:	e599      	b.n	800708a <_dtoa_r+0x4ca>
 8007556:	bf00      	nop
 8007558:	40240000 	.word	0x40240000
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80c8 	beq.w	80076f4 <_dtoa_r+0xb34>
 8007564:	9b04      	ldr	r3, [sp, #16]
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	2d00      	cmp	r5, #0
 800756a:	dd05      	ble.n	8007578 <_dtoa_r+0x9b8>
 800756c:	4639      	mov	r1, r7
 800756e:	462a      	mov	r2, r5
 8007570:	4620      	mov	r0, r4
 8007572:	f000 fc27 	bl	8007dc4 <__lshift>
 8007576:	4607      	mov	r7, r0
 8007578:	f1b8 0f00 	cmp.w	r8, #0
 800757c:	d05b      	beq.n	8007636 <_dtoa_r+0xa76>
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4620      	mov	r0, r4
 8007582:	f000 fa0f 	bl	80079a4 <_Balloc>
 8007586:	4605      	mov	r5, r0
 8007588:	b928      	cbnz	r0, 8007596 <_dtoa_r+0x9d6>
 800758a:	4b83      	ldr	r3, [pc, #524]	; (8007798 <_dtoa_r+0xbd8>)
 800758c:	4602      	mov	r2, r0
 800758e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007592:	f7ff bb2e 	b.w	8006bf2 <_dtoa_r+0x32>
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	3202      	adds	r2, #2
 800759a:	0092      	lsls	r2, r2, #2
 800759c:	f107 010c 	add.w	r1, r7, #12
 80075a0:	300c      	adds	r0, #12
 80075a2:	f001 f985 	bl	80088b0 <memcpy>
 80075a6:	2201      	movs	r2, #1
 80075a8:	4629      	mov	r1, r5
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 fc0a 	bl	8007dc4 <__lshift>
 80075b0:	9b00      	ldr	r3, [sp, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ba:	4413      	add	r3, r2
 80075bc:	9308      	str	r3, [sp, #32]
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	46b8      	mov	r8, r7
 80075c6:	9306      	str	r3, [sp, #24]
 80075c8:	4607      	mov	r7, r0
 80075ca:	9b04      	ldr	r3, [sp, #16]
 80075cc:	4631      	mov	r1, r6
 80075ce:	3b01      	subs	r3, #1
 80075d0:	4650      	mov	r0, sl
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	f7ff fa6a 	bl	8006aac <quorem>
 80075d8:	4641      	mov	r1, r8
 80075da:	9002      	str	r0, [sp, #8]
 80075dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075e0:	4650      	mov	r0, sl
 80075e2:	f000 fc5b 	bl	8007e9c <__mcmp>
 80075e6:	463a      	mov	r2, r7
 80075e8:	9005      	str	r0, [sp, #20]
 80075ea:	4631      	mov	r1, r6
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 fc71 	bl	8007ed4 <__mdiff>
 80075f2:	68c2      	ldr	r2, [r0, #12]
 80075f4:	4605      	mov	r5, r0
 80075f6:	bb02      	cbnz	r2, 800763a <_dtoa_r+0xa7a>
 80075f8:	4601      	mov	r1, r0
 80075fa:	4650      	mov	r0, sl
 80075fc:	f000 fc4e 	bl	8007e9c <__mcmp>
 8007600:	4602      	mov	r2, r0
 8007602:	4629      	mov	r1, r5
 8007604:	4620      	mov	r0, r4
 8007606:	9209      	str	r2, [sp, #36]	; 0x24
 8007608:	f000 fa0c 	bl	8007a24 <_Bfree>
 800760c:	9b07      	ldr	r3, [sp, #28]
 800760e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007610:	9d04      	ldr	r5, [sp, #16]
 8007612:	ea43 0102 	orr.w	r1, r3, r2
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	4319      	orrs	r1, r3
 800761a:	d110      	bne.n	800763e <_dtoa_r+0xa7e>
 800761c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007620:	d029      	beq.n	8007676 <_dtoa_r+0xab6>
 8007622:	9b05      	ldr	r3, [sp, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	dd02      	ble.n	800762e <_dtoa_r+0xa6e>
 8007628:	9b02      	ldr	r3, [sp, #8]
 800762a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	f883 9000 	strb.w	r9, [r3]
 8007634:	e774      	b.n	8007520 <_dtoa_r+0x960>
 8007636:	4638      	mov	r0, r7
 8007638:	e7ba      	b.n	80075b0 <_dtoa_r+0x9f0>
 800763a:	2201      	movs	r2, #1
 800763c:	e7e1      	b.n	8007602 <_dtoa_r+0xa42>
 800763e:	9b05      	ldr	r3, [sp, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	db04      	blt.n	800764e <_dtoa_r+0xa8e>
 8007644:	9907      	ldr	r1, [sp, #28]
 8007646:	430b      	orrs	r3, r1
 8007648:	9906      	ldr	r1, [sp, #24]
 800764a:	430b      	orrs	r3, r1
 800764c:	d120      	bne.n	8007690 <_dtoa_r+0xad0>
 800764e:	2a00      	cmp	r2, #0
 8007650:	dded      	ble.n	800762e <_dtoa_r+0xa6e>
 8007652:	4651      	mov	r1, sl
 8007654:	2201      	movs	r2, #1
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fbb4 	bl	8007dc4 <__lshift>
 800765c:	4631      	mov	r1, r6
 800765e:	4682      	mov	sl, r0
 8007660:	f000 fc1c 	bl	8007e9c <__mcmp>
 8007664:	2800      	cmp	r0, #0
 8007666:	dc03      	bgt.n	8007670 <_dtoa_r+0xab0>
 8007668:	d1e1      	bne.n	800762e <_dtoa_r+0xa6e>
 800766a:	f019 0f01 	tst.w	r9, #1
 800766e:	d0de      	beq.n	800762e <_dtoa_r+0xa6e>
 8007670:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007674:	d1d8      	bne.n	8007628 <_dtoa_r+0xa68>
 8007676:	9a01      	ldr	r2, [sp, #4]
 8007678:	2339      	movs	r3, #57	; 0x39
 800767a:	7013      	strb	r3, [r2, #0]
 800767c:	462b      	mov	r3, r5
 800767e:	461d      	mov	r5, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007686:	2a39      	cmp	r2, #57	; 0x39
 8007688:	d06c      	beq.n	8007764 <_dtoa_r+0xba4>
 800768a:	3201      	adds	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e747      	b.n	8007520 <_dtoa_r+0x960>
 8007690:	2a00      	cmp	r2, #0
 8007692:	dd07      	ble.n	80076a4 <_dtoa_r+0xae4>
 8007694:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007698:	d0ed      	beq.n	8007676 <_dtoa_r+0xab6>
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	f109 0301 	add.w	r3, r9, #1
 80076a0:	7013      	strb	r3, [r2, #0]
 80076a2:	e73d      	b.n	8007520 <_dtoa_r+0x960>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	9a08      	ldr	r2, [sp, #32]
 80076a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d043      	beq.n	8007738 <_dtoa_r+0xb78>
 80076b0:	4651      	mov	r1, sl
 80076b2:	2300      	movs	r3, #0
 80076b4:	220a      	movs	r2, #10
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 f9d6 	bl	8007a68 <__multadd>
 80076bc:	45b8      	cmp	r8, r7
 80076be:	4682      	mov	sl, r0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	f04f 020a 	mov.w	r2, #10
 80076c8:	4641      	mov	r1, r8
 80076ca:	4620      	mov	r0, r4
 80076cc:	d107      	bne.n	80076de <_dtoa_r+0xb1e>
 80076ce:	f000 f9cb 	bl	8007a68 <__multadd>
 80076d2:	4680      	mov	r8, r0
 80076d4:	4607      	mov	r7, r0
 80076d6:	9b04      	ldr	r3, [sp, #16]
 80076d8:	3301      	adds	r3, #1
 80076da:	9304      	str	r3, [sp, #16]
 80076dc:	e775      	b.n	80075ca <_dtoa_r+0xa0a>
 80076de:	f000 f9c3 	bl	8007a68 <__multadd>
 80076e2:	4639      	mov	r1, r7
 80076e4:	4680      	mov	r8, r0
 80076e6:	2300      	movs	r3, #0
 80076e8:	220a      	movs	r2, #10
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 f9bc 	bl	8007a68 <__multadd>
 80076f0:	4607      	mov	r7, r0
 80076f2:	e7f0      	b.n	80076d6 <_dtoa_r+0xb16>
 80076f4:	9b04      	ldr	r3, [sp, #16]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	9d00      	ldr	r5, [sp, #0]
 80076fa:	4631      	mov	r1, r6
 80076fc:	4650      	mov	r0, sl
 80076fe:	f7ff f9d5 	bl	8006aac <quorem>
 8007702:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007706:	9b00      	ldr	r3, [sp, #0]
 8007708:	f805 9b01 	strb.w	r9, [r5], #1
 800770c:	1aea      	subs	r2, r5, r3
 800770e:	9b01      	ldr	r3, [sp, #4]
 8007710:	4293      	cmp	r3, r2
 8007712:	dd07      	ble.n	8007724 <_dtoa_r+0xb64>
 8007714:	4651      	mov	r1, sl
 8007716:	2300      	movs	r3, #0
 8007718:	220a      	movs	r2, #10
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f9a4 	bl	8007a68 <__multadd>
 8007720:	4682      	mov	sl, r0
 8007722:	e7ea      	b.n	80076fa <_dtoa_r+0xb3a>
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfc8      	it	gt
 800772a:	461d      	movgt	r5, r3
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	bfd8      	it	le
 8007730:	2501      	movle	r5, #1
 8007732:	441d      	add	r5, r3
 8007734:	f04f 0800 	mov.w	r8, #0
 8007738:	4651      	mov	r1, sl
 800773a:	2201      	movs	r2, #1
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fb41 	bl	8007dc4 <__lshift>
 8007742:	4631      	mov	r1, r6
 8007744:	4682      	mov	sl, r0
 8007746:	f000 fba9 	bl	8007e9c <__mcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	dc96      	bgt.n	800767c <_dtoa_r+0xabc>
 800774e:	d102      	bne.n	8007756 <_dtoa_r+0xb96>
 8007750:	f019 0f01 	tst.w	r9, #1
 8007754:	d192      	bne.n	800767c <_dtoa_r+0xabc>
 8007756:	462b      	mov	r3, r5
 8007758:	461d      	mov	r5, r3
 800775a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800775e:	2a30      	cmp	r2, #48	; 0x30
 8007760:	d0fa      	beq.n	8007758 <_dtoa_r+0xb98>
 8007762:	e6dd      	b.n	8007520 <_dtoa_r+0x960>
 8007764:	9a00      	ldr	r2, [sp, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d189      	bne.n	800767e <_dtoa_r+0xabe>
 800776a:	f10b 0b01 	add.w	fp, fp, #1
 800776e:	2331      	movs	r3, #49	; 0x31
 8007770:	e796      	b.n	80076a0 <_dtoa_r+0xae0>
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <_dtoa_r+0xbdc>)
 8007774:	f7ff ba99 	b.w	8006caa <_dtoa_r+0xea>
 8007778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800777a:	2b00      	cmp	r3, #0
 800777c:	f47f aa6d 	bne.w	8006c5a <_dtoa_r+0x9a>
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <_dtoa_r+0xbe0>)
 8007782:	f7ff ba92 	b.w	8006caa <_dtoa_r+0xea>
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	dcb5      	bgt.n	80076f8 <_dtoa_r+0xb38>
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	2b02      	cmp	r3, #2
 8007790:	f73f aeb1 	bgt.w	80074f6 <_dtoa_r+0x936>
 8007794:	e7b0      	b.n	80076f8 <_dtoa_r+0xb38>
 8007796:	bf00      	nop
 8007798:	08008e6f 	.word	0x08008e6f
 800779c:	08008d39 	.word	0x08008d39
 80077a0:	08008e0a 	.word	0x08008e0a

080077a4 <_free_r>:
 80077a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077a6:	2900      	cmp	r1, #0
 80077a8:	d044      	beq.n	8007834 <_free_r+0x90>
 80077aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ae:	9001      	str	r0, [sp, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f1a1 0404 	sub.w	r4, r1, #4
 80077b6:	bfb8      	it	lt
 80077b8:	18e4      	addlt	r4, r4, r3
 80077ba:	f000 f8e7 	bl	800798c <__malloc_lock>
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <_free_r+0x94>)
 80077c0:	9801      	ldr	r0, [sp, #4]
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	b933      	cbnz	r3, 80077d4 <_free_r+0x30>
 80077c6:	6063      	str	r3, [r4, #4]
 80077c8:	6014      	str	r4, [r2, #0]
 80077ca:	b003      	add	sp, #12
 80077cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077d0:	f000 b8e2 	b.w	8007998 <__malloc_unlock>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d908      	bls.n	80077ea <_free_r+0x46>
 80077d8:	6825      	ldr	r5, [r4, #0]
 80077da:	1961      	adds	r1, r4, r5
 80077dc:	428b      	cmp	r3, r1
 80077de:	bf01      	itttt	eq
 80077e0:	6819      	ldreq	r1, [r3, #0]
 80077e2:	685b      	ldreq	r3, [r3, #4]
 80077e4:	1949      	addeq	r1, r1, r5
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	e7ed      	b.n	80077c6 <_free_r+0x22>
 80077ea:	461a      	mov	r2, r3
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b10b      	cbz	r3, 80077f4 <_free_r+0x50>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d9fa      	bls.n	80077ea <_free_r+0x46>
 80077f4:	6811      	ldr	r1, [r2, #0]
 80077f6:	1855      	adds	r5, r2, r1
 80077f8:	42a5      	cmp	r5, r4
 80077fa:	d10b      	bne.n	8007814 <_free_r+0x70>
 80077fc:	6824      	ldr	r4, [r4, #0]
 80077fe:	4421      	add	r1, r4
 8007800:	1854      	adds	r4, r2, r1
 8007802:	42a3      	cmp	r3, r4
 8007804:	6011      	str	r1, [r2, #0]
 8007806:	d1e0      	bne.n	80077ca <_free_r+0x26>
 8007808:	681c      	ldr	r4, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	6053      	str	r3, [r2, #4]
 800780e:	440c      	add	r4, r1
 8007810:	6014      	str	r4, [r2, #0]
 8007812:	e7da      	b.n	80077ca <_free_r+0x26>
 8007814:	d902      	bls.n	800781c <_free_r+0x78>
 8007816:	230c      	movs	r3, #12
 8007818:	6003      	str	r3, [r0, #0]
 800781a:	e7d6      	b.n	80077ca <_free_r+0x26>
 800781c:	6825      	ldr	r5, [r4, #0]
 800781e:	1961      	adds	r1, r4, r5
 8007820:	428b      	cmp	r3, r1
 8007822:	bf04      	itt	eq
 8007824:	6819      	ldreq	r1, [r3, #0]
 8007826:	685b      	ldreq	r3, [r3, #4]
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	bf04      	itt	eq
 800782c:	1949      	addeq	r1, r1, r5
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	6054      	str	r4, [r2, #4]
 8007832:	e7ca      	b.n	80077ca <_free_r+0x26>
 8007834:	b003      	add	sp, #12
 8007836:	bd30      	pop	{r4, r5, pc}
 8007838:	200006b8 	.word	0x200006b8

0800783c <malloc>:
 800783c:	4b02      	ldr	r3, [pc, #8]	; (8007848 <malloc+0xc>)
 800783e:	4601      	mov	r1, r0
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f000 b823 	b.w	800788c <_malloc_r>
 8007846:	bf00      	nop
 8007848:	20000068 	.word	0x20000068

0800784c <sbrk_aligned>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4e0e      	ldr	r6, [pc, #56]	; (8007888 <sbrk_aligned+0x3c>)
 8007850:	460c      	mov	r4, r1
 8007852:	6831      	ldr	r1, [r6, #0]
 8007854:	4605      	mov	r5, r0
 8007856:	b911      	cbnz	r1, 800785e <sbrk_aligned+0x12>
 8007858:	f001 f81a 	bl	8008890 <_sbrk_r>
 800785c:	6030      	str	r0, [r6, #0]
 800785e:	4621      	mov	r1, r4
 8007860:	4628      	mov	r0, r5
 8007862:	f001 f815 	bl	8008890 <_sbrk_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	d00a      	beq.n	8007880 <sbrk_aligned+0x34>
 800786a:	1cc4      	adds	r4, r0, #3
 800786c:	f024 0403 	bic.w	r4, r4, #3
 8007870:	42a0      	cmp	r0, r4
 8007872:	d007      	beq.n	8007884 <sbrk_aligned+0x38>
 8007874:	1a21      	subs	r1, r4, r0
 8007876:	4628      	mov	r0, r5
 8007878:	f001 f80a 	bl	8008890 <_sbrk_r>
 800787c:	3001      	adds	r0, #1
 800787e:	d101      	bne.n	8007884 <sbrk_aligned+0x38>
 8007880:	f04f 34ff 	mov.w	r4, #4294967295
 8007884:	4620      	mov	r0, r4
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	200006bc 	.word	0x200006bc

0800788c <_malloc_r>:
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007890:	1ccd      	adds	r5, r1, #3
 8007892:	f025 0503 	bic.w	r5, r5, #3
 8007896:	3508      	adds	r5, #8
 8007898:	2d0c      	cmp	r5, #12
 800789a:	bf38      	it	cc
 800789c:	250c      	movcc	r5, #12
 800789e:	2d00      	cmp	r5, #0
 80078a0:	4607      	mov	r7, r0
 80078a2:	db01      	blt.n	80078a8 <_malloc_r+0x1c>
 80078a4:	42a9      	cmp	r1, r5
 80078a6:	d905      	bls.n	80078b4 <_malloc_r+0x28>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	2600      	movs	r6, #0
 80078ae:	4630      	mov	r0, r6
 80078b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007988 <_malloc_r+0xfc>
 80078b8:	f000 f868 	bl	800798c <__malloc_lock>
 80078bc:	f8d8 3000 	ldr.w	r3, [r8]
 80078c0:	461c      	mov	r4, r3
 80078c2:	bb5c      	cbnz	r4, 800791c <_malloc_r+0x90>
 80078c4:	4629      	mov	r1, r5
 80078c6:	4638      	mov	r0, r7
 80078c8:	f7ff ffc0 	bl	800784c <sbrk_aligned>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	4604      	mov	r4, r0
 80078d0:	d155      	bne.n	800797e <_malloc_r+0xf2>
 80078d2:	f8d8 4000 	ldr.w	r4, [r8]
 80078d6:	4626      	mov	r6, r4
 80078d8:	2e00      	cmp	r6, #0
 80078da:	d145      	bne.n	8007968 <_malloc_r+0xdc>
 80078dc:	2c00      	cmp	r4, #0
 80078de:	d048      	beq.n	8007972 <_malloc_r+0xe6>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	4631      	mov	r1, r6
 80078e4:	4638      	mov	r0, r7
 80078e6:	eb04 0903 	add.w	r9, r4, r3
 80078ea:	f000 ffd1 	bl	8008890 <_sbrk_r>
 80078ee:	4581      	cmp	r9, r0
 80078f0:	d13f      	bne.n	8007972 <_malloc_r+0xe6>
 80078f2:	6821      	ldr	r1, [r4, #0]
 80078f4:	1a6d      	subs	r5, r5, r1
 80078f6:	4629      	mov	r1, r5
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7ff ffa7 	bl	800784c <sbrk_aligned>
 80078fe:	3001      	adds	r0, #1
 8007900:	d037      	beq.n	8007972 <_malloc_r+0xe6>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	442b      	add	r3, r5
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	f8d8 3000 	ldr.w	r3, [r8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d038      	beq.n	8007982 <_malloc_r+0xf6>
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	42a2      	cmp	r2, r4
 8007914:	d12b      	bne.n	800796e <_malloc_r+0xe2>
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
 800791a:	e00f      	b.n	800793c <_malloc_r+0xb0>
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	1b52      	subs	r2, r2, r5
 8007920:	d41f      	bmi.n	8007962 <_malloc_r+0xd6>
 8007922:	2a0b      	cmp	r2, #11
 8007924:	d917      	bls.n	8007956 <_malloc_r+0xca>
 8007926:	1961      	adds	r1, r4, r5
 8007928:	42a3      	cmp	r3, r4
 800792a:	6025      	str	r5, [r4, #0]
 800792c:	bf18      	it	ne
 800792e:	6059      	strne	r1, [r3, #4]
 8007930:	6863      	ldr	r3, [r4, #4]
 8007932:	bf08      	it	eq
 8007934:	f8c8 1000 	streq.w	r1, [r8]
 8007938:	5162      	str	r2, [r4, r5]
 800793a:	604b      	str	r3, [r1, #4]
 800793c:	4638      	mov	r0, r7
 800793e:	f104 060b 	add.w	r6, r4, #11
 8007942:	f000 f829 	bl	8007998 <__malloc_unlock>
 8007946:	f026 0607 	bic.w	r6, r6, #7
 800794a:	1d23      	adds	r3, r4, #4
 800794c:	1af2      	subs	r2, r6, r3
 800794e:	d0ae      	beq.n	80078ae <_malloc_r+0x22>
 8007950:	1b9b      	subs	r3, r3, r6
 8007952:	50a3      	str	r3, [r4, r2]
 8007954:	e7ab      	b.n	80078ae <_malloc_r+0x22>
 8007956:	42a3      	cmp	r3, r4
 8007958:	6862      	ldr	r2, [r4, #4]
 800795a:	d1dd      	bne.n	8007918 <_malloc_r+0x8c>
 800795c:	f8c8 2000 	str.w	r2, [r8]
 8007960:	e7ec      	b.n	800793c <_malloc_r+0xb0>
 8007962:	4623      	mov	r3, r4
 8007964:	6864      	ldr	r4, [r4, #4]
 8007966:	e7ac      	b.n	80078c2 <_malloc_r+0x36>
 8007968:	4634      	mov	r4, r6
 800796a:	6876      	ldr	r6, [r6, #4]
 800796c:	e7b4      	b.n	80078d8 <_malloc_r+0x4c>
 800796e:	4613      	mov	r3, r2
 8007970:	e7cc      	b.n	800790c <_malloc_r+0x80>
 8007972:	230c      	movs	r3, #12
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4638      	mov	r0, r7
 8007978:	f000 f80e 	bl	8007998 <__malloc_unlock>
 800797c:	e797      	b.n	80078ae <_malloc_r+0x22>
 800797e:	6025      	str	r5, [r4, #0]
 8007980:	e7dc      	b.n	800793c <_malloc_r+0xb0>
 8007982:	605b      	str	r3, [r3, #4]
 8007984:	deff      	udf	#255	; 0xff
 8007986:	bf00      	nop
 8007988:	200006b8 	.word	0x200006b8

0800798c <__malloc_lock>:
 800798c:	4801      	ldr	r0, [pc, #4]	; (8007994 <__malloc_lock+0x8>)
 800798e:	f7ff b86c 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 8007992:	bf00      	nop
 8007994:	200006b4 	.word	0x200006b4

08007998 <__malloc_unlock>:
 8007998:	4801      	ldr	r0, [pc, #4]	; (80079a0 <__malloc_unlock+0x8>)
 800799a:	f7ff b867 	b.w	8006a6c <__retarget_lock_release_recursive>
 800799e:	bf00      	nop
 80079a0:	200006b4 	.word	0x200006b4

080079a4 <_Balloc>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	69c6      	ldr	r6, [r0, #28]
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	b976      	cbnz	r6, 80079cc <_Balloc+0x28>
 80079ae:	2010      	movs	r0, #16
 80079b0:	f7ff ff44 	bl	800783c <malloc>
 80079b4:	4602      	mov	r2, r0
 80079b6:	61e0      	str	r0, [r4, #28]
 80079b8:	b920      	cbnz	r0, 80079c4 <_Balloc+0x20>
 80079ba:	4b18      	ldr	r3, [pc, #96]	; (8007a1c <_Balloc+0x78>)
 80079bc:	4818      	ldr	r0, [pc, #96]	; (8007a20 <_Balloc+0x7c>)
 80079be:	216b      	movs	r1, #107	; 0x6b
 80079c0:	f7ff f856 	bl	8006a70 <__assert_func>
 80079c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c8:	6006      	str	r6, [r0, #0]
 80079ca:	60c6      	str	r6, [r0, #12]
 80079cc:	69e6      	ldr	r6, [r4, #28]
 80079ce:	68f3      	ldr	r3, [r6, #12]
 80079d0:	b183      	cbz	r3, 80079f4 <_Balloc+0x50>
 80079d2:	69e3      	ldr	r3, [r4, #28]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079da:	b9b8      	cbnz	r0, 8007a0c <_Balloc+0x68>
 80079dc:	2101      	movs	r1, #1
 80079de:	fa01 f605 	lsl.w	r6, r1, r5
 80079e2:	1d72      	adds	r2, r6, #5
 80079e4:	0092      	lsls	r2, r2, #2
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 ff77 	bl	80088da <_calloc_r>
 80079ec:	b160      	cbz	r0, 8007a08 <_Balloc+0x64>
 80079ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079f2:	e00e      	b.n	8007a12 <_Balloc+0x6e>
 80079f4:	2221      	movs	r2, #33	; 0x21
 80079f6:	2104      	movs	r1, #4
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 ff6e 	bl	80088da <_calloc_r>
 80079fe:	69e3      	ldr	r3, [r4, #28]
 8007a00:	60f0      	str	r0, [r6, #12]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e4      	bne.n	80079d2 <_Balloc+0x2e>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	6802      	ldr	r2, [r0, #0]
 8007a0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a12:	2300      	movs	r3, #0
 8007a14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a18:	e7f7      	b.n	8007a0a <_Balloc+0x66>
 8007a1a:	bf00      	nop
 8007a1c:	08008d5d 	.word	0x08008d5d
 8007a20:	08008e80 	.word	0x08008e80

08007a24 <_Bfree>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	69c6      	ldr	r6, [r0, #28]
 8007a28:	4605      	mov	r5, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b976      	cbnz	r6, 8007a4c <_Bfree+0x28>
 8007a2e:	2010      	movs	r0, #16
 8007a30:	f7ff ff04 	bl	800783c <malloc>
 8007a34:	4602      	mov	r2, r0
 8007a36:	61e8      	str	r0, [r5, #28]
 8007a38:	b920      	cbnz	r0, 8007a44 <_Bfree+0x20>
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <_Bfree+0x3c>)
 8007a3c:	4809      	ldr	r0, [pc, #36]	; (8007a64 <_Bfree+0x40>)
 8007a3e:	218f      	movs	r1, #143	; 0x8f
 8007a40:	f7ff f816 	bl	8006a70 <__assert_func>
 8007a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a48:	6006      	str	r6, [r0, #0]
 8007a4a:	60c6      	str	r6, [r0, #12]
 8007a4c:	b13c      	cbz	r4, 8007a5e <_Bfree+0x3a>
 8007a4e:	69eb      	ldr	r3, [r5, #28]
 8007a50:	6862      	ldr	r2, [r4, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a58:	6021      	str	r1, [r4, #0]
 8007a5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	08008d5d 	.word	0x08008d5d
 8007a64:	08008e80 	.word	0x08008e80

08007a68 <__multadd>:
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	690d      	ldr	r5, [r1, #16]
 8007a6e:	4607      	mov	r7, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	461e      	mov	r6, r3
 8007a74:	f101 0c14 	add.w	ip, r1, #20
 8007a78:	2000      	movs	r0, #0
 8007a7a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a7e:	b299      	uxth	r1, r3
 8007a80:	fb02 6101 	mla	r1, r2, r1, r6
 8007a84:	0c1e      	lsrs	r6, r3, #16
 8007a86:	0c0b      	lsrs	r3, r1, #16
 8007a88:	fb02 3306 	mla	r3, r2, r6, r3
 8007a8c:	b289      	uxth	r1, r1
 8007a8e:	3001      	adds	r0, #1
 8007a90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a94:	4285      	cmp	r5, r0
 8007a96:	f84c 1b04 	str.w	r1, [ip], #4
 8007a9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a9e:	dcec      	bgt.n	8007a7a <__multadd+0x12>
 8007aa0:	b30e      	cbz	r6, 8007ae6 <__multadd+0x7e>
 8007aa2:	68a3      	ldr	r3, [r4, #8]
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	dc19      	bgt.n	8007adc <__multadd+0x74>
 8007aa8:	6861      	ldr	r1, [r4, #4]
 8007aaa:	4638      	mov	r0, r7
 8007aac:	3101      	adds	r1, #1
 8007aae:	f7ff ff79 	bl	80079a4 <_Balloc>
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	b928      	cbnz	r0, 8007ac2 <__multadd+0x5a>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <__multadd+0x84>)
 8007aba:	480d      	ldr	r0, [pc, #52]	; (8007af0 <__multadd+0x88>)
 8007abc:	21ba      	movs	r1, #186	; 0xba
 8007abe:	f7fe ffd7 	bl	8006a70 <__assert_func>
 8007ac2:	6922      	ldr	r2, [r4, #16]
 8007ac4:	3202      	adds	r2, #2
 8007ac6:	f104 010c 	add.w	r1, r4, #12
 8007aca:	0092      	lsls	r2, r2, #2
 8007acc:	300c      	adds	r0, #12
 8007ace:	f000 feef 	bl	80088b0 <memcpy>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff ffa5 	bl	8007a24 <_Bfree>
 8007ada:	4644      	mov	r4, r8
 8007adc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	615e      	str	r6, [r3, #20]
 8007ae4:	6125      	str	r5, [r4, #16]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aec:	08008e6f 	.word	0x08008e6f
 8007af0:	08008e80 	.word	0x08008e80

08007af4 <__hi0bits>:
 8007af4:	0c03      	lsrs	r3, r0, #16
 8007af6:	041b      	lsls	r3, r3, #16
 8007af8:	b9d3      	cbnz	r3, 8007b30 <__hi0bits+0x3c>
 8007afa:	0400      	lsls	r0, r0, #16
 8007afc:	2310      	movs	r3, #16
 8007afe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b02:	bf04      	itt	eq
 8007b04:	0200      	lsleq	r0, r0, #8
 8007b06:	3308      	addeq	r3, #8
 8007b08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b0c:	bf04      	itt	eq
 8007b0e:	0100      	lsleq	r0, r0, #4
 8007b10:	3304      	addeq	r3, #4
 8007b12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b16:	bf04      	itt	eq
 8007b18:	0080      	lsleq	r0, r0, #2
 8007b1a:	3302      	addeq	r3, #2
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	db05      	blt.n	8007b2c <__hi0bits+0x38>
 8007b20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b24:	f103 0301 	add.w	r3, r3, #1
 8007b28:	bf08      	it	eq
 8007b2a:	2320      	moveq	r3, #32
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	4770      	bx	lr
 8007b30:	2300      	movs	r3, #0
 8007b32:	e7e4      	b.n	8007afe <__hi0bits+0xa>

08007b34 <__lo0bits>:
 8007b34:	6803      	ldr	r3, [r0, #0]
 8007b36:	f013 0207 	ands.w	r2, r3, #7
 8007b3a:	d00c      	beq.n	8007b56 <__lo0bits+0x22>
 8007b3c:	07d9      	lsls	r1, r3, #31
 8007b3e:	d422      	bmi.n	8007b86 <__lo0bits+0x52>
 8007b40:	079a      	lsls	r2, r3, #30
 8007b42:	bf49      	itett	mi
 8007b44:	085b      	lsrmi	r3, r3, #1
 8007b46:	089b      	lsrpl	r3, r3, #2
 8007b48:	6003      	strmi	r3, [r0, #0]
 8007b4a:	2201      	movmi	r2, #1
 8007b4c:	bf5c      	itt	pl
 8007b4e:	6003      	strpl	r3, [r0, #0]
 8007b50:	2202      	movpl	r2, #2
 8007b52:	4610      	mov	r0, r2
 8007b54:	4770      	bx	lr
 8007b56:	b299      	uxth	r1, r3
 8007b58:	b909      	cbnz	r1, 8007b5e <__lo0bits+0x2a>
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	2210      	movs	r2, #16
 8007b5e:	b2d9      	uxtb	r1, r3
 8007b60:	b909      	cbnz	r1, 8007b66 <__lo0bits+0x32>
 8007b62:	3208      	adds	r2, #8
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	0719      	lsls	r1, r3, #28
 8007b68:	bf04      	itt	eq
 8007b6a:	091b      	lsreq	r3, r3, #4
 8007b6c:	3204      	addeq	r2, #4
 8007b6e:	0799      	lsls	r1, r3, #30
 8007b70:	bf04      	itt	eq
 8007b72:	089b      	lsreq	r3, r3, #2
 8007b74:	3202      	addeq	r2, #2
 8007b76:	07d9      	lsls	r1, r3, #31
 8007b78:	d403      	bmi.n	8007b82 <__lo0bits+0x4e>
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	f102 0201 	add.w	r2, r2, #1
 8007b80:	d003      	beq.n	8007b8a <__lo0bits+0x56>
 8007b82:	6003      	str	r3, [r0, #0]
 8007b84:	e7e5      	b.n	8007b52 <__lo0bits+0x1e>
 8007b86:	2200      	movs	r2, #0
 8007b88:	e7e3      	b.n	8007b52 <__lo0bits+0x1e>
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	e7e1      	b.n	8007b52 <__lo0bits+0x1e>
	...

08007b90 <__i2b>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	460c      	mov	r4, r1
 8007b94:	2101      	movs	r1, #1
 8007b96:	f7ff ff05 	bl	80079a4 <_Balloc>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	b928      	cbnz	r0, 8007baa <__i2b+0x1a>
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <__i2b+0x24>)
 8007ba0:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <__i2b+0x28>)
 8007ba2:	f240 1145 	movw	r1, #325	; 0x145
 8007ba6:	f7fe ff63 	bl	8006a70 <__assert_func>
 8007baa:	2301      	movs	r3, #1
 8007bac:	6144      	str	r4, [r0, #20]
 8007bae:	6103      	str	r3, [r0, #16]
 8007bb0:	bd10      	pop	{r4, pc}
 8007bb2:	bf00      	nop
 8007bb4:	08008e6f 	.word	0x08008e6f
 8007bb8:	08008e80 	.word	0x08008e80

08007bbc <__multiply>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	4691      	mov	r9, r2
 8007bc2:	690a      	ldr	r2, [r1, #16]
 8007bc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	bfb8      	it	lt
 8007bcc:	460b      	movlt	r3, r1
 8007bce:	460c      	mov	r4, r1
 8007bd0:	bfbc      	itt	lt
 8007bd2:	464c      	movlt	r4, r9
 8007bd4:	4699      	movlt	r9, r3
 8007bd6:	6927      	ldr	r7, [r4, #16]
 8007bd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bdc:	68a3      	ldr	r3, [r4, #8]
 8007bde:	6861      	ldr	r1, [r4, #4]
 8007be0:	eb07 060a 	add.w	r6, r7, sl
 8007be4:	42b3      	cmp	r3, r6
 8007be6:	b085      	sub	sp, #20
 8007be8:	bfb8      	it	lt
 8007bea:	3101      	addlt	r1, #1
 8007bec:	f7ff feda 	bl	80079a4 <_Balloc>
 8007bf0:	b930      	cbnz	r0, 8007c00 <__multiply+0x44>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b44      	ldr	r3, [pc, #272]	; (8007d08 <__multiply+0x14c>)
 8007bf6:	4845      	ldr	r0, [pc, #276]	; (8007d0c <__multiply+0x150>)
 8007bf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bfc:	f7fe ff38 	bl	8006a70 <__assert_func>
 8007c00:	f100 0514 	add.w	r5, r0, #20
 8007c04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c08:	462b      	mov	r3, r5
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4543      	cmp	r3, r8
 8007c0e:	d321      	bcc.n	8007c54 <__multiply+0x98>
 8007c10:	f104 0314 	add.w	r3, r4, #20
 8007c14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c18:	f109 0314 	add.w	r3, r9, #20
 8007c1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c20:	9202      	str	r2, [sp, #8]
 8007c22:	1b3a      	subs	r2, r7, r4
 8007c24:	3a15      	subs	r2, #21
 8007c26:	f022 0203 	bic.w	r2, r2, #3
 8007c2a:	3204      	adds	r2, #4
 8007c2c:	f104 0115 	add.w	r1, r4, #21
 8007c30:	428f      	cmp	r7, r1
 8007c32:	bf38      	it	cc
 8007c34:	2204      	movcc	r2, #4
 8007c36:	9201      	str	r2, [sp, #4]
 8007c38:	9a02      	ldr	r2, [sp, #8]
 8007c3a:	9303      	str	r3, [sp, #12]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d80c      	bhi.n	8007c5a <__multiply+0x9e>
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	dd03      	ble.n	8007c4c <__multiply+0x90>
 8007c44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d05b      	beq.n	8007d04 <__multiply+0x148>
 8007c4c:	6106      	str	r6, [r0, #16]
 8007c4e:	b005      	add	sp, #20
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	f843 2b04 	str.w	r2, [r3], #4
 8007c58:	e7d8      	b.n	8007c0c <__multiply+0x50>
 8007c5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c5e:	f1ba 0f00 	cmp.w	sl, #0
 8007c62:	d024      	beq.n	8007cae <__multiply+0xf2>
 8007c64:	f104 0e14 	add.w	lr, r4, #20
 8007c68:	46a9      	mov	r9, r5
 8007c6a:	f04f 0c00 	mov.w	ip, #0
 8007c6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c72:	f8d9 1000 	ldr.w	r1, [r9]
 8007c76:	fa1f fb82 	uxth.w	fp, r2
 8007c7a:	b289      	uxth	r1, r1
 8007c7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c84:	f8d9 2000 	ldr.w	r2, [r9]
 8007c88:	4461      	add	r1, ip
 8007c8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c96:	b289      	uxth	r1, r1
 8007c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c9c:	4577      	cmp	r7, lr
 8007c9e:	f849 1b04 	str.w	r1, [r9], #4
 8007ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ca6:	d8e2      	bhi.n	8007c6e <__multiply+0xb2>
 8007ca8:	9a01      	ldr	r2, [sp, #4]
 8007caa:	f845 c002 	str.w	ip, [r5, r2]
 8007cae:	9a03      	ldr	r2, [sp, #12]
 8007cb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	f1b9 0f00 	cmp.w	r9, #0
 8007cba:	d021      	beq.n	8007d00 <__multiply+0x144>
 8007cbc:	6829      	ldr	r1, [r5, #0]
 8007cbe:	f104 0c14 	add.w	ip, r4, #20
 8007cc2:	46ae      	mov	lr, r5
 8007cc4:	f04f 0a00 	mov.w	sl, #0
 8007cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8007ccc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007cd0:	fb09 220b 	mla	r2, r9, fp, r2
 8007cd4:	4452      	add	r2, sl
 8007cd6:	b289      	uxth	r1, r1
 8007cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cdc:	f84e 1b04 	str.w	r1, [lr], #4
 8007ce0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ce4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ce8:	f8be 1000 	ldrh.w	r1, [lr]
 8007cec:	fb09 110a 	mla	r1, r9, sl, r1
 8007cf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007cf4:	4567      	cmp	r7, ip
 8007cf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cfa:	d8e5      	bhi.n	8007cc8 <__multiply+0x10c>
 8007cfc:	9a01      	ldr	r2, [sp, #4]
 8007cfe:	50a9      	str	r1, [r5, r2]
 8007d00:	3504      	adds	r5, #4
 8007d02:	e799      	b.n	8007c38 <__multiply+0x7c>
 8007d04:	3e01      	subs	r6, #1
 8007d06:	e79b      	b.n	8007c40 <__multiply+0x84>
 8007d08:	08008e6f 	.word	0x08008e6f
 8007d0c:	08008e80 	.word	0x08008e80

08007d10 <__pow5mult>:
 8007d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d14:	4615      	mov	r5, r2
 8007d16:	f012 0203 	ands.w	r2, r2, #3
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	d007      	beq.n	8007d30 <__pow5mult+0x20>
 8007d20:	4c25      	ldr	r4, [pc, #148]	; (8007db8 <__pow5mult+0xa8>)
 8007d22:	3a01      	subs	r2, #1
 8007d24:	2300      	movs	r3, #0
 8007d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d2a:	f7ff fe9d 	bl	8007a68 <__multadd>
 8007d2e:	4607      	mov	r7, r0
 8007d30:	10ad      	asrs	r5, r5, #2
 8007d32:	d03d      	beq.n	8007db0 <__pow5mult+0xa0>
 8007d34:	69f4      	ldr	r4, [r6, #28]
 8007d36:	b97c      	cbnz	r4, 8007d58 <__pow5mult+0x48>
 8007d38:	2010      	movs	r0, #16
 8007d3a:	f7ff fd7f 	bl	800783c <malloc>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	61f0      	str	r0, [r6, #28]
 8007d42:	b928      	cbnz	r0, 8007d50 <__pow5mult+0x40>
 8007d44:	4b1d      	ldr	r3, [pc, #116]	; (8007dbc <__pow5mult+0xac>)
 8007d46:	481e      	ldr	r0, [pc, #120]	; (8007dc0 <__pow5mult+0xb0>)
 8007d48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d4c:	f7fe fe90 	bl	8006a70 <__assert_func>
 8007d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d54:	6004      	str	r4, [r0, #0]
 8007d56:	60c4      	str	r4, [r0, #12]
 8007d58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d60:	b94c      	cbnz	r4, 8007d76 <__pow5mult+0x66>
 8007d62:	f240 2171 	movw	r1, #625	; 0x271
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7ff ff12 	bl	8007b90 <__i2b>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d72:	4604      	mov	r4, r0
 8007d74:	6003      	str	r3, [r0, #0]
 8007d76:	f04f 0900 	mov.w	r9, #0
 8007d7a:	07eb      	lsls	r3, r5, #31
 8007d7c:	d50a      	bpl.n	8007d94 <__pow5mult+0x84>
 8007d7e:	4639      	mov	r1, r7
 8007d80:	4622      	mov	r2, r4
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff ff1a 	bl	8007bbc <__multiply>
 8007d88:	4639      	mov	r1, r7
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7ff fe49 	bl	8007a24 <_Bfree>
 8007d92:	4647      	mov	r7, r8
 8007d94:	106d      	asrs	r5, r5, #1
 8007d96:	d00b      	beq.n	8007db0 <__pow5mult+0xa0>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	b938      	cbnz	r0, 8007dac <__pow5mult+0x9c>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ff0b 	bl	8007bbc <__multiply>
 8007da6:	6020      	str	r0, [r4, #0]
 8007da8:	f8c0 9000 	str.w	r9, [r0]
 8007dac:	4604      	mov	r4, r0
 8007dae:	e7e4      	b.n	8007d7a <__pow5mult+0x6a>
 8007db0:	4638      	mov	r0, r7
 8007db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db6:	bf00      	nop
 8007db8:	08008fd0 	.word	0x08008fd0
 8007dbc:	08008d5d 	.word	0x08008d5d
 8007dc0:	08008e80 	.word	0x08008e80

08007dc4 <__lshift>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6849      	ldr	r1, [r1, #4]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	4691      	mov	r9, r2
 8007dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ddc:	f108 0601 	add.w	r6, r8, #1
 8007de0:	42b3      	cmp	r3, r6
 8007de2:	db0b      	blt.n	8007dfc <__lshift+0x38>
 8007de4:	4638      	mov	r0, r7
 8007de6:	f7ff fddd 	bl	80079a4 <_Balloc>
 8007dea:	4605      	mov	r5, r0
 8007dec:	b948      	cbnz	r0, 8007e02 <__lshift+0x3e>
 8007dee:	4602      	mov	r2, r0
 8007df0:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <__lshift+0xd0>)
 8007df2:	4829      	ldr	r0, [pc, #164]	; (8007e98 <__lshift+0xd4>)
 8007df4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007df8:	f7fe fe3a 	bl	8006a70 <__assert_func>
 8007dfc:	3101      	adds	r1, #1
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	e7ee      	b.n	8007de0 <__lshift+0x1c>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f100 0114 	add.w	r1, r0, #20
 8007e08:	f100 0210 	add.w	r2, r0, #16
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	4553      	cmp	r3, sl
 8007e10:	db33      	blt.n	8007e7a <__lshift+0xb6>
 8007e12:	6920      	ldr	r0, [r4, #16]
 8007e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e18:	f104 0314 	add.w	r3, r4, #20
 8007e1c:	f019 091f 	ands.w	r9, r9, #31
 8007e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e28:	d02b      	beq.n	8007e82 <__lshift+0xbe>
 8007e2a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e2e:	468a      	mov	sl, r1
 8007e30:	2200      	movs	r2, #0
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	fa00 f009 	lsl.w	r0, r0, r9
 8007e38:	4310      	orrs	r0, r2
 8007e3a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e42:	459c      	cmp	ip, r3
 8007e44:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e48:	d8f3      	bhi.n	8007e32 <__lshift+0x6e>
 8007e4a:	ebac 0304 	sub.w	r3, ip, r4
 8007e4e:	3b15      	subs	r3, #21
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	3304      	adds	r3, #4
 8007e56:	f104 0015 	add.w	r0, r4, #21
 8007e5a:	4584      	cmp	ip, r0
 8007e5c:	bf38      	it	cc
 8007e5e:	2304      	movcc	r3, #4
 8007e60:	50ca      	str	r2, [r1, r3]
 8007e62:	b10a      	cbz	r2, 8007e68 <__lshift+0xa4>
 8007e64:	f108 0602 	add.w	r6, r8, #2
 8007e68:	3e01      	subs	r6, #1
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	612e      	str	r6, [r5, #16]
 8007e6e:	4621      	mov	r1, r4
 8007e70:	f7ff fdd8 	bl	8007a24 <_Bfree>
 8007e74:	4628      	mov	r0, r5
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e7e:	3301      	adds	r3, #1
 8007e80:	e7c5      	b.n	8007e0e <__lshift+0x4a>
 8007e82:	3904      	subs	r1, #4
 8007e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e88:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e8c:	459c      	cmp	ip, r3
 8007e8e:	d8f9      	bhi.n	8007e84 <__lshift+0xc0>
 8007e90:	e7ea      	b.n	8007e68 <__lshift+0xa4>
 8007e92:	bf00      	nop
 8007e94:	08008e6f 	.word	0x08008e6f
 8007e98:	08008e80 	.word	0x08008e80

08007e9c <__mcmp>:
 8007e9c:	b530      	push	{r4, r5, lr}
 8007e9e:	6902      	ldr	r2, [r0, #16]
 8007ea0:	690c      	ldr	r4, [r1, #16]
 8007ea2:	1b12      	subs	r2, r2, r4
 8007ea4:	d10e      	bne.n	8007ec4 <__mcmp+0x28>
 8007ea6:	f100 0314 	add.w	r3, r0, #20
 8007eaa:	3114      	adds	r1, #20
 8007eac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007eb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007eb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007eb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ebc:	42a5      	cmp	r5, r4
 8007ebe:	d003      	beq.n	8007ec8 <__mcmp+0x2c>
 8007ec0:	d305      	bcc.n	8007ece <__mcmp+0x32>
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	bd30      	pop	{r4, r5, pc}
 8007ec8:	4283      	cmp	r3, r0
 8007eca:	d3f3      	bcc.n	8007eb4 <__mcmp+0x18>
 8007ecc:	e7fa      	b.n	8007ec4 <__mcmp+0x28>
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	e7f7      	b.n	8007ec4 <__mcmp+0x28>

08007ed4 <__mdiff>:
 8007ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	4606      	mov	r6, r0
 8007edc:	4611      	mov	r1, r2
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4690      	mov	r8, r2
 8007ee2:	f7ff ffdb 	bl	8007e9c <__mcmp>
 8007ee6:	1e05      	subs	r5, r0, #0
 8007ee8:	d110      	bne.n	8007f0c <__mdiff+0x38>
 8007eea:	4629      	mov	r1, r5
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7ff fd59 	bl	80079a4 <_Balloc>
 8007ef2:	b930      	cbnz	r0, 8007f02 <__mdiff+0x2e>
 8007ef4:	4b3a      	ldr	r3, [pc, #232]	; (8007fe0 <__mdiff+0x10c>)
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	f240 2137 	movw	r1, #567	; 0x237
 8007efc:	4839      	ldr	r0, [pc, #228]	; (8007fe4 <__mdiff+0x110>)
 8007efe:	f7fe fdb7 	bl	8006a70 <__assert_func>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	bfa4      	itt	ge
 8007f0e:	4643      	movge	r3, r8
 8007f10:	46a0      	movge	r8, r4
 8007f12:	4630      	mov	r0, r6
 8007f14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f18:	bfa6      	itte	ge
 8007f1a:	461c      	movge	r4, r3
 8007f1c:	2500      	movge	r5, #0
 8007f1e:	2501      	movlt	r5, #1
 8007f20:	f7ff fd40 	bl	80079a4 <_Balloc>
 8007f24:	b920      	cbnz	r0, 8007f30 <__mdiff+0x5c>
 8007f26:	4b2e      	ldr	r3, [pc, #184]	; (8007fe0 <__mdiff+0x10c>)
 8007f28:	4602      	mov	r2, r0
 8007f2a:	f240 2145 	movw	r1, #581	; 0x245
 8007f2e:	e7e5      	b.n	8007efc <__mdiff+0x28>
 8007f30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f34:	6926      	ldr	r6, [r4, #16]
 8007f36:	60c5      	str	r5, [r0, #12]
 8007f38:	f104 0914 	add.w	r9, r4, #20
 8007f3c:	f108 0514 	add.w	r5, r8, #20
 8007f40:	f100 0e14 	add.w	lr, r0, #20
 8007f44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f4c:	f108 0210 	add.w	r2, r8, #16
 8007f50:	46f2      	mov	sl, lr
 8007f52:	2100      	movs	r1, #0
 8007f54:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f5c:	fa11 f88b 	uxtah	r8, r1, fp
 8007f60:	b299      	uxth	r1, r3
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	eba8 0801 	sub.w	r8, r8, r1
 8007f68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f70:	fa1f f888 	uxth.w	r8, r8
 8007f74:	1419      	asrs	r1, r3, #16
 8007f76:	454e      	cmp	r6, r9
 8007f78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f7c:	f84a 3b04 	str.w	r3, [sl], #4
 8007f80:	d8e8      	bhi.n	8007f54 <__mdiff+0x80>
 8007f82:	1b33      	subs	r3, r6, r4
 8007f84:	3b15      	subs	r3, #21
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	3415      	adds	r4, #21
 8007f8e:	42a6      	cmp	r6, r4
 8007f90:	bf38      	it	cc
 8007f92:	2304      	movcc	r3, #4
 8007f94:	441d      	add	r5, r3
 8007f96:	4473      	add	r3, lr
 8007f98:	469e      	mov	lr, r3
 8007f9a:	462e      	mov	r6, r5
 8007f9c:	4566      	cmp	r6, ip
 8007f9e:	d30e      	bcc.n	8007fbe <__mdiff+0xea>
 8007fa0:	f10c 0203 	add.w	r2, ip, #3
 8007fa4:	1b52      	subs	r2, r2, r5
 8007fa6:	f022 0203 	bic.w	r2, r2, #3
 8007faa:	3d03      	subs	r5, #3
 8007fac:	45ac      	cmp	ip, r5
 8007fae:	bf38      	it	cc
 8007fb0:	2200      	movcc	r2, #0
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fb8:	b17a      	cbz	r2, 8007fda <__mdiff+0x106>
 8007fba:	6107      	str	r7, [r0, #16]
 8007fbc:	e7a4      	b.n	8007f08 <__mdiff+0x34>
 8007fbe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007fc2:	fa11 f288 	uxtah	r2, r1, r8
 8007fc6:	1414      	asrs	r4, r2, #16
 8007fc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fd2:	f84e 2b04 	str.w	r2, [lr], #4
 8007fd6:	1421      	asrs	r1, r4, #16
 8007fd8:	e7e0      	b.n	8007f9c <__mdiff+0xc8>
 8007fda:	3f01      	subs	r7, #1
 8007fdc:	e7ea      	b.n	8007fb4 <__mdiff+0xe0>
 8007fde:	bf00      	nop
 8007fe0:	08008e6f 	.word	0x08008e6f
 8007fe4:	08008e80 	.word	0x08008e80

08007fe8 <__d2b>:
 8007fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	460f      	mov	r7, r1
 8007fee:	2101      	movs	r1, #1
 8007ff0:	ec59 8b10 	vmov	r8, r9, d0
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	f7ff fcd5 	bl	80079a4 <_Balloc>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b930      	cbnz	r0, 800800c <__d2b+0x24>
 8007ffe:	4602      	mov	r2, r0
 8008000:	4b24      	ldr	r3, [pc, #144]	; (8008094 <__d2b+0xac>)
 8008002:	4825      	ldr	r0, [pc, #148]	; (8008098 <__d2b+0xb0>)
 8008004:	f240 310f 	movw	r1, #783	; 0x30f
 8008008:	f7fe fd32 	bl	8006a70 <__assert_func>
 800800c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008014:	bb2d      	cbnz	r5, 8008062 <__d2b+0x7a>
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	f1b8 0300 	subs.w	r3, r8, #0
 800801c:	d026      	beq.n	800806c <__d2b+0x84>
 800801e:	4668      	mov	r0, sp
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	f7ff fd87 	bl	8007b34 <__lo0bits>
 8008026:	e9dd 1200 	ldrd	r1, r2, [sp]
 800802a:	b1e8      	cbz	r0, 8008068 <__d2b+0x80>
 800802c:	f1c0 0320 	rsb	r3, r0, #32
 8008030:	fa02 f303 	lsl.w	r3, r2, r3
 8008034:	430b      	orrs	r3, r1
 8008036:	40c2      	lsrs	r2, r0
 8008038:	6163      	str	r3, [r4, #20]
 800803a:	9201      	str	r2, [sp, #4]
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	61a3      	str	r3, [r4, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	bf14      	ite	ne
 8008044:	2202      	movne	r2, #2
 8008046:	2201      	moveq	r2, #1
 8008048:	6122      	str	r2, [r4, #16]
 800804a:	b1bd      	cbz	r5, 800807c <__d2b+0x94>
 800804c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008050:	4405      	add	r5, r0
 8008052:	603d      	str	r5, [r7, #0]
 8008054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008058:	6030      	str	r0, [r6, #0]
 800805a:	4620      	mov	r0, r4
 800805c:	b003      	add	sp, #12
 800805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008066:	e7d6      	b.n	8008016 <__d2b+0x2e>
 8008068:	6161      	str	r1, [r4, #20]
 800806a:	e7e7      	b.n	800803c <__d2b+0x54>
 800806c:	a801      	add	r0, sp, #4
 800806e:	f7ff fd61 	bl	8007b34 <__lo0bits>
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	6163      	str	r3, [r4, #20]
 8008076:	3020      	adds	r0, #32
 8008078:	2201      	movs	r2, #1
 800807a:	e7e5      	b.n	8008048 <__d2b+0x60>
 800807c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008080:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008084:	6038      	str	r0, [r7, #0]
 8008086:	6918      	ldr	r0, [r3, #16]
 8008088:	f7ff fd34 	bl	8007af4 <__hi0bits>
 800808c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008090:	e7e2      	b.n	8008058 <__d2b+0x70>
 8008092:	bf00      	nop
 8008094:	08008e6f 	.word	0x08008e6f
 8008098:	08008e80 	.word	0x08008e80

0800809c <__ssputs_r>:
 800809c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a0:	688e      	ldr	r6, [r1, #8]
 80080a2:	461f      	mov	r7, r3
 80080a4:	42be      	cmp	r6, r7
 80080a6:	680b      	ldr	r3, [r1, #0]
 80080a8:	4682      	mov	sl, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	4690      	mov	r8, r2
 80080ae:	d82c      	bhi.n	800810a <__ssputs_r+0x6e>
 80080b0:	898a      	ldrh	r2, [r1, #12]
 80080b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080b6:	d026      	beq.n	8008106 <__ssputs_r+0x6a>
 80080b8:	6965      	ldr	r5, [r4, #20]
 80080ba:	6909      	ldr	r1, [r1, #16]
 80080bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080c0:	eba3 0901 	sub.w	r9, r3, r1
 80080c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c8:	1c7b      	adds	r3, r7, #1
 80080ca:	444b      	add	r3, r9
 80080cc:	106d      	asrs	r5, r5, #1
 80080ce:	429d      	cmp	r5, r3
 80080d0:	bf38      	it	cc
 80080d2:	461d      	movcc	r5, r3
 80080d4:	0553      	lsls	r3, r2, #21
 80080d6:	d527      	bpl.n	8008128 <__ssputs_r+0x8c>
 80080d8:	4629      	mov	r1, r5
 80080da:	f7ff fbd7 	bl	800788c <_malloc_r>
 80080de:	4606      	mov	r6, r0
 80080e0:	b360      	cbz	r0, 800813c <__ssputs_r+0xa0>
 80080e2:	6921      	ldr	r1, [r4, #16]
 80080e4:	464a      	mov	r2, r9
 80080e6:	f000 fbe3 	bl	80088b0 <memcpy>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	6126      	str	r6, [r4, #16]
 80080f8:	6165      	str	r5, [r4, #20]
 80080fa:	444e      	add	r6, r9
 80080fc:	eba5 0509 	sub.w	r5, r5, r9
 8008100:	6026      	str	r6, [r4, #0]
 8008102:	60a5      	str	r5, [r4, #8]
 8008104:	463e      	mov	r6, r7
 8008106:	42be      	cmp	r6, r7
 8008108:	d900      	bls.n	800810c <__ssputs_r+0x70>
 800810a:	463e      	mov	r6, r7
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	4632      	mov	r2, r6
 8008110:	4641      	mov	r1, r8
 8008112:	f000 fb81 	bl	8008818 <memmove>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	1b9b      	subs	r3, r3, r6
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	4433      	add	r3, r6
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	2000      	movs	r0, #0
 8008124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008128:	462a      	mov	r2, r5
 800812a:	f000 fbfe 	bl	800892a <_realloc_r>
 800812e:	4606      	mov	r6, r0
 8008130:	2800      	cmp	r0, #0
 8008132:	d1e0      	bne.n	80080f6 <__ssputs_r+0x5a>
 8008134:	6921      	ldr	r1, [r4, #16]
 8008136:	4650      	mov	r0, sl
 8008138:	f7ff fb34 	bl	80077a4 <_free_r>
 800813c:	230c      	movs	r3, #12
 800813e:	f8ca 3000 	str.w	r3, [sl]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	e7e9      	b.n	8008124 <__ssputs_r+0x88>

08008150 <_svfiprintf_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	4698      	mov	r8, r3
 8008156:	898b      	ldrh	r3, [r1, #12]
 8008158:	061b      	lsls	r3, r3, #24
 800815a:	b09d      	sub	sp, #116	; 0x74
 800815c:	4607      	mov	r7, r0
 800815e:	460d      	mov	r5, r1
 8008160:	4614      	mov	r4, r2
 8008162:	d50e      	bpl.n	8008182 <_svfiprintf_r+0x32>
 8008164:	690b      	ldr	r3, [r1, #16]
 8008166:	b963      	cbnz	r3, 8008182 <_svfiprintf_r+0x32>
 8008168:	2140      	movs	r1, #64	; 0x40
 800816a:	f7ff fb8f 	bl	800788c <_malloc_r>
 800816e:	6028      	str	r0, [r5, #0]
 8008170:	6128      	str	r0, [r5, #16]
 8008172:	b920      	cbnz	r0, 800817e <_svfiprintf_r+0x2e>
 8008174:	230c      	movs	r3, #12
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e0d0      	b.n	8008320 <_svfiprintf_r+0x1d0>
 800817e:	2340      	movs	r3, #64	; 0x40
 8008180:	616b      	str	r3, [r5, #20]
 8008182:	2300      	movs	r3, #0
 8008184:	9309      	str	r3, [sp, #36]	; 0x24
 8008186:	2320      	movs	r3, #32
 8008188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800818c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008190:	2330      	movs	r3, #48	; 0x30
 8008192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008338 <_svfiprintf_r+0x1e8>
 8008196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800819a:	f04f 0901 	mov.w	r9, #1
 800819e:	4623      	mov	r3, r4
 80081a0:	469a      	mov	sl, r3
 80081a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a6:	b10a      	cbz	r2, 80081ac <_svfiprintf_r+0x5c>
 80081a8:	2a25      	cmp	r2, #37	; 0x25
 80081aa:	d1f9      	bne.n	80081a0 <_svfiprintf_r+0x50>
 80081ac:	ebba 0b04 	subs.w	fp, sl, r4
 80081b0:	d00b      	beq.n	80081ca <_svfiprintf_r+0x7a>
 80081b2:	465b      	mov	r3, fp
 80081b4:	4622      	mov	r2, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ff6f 	bl	800809c <__ssputs_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	f000 80a9 	beq.w	8008316 <_svfiprintf_r+0x1c6>
 80081c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c6:	445a      	add	r2, fp
 80081c8:	9209      	str	r2, [sp, #36]	; 0x24
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80a1 	beq.w	8008316 <_svfiprintf_r+0x1c6>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081de:	f10a 0a01 	add.w	sl, sl, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ea:	931a      	str	r3, [sp, #104]	; 0x68
 80081ec:	4654      	mov	r4, sl
 80081ee:	2205      	movs	r2, #5
 80081f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f4:	4850      	ldr	r0, [pc, #320]	; (8008338 <_svfiprintf_r+0x1e8>)
 80081f6:	f7f8 f803 	bl	8000200 <memchr>
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	b9d8      	cbnz	r0, 8008236 <_svfiprintf_r+0xe6>
 80081fe:	06d0      	lsls	r0, r2, #27
 8008200:	bf44      	itt	mi
 8008202:	2320      	movmi	r3, #32
 8008204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008208:	0711      	lsls	r1, r2, #28
 800820a:	bf44      	itt	mi
 800820c:	232b      	movmi	r3, #43	; 0x2b
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008212:	f89a 3000 	ldrb.w	r3, [sl]
 8008216:	2b2a      	cmp	r3, #42	; 0x2a
 8008218:	d015      	beq.n	8008246 <_svfiprintf_r+0xf6>
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	4654      	mov	r4, sl
 800821e:	2000      	movs	r0, #0
 8008220:	f04f 0c0a 	mov.w	ip, #10
 8008224:	4621      	mov	r1, r4
 8008226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822a:	3b30      	subs	r3, #48	; 0x30
 800822c:	2b09      	cmp	r3, #9
 800822e:	d94d      	bls.n	80082cc <_svfiprintf_r+0x17c>
 8008230:	b1b0      	cbz	r0, 8008260 <_svfiprintf_r+0x110>
 8008232:	9207      	str	r2, [sp, #28]
 8008234:	e014      	b.n	8008260 <_svfiprintf_r+0x110>
 8008236:	eba0 0308 	sub.w	r3, r0, r8
 800823a:	fa09 f303 	lsl.w	r3, r9, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	46a2      	mov	sl, r4
 8008244:	e7d2      	b.n	80081ec <_svfiprintf_r+0x9c>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9103      	str	r1, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfbb      	ittet	lt
 8008252:	425b      	neglt	r3, r3
 8008254:	f042 0202 	orrlt.w	r2, r2, #2
 8008258:	9307      	strge	r3, [sp, #28]
 800825a:	9307      	strlt	r3, [sp, #28]
 800825c:	bfb8      	it	lt
 800825e:	9204      	strlt	r2, [sp, #16]
 8008260:	7823      	ldrb	r3, [r4, #0]
 8008262:	2b2e      	cmp	r3, #46	; 0x2e
 8008264:	d10c      	bne.n	8008280 <_svfiprintf_r+0x130>
 8008266:	7863      	ldrb	r3, [r4, #1]
 8008268:	2b2a      	cmp	r3, #42	; 0x2a
 800826a:	d134      	bne.n	80082d6 <_svfiprintf_r+0x186>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	9203      	str	r2, [sp, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	bfb8      	it	lt
 8008278:	f04f 33ff 	movlt.w	r3, #4294967295
 800827c:	3402      	adds	r4, #2
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008348 <_svfiprintf_r+0x1f8>
 8008284:	7821      	ldrb	r1, [r4, #0]
 8008286:	2203      	movs	r2, #3
 8008288:	4650      	mov	r0, sl
 800828a:	f7f7 ffb9 	bl	8000200 <memchr>
 800828e:	b138      	cbz	r0, 80082a0 <_svfiprintf_r+0x150>
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	eba0 000a 	sub.w	r0, r0, sl
 8008296:	2240      	movs	r2, #64	; 0x40
 8008298:	4082      	lsls	r2, r0
 800829a:	4313      	orrs	r3, r2
 800829c:	3401      	adds	r4, #1
 800829e:	9304      	str	r3, [sp, #16]
 80082a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a4:	4825      	ldr	r0, [pc, #148]	; (800833c <_svfiprintf_r+0x1ec>)
 80082a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082aa:	2206      	movs	r2, #6
 80082ac:	f7f7 ffa8 	bl	8000200 <memchr>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d038      	beq.n	8008326 <_svfiprintf_r+0x1d6>
 80082b4:	4b22      	ldr	r3, [pc, #136]	; (8008340 <_svfiprintf_r+0x1f0>)
 80082b6:	bb1b      	cbnz	r3, 8008300 <_svfiprintf_r+0x1b0>
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	3307      	adds	r3, #7
 80082bc:	f023 0307 	bic.w	r3, r3, #7
 80082c0:	3308      	adds	r3, #8
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c6:	4433      	add	r3, r6
 80082c8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ca:	e768      	b.n	800819e <_svfiprintf_r+0x4e>
 80082cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d0:	460c      	mov	r4, r1
 80082d2:	2001      	movs	r0, #1
 80082d4:	e7a6      	b.n	8008224 <_svfiprintf_r+0xd4>
 80082d6:	2300      	movs	r3, #0
 80082d8:	3401      	adds	r4, #1
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	4619      	mov	r1, r3
 80082de:	f04f 0c0a 	mov.w	ip, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e8:	3a30      	subs	r2, #48	; 0x30
 80082ea:	2a09      	cmp	r2, #9
 80082ec:	d903      	bls.n	80082f6 <_svfiprintf_r+0x1a6>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c6      	beq.n	8008280 <_svfiprintf_r+0x130>
 80082f2:	9105      	str	r1, [sp, #20]
 80082f4:	e7c4      	b.n	8008280 <_svfiprintf_r+0x130>
 80082f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082fa:	4604      	mov	r4, r0
 80082fc:	2301      	movs	r3, #1
 80082fe:	e7f0      	b.n	80082e2 <_svfiprintf_r+0x192>
 8008300:	ab03      	add	r3, sp, #12
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	462a      	mov	r2, r5
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <_svfiprintf_r+0x1f4>)
 8008308:	a904      	add	r1, sp, #16
 800830a:	4638      	mov	r0, r7
 800830c:	f7fd fce6 	bl	8005cdc <_printf_float>
 8008310:	1c42      	adds	r2, r0, #1
 8008312:	4606      	mov	r6, r0
 8008314:	d1d6      	bne.n	80082c4 <_svfiprintf_r+0x174>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	065b      	lsls	r3, r3, #25
 800831a:	f53f af2d 	bmi.w	8008178 <_svfiprintf_r+0x28>
 800831e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008320:	b01d      	add	sp, #116	; 0x74
 8008322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008326:	ab03      	add	r3, sp, #12
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	462a      	mov	r2, r5
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <_svfiprintf_r+0x1f4>)
 800832e:	a904      	add	r1, sp, #16
 8008330:	4638      	mov	r0, r7
 8008332:	f7fd ff77 	bl	8006224 <_printf_i>
 8008336:	e7eb      	b.n	8008310 <_svfiprintf_r+0x1c0>
 8008338:	08008fdc 	.word	0x08008fdc
 800833c:	08008fe6 	.word	0x08008fe6
 8008340:	08005cdd 	.word	0x08005cdd
 8008344:	0800809d 	.word	0x0800809d
 8008348:	08008fe2 	.word	0x08008fe2

0800834c <__sfputc_r>:
 800834c:	6893      	ldr	r3, [r2, #8]
 800834e:	3b01      	subs	r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	b410      	push	{r4}
 8008354:	6093      	str	r3, [r2, #8]
 8008356:	da08      	bge.n	800836a <__sfputc_r+0x1e>
 8008358:	6994      	ldr	r4, [r2, #24]
 800835a:	42a3      	cmp	r3, r4
 800835c:	db01      	blt.n	8008362 <__sfputc_r+0x16>
 800835e:	290a      	cmp	r1, #10
 8008360:	d103      	bne.n	800836a <__sfputc_r+0x1e>
 8008362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008366:	f7fe ba12 	b.w	800678e <__swbuf_r>
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	1c58      	adds	r0, r3, #1
 800836e:	6010      	str	r0, [r2, #0]
 8008370:	7019      	strb	r1, [r3, #0]
 8008372:	4608      	mov	r0, r1
 8008374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008378:	4770      	bx	lr

0800837a <__sfputs_r>:
 800837a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	4614      	mov	r4, r2
 8008382:	18d5      	adds	r5, r2, r3
 8008384:	42ac      	cmp	r4, r5
 8008386:	d101      	bne.n	800838c <__sfputs_r+0x12>
 8008388:	2000      	movs	r0, #0
 800838a:	e007      	b.n	800839c <__sfputs_r+0x22>
 800838c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008390:	463a      	mov	r2, r7
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff ffda 	bl	800834c <__sfputc_r>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d1f3      	bne.n	8008384 <__sfputs_r+0xa>
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083a0 <_vfiprintf_r>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	460d      	mov	r5, r1
 80083a6:	b09d      	sub	sp, #116	; 0x74
 80083a8:	4614      	mov	r4, r2
 80083aa:	4698      	mov	r8, r3
 80083ac:	4606      	mov	r6, r0
 80083ae:	b118      	cbz	r0, 80083b8 <_vfiprintf_r+0x18>
 80083b0:	6a03      	ldr	r3, [r0, #32]
 80083b2:	b90b      	cbnz	r3, 80083b8 <_vfiprintf_r+0x18>
 80083b4:	f7fe f8e4 	bl	8006580 <__sinit>
 80083b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ba:	07d9      	lsls	r1, r3, #31
 80083bc:	d405      	bmi.n	80083ca <_vfiprintf_r+0x2a>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	059a      	lsls	r2, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_vfiprintf_r+0x2a>
 80083c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083c6:	f7fe fb50 	bl	8006a6a <__retarget_lock_acquire_recursive>
 80083ca:	89ab      	ldrh	r3, [r5, #12]
 80083cc:	071b      	lsls	r3, r3, #28
 80083ce:	d501      	bpl.n	80083d4 <_vfiprintf_r+0x34>
 80083d0:	692b      	ldr	r3, [r5, #16]
 80083d2:	b99b      	cbnz	r3, 80083fc <_vfiprintf_r+0x5c>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7fe fa16 	bl	8006808 <__swsetup_r>
 80083dc:	b170      	cbz	r0, 80083fc <_vfiprintf_r+0x5c>
 80083de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e0:	07dc      	lsls	r4, r3, #31
 80083e2:	d504      	bpl.n	80083ee <_vfiprintf_r+0x4e>
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295
 80083e8:	b01d      	add	sp, #116	; 0x74
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	0598      	lsls	r0, r3, #22
 80083f2:	d4f7      	bmi.n	80083e4 <_vfiprintf_r+0x44>
 80083f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f6:	f7fe fb39 	bl	8006a6c <__retarget_lock_release_recursive>
 80083fa:	e7f3      	b.n	80083e4 <_vfiprintf_r+0x44>
 80083fc:	2300      	movs	r3, #0
 80083fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008400:	2320      	movs	r3, #32
 8008402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008406:	f8cd 800c 	str.w	r8, [sp, #12]
 800840a:	2330      	movs	r3, #48	; 0x30
 800840c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085c0 <_vfiprintf_r+0x220>
 8008410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008414:	f04f 0901 	mov.w	r9, #1
 8008418:	4623      	mov	r3, r4
 800841a:	469a      	mov	sl, r3
 800841c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008420:	b10a      	cbz	r2, 8008426 <_vfiprintf_r+0x86>
 8008422:	2a25      	cmp	r2, #37	; 0x25
 8008424:	d1f9      	bne.n	800841a <_vfiprintf_r+0x7a>
 8008426:	ebba 0b04 	subs.w	fp, sl, r4
 800842a:	d00b      	beq.n	8008444 <_vfiprintf_r+0xa4>
 800842c:	465b      	mov	r3, fp
 800842e:	4622      	mov	r2, r4
 8008430:	4629      	mov	r1, r5
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ffa1 	bl	800837a <__sfputs_r>
 8008438:	3001      	adds	r0, #1
 800843a:	f000 80a9 	beq.w	8008590 <_vfiprintf_r+0x1f0>
 800843e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008440:	445a      	add	r2, fp
 8008442:	9209      	str	r2, [sp, #36]	; 0x24
 8008444:	f89a 3000 	ldrb.w	r3, [sl]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80a1 	beq.w	8008590 <_vfiprintf_r+0x1f0>
 800844e:	2300      	movs	r3, #0
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008458:	f10a 0a01 	add.w	sl, sl, #1
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008464:	931a      	str	r3, [sp, #104]	; 0x68
 8008466:	4654      	mov	r4, sl
 8008468:	2205      	movs	r2, #5
 800846a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846e:	4854      	ldr	r0, [pc, #336]	; (80085c0 <_vfiprintf_r+0x220>)
 8008470:	f7f7 fec6 	bl	8000200 <memchr>
 8008474:	9a04      	ldr	r2, [sp, #16]
 8008476:	b9d8      	cbnz	r0, 80084b0 <_vfiprintf_r+0x110>
 8008478:	06d1      	lsls	r1, r2, #27
 800847a:	bf44      	itt	mi
 800847c:	2320      	movmi	r3, #32
 800847e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008482:	0713      	lsls	r3, r2, #28
 8008484:	bf44      	itt	mi
 8008486:	232b      	movmi	r3, #43	; 0x2b
 8008488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800848c:	f89a 3000 	ldrb.w	r3, [sl]
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	d015      	beq.n	80084c0 <_vfiprintf_r+0x120>
 8008494:	9a07      	ldr	r2, [sp, #28]
 8008496:	4654      	mov	r4, sl
 8008498:	2000      	movs	r0, #0
 800849a:	f04f 0c0a 	mov.w	ip, #10
 800849e:	4621      	mov	r1, r4
 80084a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a4:	3b30      	subs	r3, #48	; 0x30
 80084a6:	2b09      	cmp	r3, #9
 80084a8:	d94d      	bls.n	8008546 <_vfiprintf_r+0x1a6>
 80084aa:	b1b0      	cbz	r0, 80084da <_vfiprintf_r+0x13a>
 80084ac:	9207      	str	r2, [sp, #28]
 80084ae:	e014      	b.n	80084da <_vfiprintf_r+0x13a>
 80084b0:	eba0 0308 	sub.w	r3, r0, r8
 80084b4:	fa09 f303 	lsl.w	r3, r9, r3
 80084b8:	4313      	orrs	r3, r2
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	46a2      	mov	sl, r4
 80084be:	e7d2      	b.n	8008466 <_vfiprintf_r+0xc6>
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	1d19      	adds	r1, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	9103      	str	r1, [sp, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bfbb      	ittet	lt
 80084cc:	425b      	neglt	r3, r3
 80084ce:	f042 0202 	orrlt.w	r2, r2, #2
 80084d2:	9307      	strge	r3, [sp, #28]
 80084d4:	9307      	strlt	r3, [sp, #28]
 80084d6:	bfb8      	it	lt
 80084d8:	9204      	strlt	r2, [sp, #16]
 80084da:	7823      	ldrb	r3, [r4, #0]
 80084dc:	2b2e      	cmp	r3, #46	; 0x2e
 80084de:	d10c      	bne.n	80084fa <_vfiprintf_r+0x15a>
 80084e0:	7863      	ldrb	r3, [r4, #1]
 80084e2:	2b2a      	cmp	r3, #42	; 0x2a
 80084e4:	d134      	bne.n	8008550 <_vfiprintf_r+0x1b0>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	1d1a      	adds	r2, r3, #4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	9203      	str	r2, [sp, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bfb8      	it	lt
 80084f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80084f6:	3402      	adds	r4, #2
 80084f8:	9305      	str	r3, [sp, #20]
 80084fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085d0 <_vfiprintf_r+0x230>
 80084fe:	7821      	ldrb	r1, [r4, #0]
 8008500:	2203      	movs	r2, #3
 8008502:	4650      	mov	r0, sl
 8008504:	f7f7 fe7c 	bl	8000200 <memchr>
 8008508:	b138      	cbz	r0, 800851a <_vfiprintf_r+0x17a>
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	eba0 000a 	sub.w	r0, r0, sl
 8008510:	2240      	movs	r2, #64	; 0x40
 8008512:	4082      	lsls	r2, r0
 8008514:	4313      	orrs	r3, r2
 8008516:	3401      	adds	r4, #1
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851e:	4829      	ldr	r0, [pc, #164]	; (80085c4 <_vfiprintf_r+0x224>)
 8008520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008524:	2206      	movs	r2, #6
 8008526:	f7f7 fe6b 	bl	8000200 <memchr>
 800852a:	2800      	cmp	r0, #0
 800852c:	d03f      	beq.n	80085ae <_vfiprintf_r+0x20e>
 800852e:	4b26      	ldr	r3, [pc, #152]	; (80085c8 <_vfiprintf_r+0x228>)
 8008530:	bb1b      	cbnz	r3, 800857a <_vfiprintf_r+0x1da>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	3307      	adds	r3, #7
 8008536:	f023 0307 	bic.w	r3, r3, #7
 800853a:	3308      	adds	r3, #8
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	443b      	add	r3, r7
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	e768      	b.n	8008418 <_vfiprintf_r+0x78>
 8008546:	fb0c 3202 	mla	r2, ip, r2, r3
 800854a:	460c      	mov	r4, r1
 800854c:	2001      	movs	r0, #1
 800854e:	e7a6      	b.n	800849e <_vfiprintf_r+0xfe>
 8008550:	2300      	movs	r3, #0
 8008552:	3401      	adds	r4, #1
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	4619      	mov	r1, r3
 8008558:	f04f 0c0a 	mov.w	ip, #10
 800855c:	4620      	mov	r0, r4
 800855e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008562:	3a30      	subs	r2, #48	; 0x30
 8008564:	2a09      	cmp	r2, #9
 8008566:	d903      	bls.n	8008570 <_vfiprintf_r+0x1d0>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0c6      	beq.n	80084fa <_vfiprintf_r+0x15a>
 800856c:	9105      	str	r1, [sp, #20]
 800856e:	e7c4      	b.n	80084fa <_vfiprintf_r+0x15a>
 8008570:	fb0c 2101 	mla	r1, ip, r1, r2
 8008574:	4604      	mov	r4, r0
 8008576:	2301      	movs	r3, #1
 8008578:	e7f0      	b.n	800855c <_vfiprintf_r+0x1bc>
 800857a:	ab03      	add	r3, sp, #12
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	462a      	mov	r2, r5
 8008580:	4b12      	ldr	r3, [pc, #72]	; (80085cc <_vfiprintf_r+0x22c>)
 8008582:	a904      	add	r1, sp, #16
 8008584:	4630      	mov	r0, r6
 8008586:	f7fd fba9 	bl	8005cdc <_printf_float>
 800858a:	4607      	mov	r7, r0
 800858c:	1c78      	adds	r0, r7, #1
 800858e:	d1d6      	bne.n	800853e <_vfiprintf_r+0x19e>
 8008590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008592:	07d9      	lsls	r1, r3, #31
 8008594:	d405      	bmi.n	80085a2 <_vfiprintf_r+0x202>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	059a      	lsls	r2, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_vfiprintf_r+0x202>
 800859c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859e:	f7fe fa65 	bl	8006a6c <__retarget_lock_release_recursive>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	065b      	lsls	r3, r3, #25
 80085a6:	f53f af1d 	bmi.w	80083e4 <_vfiprintf_r+0x44>
 80085aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ac:	e71c      	b.n	80083e8 <_vfiprintf_r+0x48>
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	462a      	mov	r2, r5
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_vfiprintf_r+0x22c>)
 80085b6:	a904      	add	r1, sp, #16
 80085b8:	4630      	mov	r0, r6
 80085ba:	f7fd fe33 	bl	8006224 <_printf_i>
 80085be:	e7e4      	b.n	800858a <_vfiprintf_r+0x1ea>
 80085c0:	08008fdc 	.word	0x08008fdc
 80085c4:	08008fe6 	.word	0x08008fe6
 80085c8:	08005cdd 	.word	0x08005cdd
 80085cc:	0800837b 	.word	0x0800837b
 80085d0:	08008fe2 	.word	0x08008fe2

080085d4 <__sflush_r>:
 80085d4:	898a      	ldrh	r2, [r1, #12]
 80085d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085da:	4605      	mov	r5, r0
 80085dc:	0710      	lsls	r0, r2, #28
 80085de:	460c      	mov	r4, r1
 80085e0:	d458      	bmi.n	8008694 <__sflush_r+0xc0>
 80085e2:	684b      	ldr	r3, [r1, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc05      	bgt.n	80085f4 <__sflush_r+0x20>
 80085e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dc02      	bgt.n	80085f4 <__sflush_r+0x20>
 80085ee:	2000      	movs	r0, #0
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	d0f9      	beq.n	80085ee <__sflush_r+0x1a>
 80085fa:	2300      	movs	r3, #0
 80085fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008600:	682f      	ldr	r7, [r5, #0]
 8008602:	6a21      	ldr	r1, [r4, #32]
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	d032      	beq.n	800866e <__sflush_r+0x9a>
 8008608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	075a      	lsls	r2, r3, #29
 800860e:	d505      	bpl.n	800861c <__sflush_r+0x48>
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	1ac0      	subs	r0, r0, r3
 8008614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008616:	b10b      	cbz	r3, 800861c <__sflush_r+0x48>
 8008618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800861a:	1ac0      	subs	r0, r0, r3
 800861c:	2300      	movs	r3, #0
 800861e:	4602      	mov	r2, r0
 8008620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008622:	6a21      	ldr	r1, [r4, #32]
 8008624:	4628      	mov	r0, r5
 8008626:	47b0      	blx	r6
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	d106      	bne.n	800863c <__sflush_r+0x68>
 800862e:	6829      	ldr	r1, [r5, #0]
 8008630:	291d      	cmp	r1, #29
 8008632:	d82b      	bhi.n	800868c <__sflush_r+0xb8>
 8008634:	4a29      	ldr	r2, [pc, #164]	; (80086dc <__sflush_r+0x108>)
 8008636:	410a      	asrs	r2, r1
 8008638:	07d6      	lsls	r6, r2, #31
 800863a:	d427      	bmi.n	800868c <__sflush_r+0xb8>
 800863c:	2200      	movs	r2, #0
 800863e:	6062      	str	r2, [r4, #4]
 8008640:	04d9      	lsls	r1, r3, #19
 8008642:	6922      	ldr	r2, [r4, #16]
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	d504      	bpl.n	8008652 <__sflush_r+0x7e>
 8008648:	1c42      	adds	r2, r0, #1
 800864a:	d101      	bne.n	8008650 <__sflush_r+0x7c>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b903      	cbnz	r3, 8008652 <__sflush_r+0x7e>
 8008650:	6560      	str	r0, [r4, #84]	; 0x54
 8008652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008654:	602f      	str	r7, [r5, #0]
 8008656:	2900      	cmp	r1, #0
 8008658:	d0c9      	beq.n	80085ee <__sflush_r+0x1a>
 800865a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800865e:	4299      	cmp	r1, r3
 8008660:	d002      	beq.n	8008668 <__sflush_r+0x94>
 8008662:	4628      	mov	r0, r5
 8008664:	f7ff f89e 	bl	80077a4 <_free_r>
 8008668:	2000      	movs	r0, #0
 800866a:	6360      	str	r0, [r4, #52]	; 0x34
 800866c:	e7c0      	b.n	80085f0 <__sflush_r+0x1c>
 800866e:	2301      	movs	r3, #1
 8008670:	4628      	mov	r0, r5
 8008672:	47b0      	blx	r6
 8008674:	1c41      	adds	r1, r0, #1
 8008676:	d1c8      	bne.n	800860a <__sflush_r+0x36>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0c5      	beq.n	800860a <__sflush_r+0x36>
 800867e:	2b1d      	cmp	r3, #29
 8008680:	d001      	beq.n	8008686 <__sflush_r+0xb2>
 8008682:	2b16      	cmp	r3, #22
 8008684:	d101      	bne.n	800868a <__sflush_r+0xb6>
 8008686:	602f      	str	r7, [r5, #0]
 8008688:	e7b1      	b.n	80085ee <__sflush_r+0x1a>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	e7ad      	b.n	80085f0 <__sflush_r+0x1c>
 8008694:	690f      	ldr	r7, [r1, #16]
 8008696:	2f00      	cmp	r7, #0
 8008698:	d0a9      	beq.n	80085ee <__sflush_r+0x1a>
 800869a:	0793      	lsls	r3, r2, #30
 800869c:	680e      	ldr	r6, [r1, #0]
 800869e:	bf08      	it	eq
 80086a0:	694b      	ldreq	r3, [r1, #20]
 80086a2:	600f      	str	r7, [r1, #0]
 80086a4:	bf18      	it	ne
 80086a6:	2300      	movne	r3, #0
 80086a8:	eba6 0807 	sub.w	r8, r6, r7
 80086ac:	608b      	str	r3, [r1, #8]
 80086ae:	f1b8 0f00 	cmp.w	r8, #0
 80086b2:	dd9c      	ble.n	80085ee <__sflush_r+0x1a>
 80086b4:	6a21      	ldr	r1, [r4, #32]
 80086b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086b8:	4643      	mov	r3, r8
 80086ba:	463a      	mov	r2, r7
 80086bc:	4628      	mov	r0, r5
 80086be:	47b0      	blx	r6
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dc06      	bgt.n	80086d2 <__sflush_r+0xfe>
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ca:	81a3      	strh	r3, [r4, #12]
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	e78e      	b.n	80085f0 <__sflush_r+0x1c>
 80086d2:	4407      	add	r7, r0
 80086d4:	eba8 0800 	sub.w	r8, r8, r0
 80086d8:	e7e9      	b.n	80086ae <__sflush_r+0xda>
 80086da:	bf00      	nop
 80086dc:	dfbffffe 	.word	0xdfbffffe

080086e0 <_fflush_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	690b      	ldr	r3, [r1, #16]
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	b913      	cbnz	r3, 80086f0 <_fflush_r+0x10>
 80086ea:	2500      	movs	r5, #0
 80086ec:	4628      	mov	r0, r5
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	b118      	cbz	r0, 80086fa <_fflush_r+0x1a>
 80086f2:	6a03      	ldr	r3, [r0, #32]
 80086f4:	b90b      	cbnz	r3, 80086fa <_fflush_r+0x1a>
 80086f6:	f7fd ff43 	bl	8006580 <__sinit>
 80086fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f3      	beq.n	80086ea <_fflush_r+0xa>
 8008702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008704:	07d0      	lsls	r0, r2, #31
 8008706:	d404      	bmi.n	8008712 <_fflush_r+0x32>
 8008708:	0599      	lsls	r1, r3, #22
 800870a:	d402      	bmi.n	8008712 <_fflush_r+0x32>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f7fe f9ac 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8008712:	4628      	mov	r0, r5
 8008714:	4621      	mov	r1, r4
 8008716:	f7ff ff5d 	bl	80085d4 <__sflush_r>
 800871a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800871c:	07da      	lsls	r2, r3, #31
 800871e:	4605      	mov	r5, r0
 8008720:	d4e4      	bmi.n	80086ec <_fflush_r+0xc>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	059b      	lsls	r3, r3, #22
 8008726:	d4e1      	bmi.n	80086ec <_fflush_r+0xc>
 8008728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872a:	f7fe f99f 	bl	8006a6c <__retarget_lock_release_recursive>
 800872e:	e7dd      	b.n	80086ec <_fflush_r+0xc>

08008730 <fiprintf>:
 8008730:	b40e      	push	{r1, r2, r3}
 8008732:	b503      	push	{r0, r1, lr}
 8008734:	4601      	mov	r1, r0
 8008736:	ab03      	add	r3, sp, #12
 8008738:	4805      	ldr	r0, [pc, #20]	; (8008750 <fiprintf+0x20>)
 800873a:	f853 2b04 	ldr.w	r2, [r3], #4
 800873e:	6800      	ldr	r0, [r0, #0]
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	f7ff fe2d 	bl	80083a0 <_vfiprintf_r>
 8008746:	b002      	add	sp, #8
 8008748:	f85d eb04 	ldr.w	lr, [sp], #4
 800874c:	b003      	add	sp, #12
 800874e:	4770      	bx	lr
 8008750:	20000068 	.word	0x20000068

08008754 <__swhatbuf_r>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	460c      	mov	r4, r1
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	2900      	cmp	r1, #0
 800875e:	b096      	sub	sp, #88	; 0x58
 8008760:	4615      	mov	r5, r2
 8008762:	461e      	mov	r6, r3
 8008764:	da0d      	bge.n	8008782 <__swhatbuf_r+0x2e>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f013 0f80 	tst.w	r3, #128	; 0x80
 800876c:	f04f 0100 	mov.w	r1, #0
 8008770:	bf0c      	ite	eq
 8008772:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008776:	2340      	movne	r3, #64	; 0x40
 8008778:	2000      	movs	r0, #0
 800877a:	6031      	str	r1, [r6, #0]
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	b016      	add	sp, #88	; 0x58
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	466a      	mov	r2, sp
 8008784:	f000 f862 	bl	800884c <_fstat_r>
 8008788:	2800      	cmp	r0, #0
 800878a:	dbec      	blt.n	8008766 <__swhatbuf_r+0x12>
 800878c:	9901      	ldr	r1, [sp, #4]
 800878e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008792:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008796:	4259      	negs	r1, r3
 8008798:	4159      	adcs	r1, r3
 800879a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879e:	e7eb      	b.n	8008778 <__swhatbuf_r+0x24>

080087a0 <__smakebuf_r>:
 80087a0:	898b      	ldrh	r3, [r1, #12]
 80087a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087a4:	079d      	lsls	r5, r3, #30
 80087a6:	4606      	mov	r6, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	d507      	bpl.n	80087bc <__smakebuf_r+0x1c>
 80087ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	2301      	movs	r3, #1
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	b002      	add	sp, #8
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	ab01      	add	r3, sp, #4
 80087be:	466a      	mov	r2, sp
 80087c0:	f7ff ffc8 	bl	8008754 <__swhatbuf_r>
 80087c4:	9900      	ldr	r1, [sp, #0]
 80087c6:	4605      	mov	r5, r0
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff f85f 	bl	800788c <_malloc_r>
 80087ce:	b948      	cbnz	r0, 80087e4 <__smakebuf_r+0x44>
 80087d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d4:	059a      	lsls	r2, r3, #22
 80087d6:	d4ef      	bmi.n	80087b8 <__smakebuf_r+0x18>
 80087d8:	f023 0303 	bic.w	r3, r3, #3
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	e7e3      	b.n	80087ac <__smakebuf_r+0xc>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	6020      	str	r0, [r4, #0]
 80087e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	9b00      	ldr	r3, [sp, #0]
 80087f0:	6163      	str	r3, [r4, #20]
 80087f2:	9b01      	ldr	r3, [sp, #4]
 80087f4:	6120      	str	r0, [r4, #16]
 80087f6:	b15b      	cbz	r3, 8008810 <__smakebuf_r+0x70>
 80087f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 f837 	bl	8008870 <_isatty_r>
 8008802:	b128      	cbz	r0, 8008810 <__smakebuf_r+0x70>
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	f043 0301 	orr.w	r3, r3, #1
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	431d      	orrs	r5, r3
 8008814:	81a5      	strh	r5, [r4, #12]
 8008816:	e7cf      	b.n	80087b8 <__smakebuf_r+0x18>

08008818 <memmove>:
 8008818:	4288      	cmp	r0, r1
 800881a:	b510      	push	{r4, lr}
 800881c:	eb01 0402 	add.w	r4, r1, r2
 8008820:	d902      	bls.n	8008828 <memmove+0x10>
 8008822:	4284      	cmp	r4, r0
 8008824:	4623      	mov	r3, r4
 8008826:	d807      	bhi.n	8008838 <memmove+0x20>
 8008828:	1e43      	subs	r3, r0, #1
 800882a:	42a1      	cmp	r1, r4
 800882c:	d008      	beq.n	8008840 <memmove+0x28>
 800882e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008836:	e7f8      	b.n	800882a <memmove+0x12>
 8008838:	4402      	add	r2, r0
 800883a:	4601      	mov	r1, r0
 800883c:	428a      	cmp	r2, r1
 800883e:	d100      	bne.n	8008842 <memmove+0x2a>
 8008840:	bd10      	pop	{r4, pc}
 8008842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800884a:	e7f7      	b.n	800883c <memmove+0x24>

0800884c <_fstat_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	; (800886c <_fstat_r+0x20>)
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	f7f9 fe14 	bl	8002486 <_fstat>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d102      	bne.n	8008868 <_fstat_r+0x1c>
 8008862:	682b      	ldr	r3, [r5, #0]
 8008864:	b103      	cbz	r3, 8008868 <_fstat_r+0x1c>
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	bd38      	pop	{r3, r4, r5, pc}
 800886a:	bf00      	nop
 800886c:	200006b0 	.word	0x200006b0

08008870 <_isatty_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d06      	ldr	r5, [pc, #24]	; (800888c <_isatty_r+0x1c>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7f9 fe13 	bl	80024a6 <_isatty>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_isatty_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_isatty_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	200006b0 	.word	0x200006b0

08008890 <_sbrk_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_sbrk_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f9 fe1c 	bl	80024d8 <_sbrk>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_sbrk_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_sbrk_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	200006b0 	.word	0x200006b0

080088b0 <memcpy>:
 80088b0:	440a      	add	r2, r1
 80088b2:	4291      	cmp	r1, r2
 80088b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088b8:	d100      	bne.n	80088bc <memcpy+0xc>
 80088ba:	4770      	bx	lr
 80088bc:	b510      	push	{r4, lr}
 80088be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c6:	4291      	cmp	r1, r2
 80088c8:	d1f9      	bne.n	80088be <memcpy+0xe>
 80088ca:	bd10      	pop	{r4, pc}

080088cc <abort>:
 80088cc:	b508      	push	{r3, lr}
 80088ce:	2006      	movs	r0, #6
 80088d0:	f000 f890 	bl	80089f4 <raise>
 80088d4:	2001      	movs	r0, #1
 80088d6:	f7f9 fd87 	bl	80023e8 <_exit>

080088da <_calloc_r>:
 80088da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088dc:	fba1 2402 	umull	r2, r4, r1, r2
 80088e0:	b94c      	cbnz	r4, 80088f6 <_calloc_r+0x1c>
 80088e2:	4611      	mov	r1, r2
 80088e4:	9201      	str	r2, [sp, #4]
 80088e6:	f7fe ffd1 	bl	800788c <_malloc_r>
 80088ea:	9a01      	ldr	r2, [sp, #4]
 80088ec:	4605      	mov	r5, r0
 80088ee:	b930      	cbnz	r0, 80088fe <_calloc_r+0x24>
 80088f0:	4628      	mov	r0, r5
 80088f2:	b003      	add	sp, #12
 80088f4:	bd30      	pop	{r4, r5, pc}
 80088f6:	220c      	movs	r2, #12
 80088f8:	6002      	str	r2, [r0, #0]
 80088fa:	2500      	movs	r5, #0
 80088fc:	e7f8      	b.n	80088f0 <_calloc_r+0x16>
 80088fe:	4621      	mov	r1, r4
 8008900:	f7fd ffda 	bl	80068b8 <memset>
 8008904:	e7f4      	b.n	80088f0 <_calloc_r+0x16>

08008906 <__ascii_mbtowc>:
 8008906:	b082      	sub	sp, #8
 8008908:	b901      	cbnz	r1, 800890c <__ascii_mbtowc+0x6>
 800890a:	a901      	add	r1, sp, #4
 800890c:	b142      	cbz	r2, 8008920 <__ascii_mbtowc+0x1a>
 800890e:	b14b      	cbz	r3, 8008924 <__ascii_mbtowc+0x1e>
 8008910:	7813      	ldrb	r3, [r2, #0]
 8008912:	600b      	str	r3, [r1, #0]
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	1e10      	subs	r0, r2, #0
 8008918:	bf18      	it	ne
 800891a:	2001      	movne	r0, #1
 800891c:	b002      	add	sp, #8
 800891e:	4770      	bx	lr
 8008920:	4610      	mov	r0, r2
 8008922:	e7fb      	b.n	800891c <__ascii_mbtowc+0x16>
 8008924:	f06f 0001 	mvn.w	r0, #1
 8008928:	e7f8      	b.n	800891c <__ascii_mbtowc+0x16>

0800892a <_realloc_r>:
 800892a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892e:	4680      	mov	r8, r0
 8008930:	4614      	mov	r4, r2
 8008932:	460e      	mov	r6, r1
 8008934:	b921      	cbnz	r1, 8008940 <_realloc_r+0x16>
 8008936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	4611      	mov	r1, r2
 800893c:	f7fe bfa6 	b.w	800788c <_malloc_r>
 8008940:	b92a      	cbnz	r2, 800894e <_realloc_r+0x24>
 8008942:	f7fe ff2f 	bl	80077a4 <_free_r>
 8008946:	4625      	mov	r5, r4
 8008948:	4628      	mov	r0, r5
 800894a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894e:	f000 f86d 	bl	8008a2c <_malloc_usable_size_r>
 8008952:	4284      	cmp	r4, r0
 8008954:	4607      	mov	r7, r0
 8008956:	d802      	bhi.n	800895e <_realloc_r+0x34>
 8008958:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800895c:	d812      	bhi.n	8008984 <_realloc_r+0x5a>
 800895e:	4621      	mov	r1, r4
 8008960:	4640      	mov	r0, r8
 8008962:	f7fe ff93 	bl	800788c <_malloc_r>
 8008966:	4605      	mov	r5, r0
 8008968:	2800      	cmp	r0, #0
 800896a:	d0ed      	beq.n	8008948 <_realloc_r+0x1e>
 800896c:	42bc      	cmp	r4, r7
 800896e:	4622      	mov	r2, r4
 8008970:	4631      	mov	r1, r6
 8008972:	bf28      	it	cs
 8008974:	463a      	movcs	r2, r7
 8008976:	f7ff ff9b 	bl	80088b0 <memcpy>
 800897a:	4631      	mov	r1, r6
 800897c:	4640      	mov	r0, r8
 800897e:	f7fe ff11 	bl	80077a4 <_free_r>
 8008982:	e7e1      	b.n	8008948 <_realloc_r+0x1e>
 8008984:	4635      	mov	r5, r6
 8008986:	e7df      	b.n	8008948 <_realloc_r+0x1e>

08008988 <__ascii_wctomb>:
 8008988:	b149      	cbz	r1, 800899e <__ascii_wctomb+0x16>
 800898a:	2aff      	cmp	r2, #255	; 0xff
 800898c:	bf85      	ittet	hi
 800898e:	238a      	movhi	r3, #138	; 0x8a
 8008990:	6003      	strhi	r3, [r0, #0]
 8008992:	700a      	strbls	r2, [r1, #0]
 8008994:	f04f 30ff 	movhi.w	r0, #4294967295
 8008998:	bf98      	it	ls
 800899a:	2001      	movls	r0, #1
 800899c:	4770      	bx	lr
 800899e:	4608      	mov	r0, r1
 80089a0:	4770      	bx	lr

080089a2 <_raise_r>:
 80089a2:	291f      	cmp	r1, #31
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4604      	mov	r4, r0
 80089a8:	460d      	mov	r5, r1
 80089aa:	d904      	bls.n	80089b6 <_raise_r+0x14>
 80089ac:	2316      	movs	r3, #22
 80089ae:	6003      	str	r3, [r0, #0]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089b8:	b112      	cbz	r2, 80089c0 <_raise_r+0x1e>
 80089ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089be:	b94b      	cbnz	r3, 80089d4 <_raise_r+0x32>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 f831 	bl	8008a28 <_getpid_r>
 80089c6:	462a      	mov	r2, r5
 80089c8:	4601      	mov	r1, r0
 80089ca:	4620      	mov	r0, r4
 80089cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d0:	f000 b818 	b.w	8008a04 <_kill_r>
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d00a      	beq.n	80089ee <_raise_r+0x4c>
 80089d8:	1c59      	adds	r1, r3, #1
 80089da:	d103      	bne.n	80089e4 <_raise_r+0x42>
 80089dc:	2316      	movs	r3, #22
 80089de:	6003      	str	r3, [r0, #0]
 80089e0:	2001      	movs	r0, #1
 80089e2:	e7e7      	b.n	80089b4 <_raise_r+0x12>
 80089e4:	2400      	movs	r4, #0
 80089e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089ea:	4628      	mov	r0, r5
 80089ec:	4798      	blx	r3
 80089ee:	2000      	movs	r0, #0
 80089f0:	e7e0      	b.n	80089b4 <_raise_r+0x12>
	...

080089f4 <raise>:
 80089f4:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <raise+0xc>)
 80089f6:	4601      	mov	r1, r0
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	f7ff bfd2 	b.w	80089a2 <_raise_r>
 80089fe:	bf00      	nop
 8008a00:	20000068 	.word	0x20000068

08008a04 <_kill_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_kill_r+0x20>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f7f9 fcd9 	bl	80023c8 <_kill>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d102      	bne.n	8008a20 <_kill_r+0x1c>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b103      	cbz	r3, 8008a20 <_kill_r+0x1c>
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	200006b0 	.word	0x200006b0

08008a28 <_getpid_r>:
 8008a28:	f7f9 bcc6 	b.w	80023b8 <_getpid>

08008a2c <_malloc_usable_size_r>:
 8008a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a30:	1f18      	subs	r0, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbc      	itt	lt
 8008a36:	580b      	ldrlt	r3, [r1, r0]
 8008a38:	18c0      	addlt	r0, r0, r3
 8008a3a:	4770      	bx	lr

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
